
Control_Ebike_ALL_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eeac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000207c  0800f050  0800f050  0001f050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110cc  080110cc  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080110cc  080110cc  000210cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110d4  080110d4  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110d4  080110d4  000210d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110d8  080110d8  000210d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080110dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  200001f0  080112cc  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d04  080112cc  00030d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1fd  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004746  00000000  00000000  0004b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0004fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117b  00000000  00000000  00051250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfc0  00000000  00000000  000523cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa71  00000000  00000000  0006e38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0b35  00000000  00000000  0008ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072d8  00000000  00000000  0012e934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00135c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f034 	.word	0x0800f034

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800f034 	.word	0x0800f034

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	ed87 0a00 	vstr	s0, [r7]
 8001030:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	ed97 0a00 	vldr	s0, [r7]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f822 	bl	8001090 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	461c      	mov	r4, r3
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}

08001062 <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	b299      	uxth	r1, r3
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	2202      	movs	r2, #2
 8001078:	f005 ffb8 	bl	8006fec <HAL_I2C_IsDeviceReady>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 800109c:	edd7 7a00 	vldr	s15, [r7]
 80010a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	d103      	bne.n	80010b2 <MCP4725_setReferenceVoltage+0x22>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <MCP4725_setReferenceVoltage+0x50>)
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	e002      	b.n	80010b8 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80010be:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010e4 <MCP4725_setReferenceVoltage+0x54>
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ca:	ee17 3a90 	vmov	r3, s15
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	819a      	strh	r2, [r3, #12]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40a00000 	.word	0x40a00000
 80010e4:	45800000 	.word	0x45800000

080010e8 <MCP4725_setVoltage>:

    Set output voltage to a fraction of Vref
*/
/**************************************************************************/ 
uint8_t MCP4725_setVoltage(MCP4725* _MCP4725, float voltage, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010f4:	460b      	mov	r3, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
  uint16_t value = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	82fb      	strh	r3, [r7, #22]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if      (voltage >= _MCP4725->_refVoltage) value = MCP4725_MAX_VALUE;      					 //make sure value never exceeds threshold
  else if (voltage <= 0)					           value = 0;
  else                            					 value = voltage * _MCP4725->_bitsPerVolt; //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
  #else
  value = voltage * _MCP4725->_bitsPerVolt;                                											 //xx,xx,xx,xx,D11,D10,D9,D8 ,D7,D6,D4,D3,D2,D9,D1,D0
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	899b      	ldrh	r3, [r3, #12]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001118:	ee17 3a90 	vmov	r3, s15
 800111c:	82fb      	strh	r3, [r7, #22]
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	8af9      	ldrh	r1, [r7, #22]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f822 	bl	800116e <MCP4725_writeComand>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 800113c:	2101      	movs	r1, #1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f895 	bl	800126e <MCP4725_readRegister>
 8001144:	4603      	mov	r3, r0
 8001146:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR)
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114e:	4293      	cmp	r3, r2
 8001150:	d008      	beq.n	8001164 <MCP4725_getEepromBusyFlag+0x30>
  {
	  return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e000      	b.n	8001166 <MCP4725_getEepromBusyFlag+0x32>
  } else
  {
     return 0;										//collision on i2c bus
 8001164:	2300      	movs	r3, #0
  }
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af02      	add	r7, sp, #8
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	461a      	mov	r2, r3
 800117c:	4603      	mov	r3, r0
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	460b      	mov	r3, r1
 8001182:	707b      	strb	r3, [r7, #1]
 8001184:	4613      	mov	r3, r2
 8001186:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b60      	cmp	r3, #96	; 0x60
 800118c:	d028      	beq.n	80011e0 <MCP4725_writeComand+0x72>
 800118e:	2b60      	cmp	r3, #96	; 0x60
 8001190:	dc4a      	bgt.n	8001228 <MCP4725_writeComand+0xba>
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <MCP4725_writeComand+0x2e>
 8001196:	2b40      	cmp	r3, #64	; 0x40
 8001198:	d022      	beq.n	80011e0 <MCP4725_writeComand+0x72>
 800119a:	e045      	b.n	8001228 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 800119c:	783b      	ldrb	r3, [r7, #0]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	b299      	uxth	r1, r3
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2302      	movs	r3, #2
 80011d6:	f005 faeb 	bl	80067b0 <HAL_I2C_Master_Transmit>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
		
      break;
 80011de:	e023      	b.n	8001228 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 80011e6:	783b      	ldrb	r3, [r7, #0]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	b299      	uxth	r1, r3
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2303      	movs	r3, #3
 800121e:	f005 fac7 	bl	80067b0 <HAL_I2C_Master_Transmit>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
		
			break;
 8001226:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MCP4725_writeComand+0xc4>
 800122e:	2300      	movs	r3, #0
 8001230:	e019      	b.n	8001266 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8001232:	787b      	ldrb	r3, [r7, #1]
 8001234:	2b60      	cmp	r3, #96	; 0x60
 8001236:	d115      	bne.n	8001264 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff7b 	bl	8001134 <MCP4725_getEepromBusyFlag>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <MCP4725_writeComand+0xda>
 8001244:	2301      	movs	r3, #1
 8001246:	e00e      	b.n	8001266 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 8001248:	2019      	movs	r0, #25
 800124a:	f004 f9e5 	bl	8005618 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff70 	bl	8001134 <MCP4725_getEepromBusyFlag>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <MCP4725_writeComand+0xf0>
 800125a:	2301      	movs	r3, #1
 800125c:	e003      	b.n	8001266 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 800125e:	2019      	movs	r0, #25
 8001260:	f004 f9da 	bl	8005618 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800126e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	466b      	mov	r3, sp
 800127e:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001284:	2300      	movs	r3, #0
 8001286:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001288:	78f9      	ldrb	r1, [r7, #3]
 800128a:	460b      	mov	r3, r1
 800128c:	3b01      	subs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	b2cb      	uxtb	r3, r1
 8001292:	2200      	movs	r2, #0
 8001294:	4698      	mov	r8, r3
 8001296:	4691      	mov	r9, r2
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ac:	b2cb      	uxtb	r3, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	461c      	mov	r4, r3
 80012b2:	4615      	mov	r5, r2
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	00eb      	lsls	r3, r5, #3
 80012be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c2:	00e2      	lsls	r2, r4, #3
 80012c4:	460b      	mov	r3, r1
 80012c6:	3307      	adds	r3, #7
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	ebad 0d03 	sub.w	sp, sp, r3
 80012d0:	ab02      	add	r3, sp, #8
 80012d2:	3300      	adds	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	b299      	uxth	r1, r3
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	f005 fb5e 	bl	80069ac <HAL_I2C_Master_Receive>
 80012f0:	4603      	mov	r3, r0
 80012f2:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <MCP4725_readRegister+0x92>
 80012fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fe:	e01f      	b.n	8001340 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d00a      	beq.n	800131c <MCP4725_readRegister+0xae>
 8001306:	2b05      	cmp	r3, #5
 8001308:	dc19      	bgt.n	800133e <MCP4725_readRegister+0xd0>
 800130a:	2b01      	cmp	r3, #1
 800130c:	d002      	beq.n	8001314 <MCP4725_readRegister+0xa6>
 800130e:	2b03      	cmp	r3, #3
 8001310:	d004      	beq.n	800131c <MCP4725_readRegister+0xae>
 8001312:	e014      	b.n	800133e <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	82fb      	strh	r3, [r7, #22]

      break;
 800131a:	e010      	b.n	800133e <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 800131c:	8abb      	ldrh	r3, [r7, #20]
 800131e:	3b02      	subs	r3, #2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	5cd3      	ldrb	r3, [r2, r3]
 8001324:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 8001326:	8afb      	ldrh	r3, [r7, #22]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	8abb      	ldrh	r3, [r7, #20]
 800132e:	3b01      	subs	r3, #1
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	82fb      	strh	r3, [r7, #22]
      break;
 800133c:	bf00      	nop
  }

  return ret_val;
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	46b5      	mov	sp, r6
}
 8001342:	4618      	mov	r0, r3
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800134c:	0000      	movs	r0, r0
	...

08001350 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t startTimeSwitch = 0;
volatile uint32_t pulseTime = 0;
volatile float speedSwitch = 0.0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1) // If the interrupt comes from PA2
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d156      	bne.n	800140e <HAL_GPIO_EXTI_Callback+0xbe>
	{
		if(startTimeSwitch == 0) // First pulse
 8001360:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <HAL_GPIO_EXTI_Callback+0x24>
		{
			startTimeSwitch = HAL_GetTick();
 8001368:	f004 f94a 	bl	8005600 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001370:	6013      	str	r3, [r2, #0]

			// start counting for the next pulse
			startTimeSwitch = HAL_GetTick();
		}
	}
}
 8001372:	e04c      	b.n	800140e <HAL_GPIO_EXTI_Callback+0xbe>
			pulseTime = HAL_GetTick() - startTimeSwitch; // Time difference between this and the previous pulse
 8001374:	f004 f944 	bl	8005600 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_GPIO_EXTI_Callback+0xd8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	4a2a      	ldr	r2, [pc, #168]	; (800142c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001382:	6013      	str	r3, [r2, #0]
			float pulseTimeInSeconds = pulseTime / 1000.0;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8d3 	bl	8000534 <__aeabi_ui2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001394:	f7ff fa72 	bl	800087c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc3a 	bl	8000c18 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	617b      	str	r3, [r7, #20]
			float wheelDiameterInMeters = 0.2032; // replace with your wheel diameter
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013aa:	613b      	str	r3, [r7, #16]
			float wheelCircumferenceInMeters = wheelDiameterInMeters * M_PI;
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f7ff f8e3 	bl	8000578 <__aeabi_f2d>
 80013b2:	a319      	add	r3, pc, #100	; (adr r3, 8001418 <HAL_GPIO_EXTI_Callback+0xc8>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f936 	bl	8000628 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fc28 	bl	8000c18 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
			speedSwitch = wheelCircumferenceInMeters / pulseTimeInSeconds; // speed in m/s
 80013cc:	edd7 6a03 	vldr	s13, [r7, #12]
 80013d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80013d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
			speedSwitch = speedSwitch * 3.6; // convert speed to km/h
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8c8 	bl	8000578 <__aeabi_f2d>
 80013e8:	a30d      	add	r3, pc, #52	; (adr r3, 8001420 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f91b 	bl	8000628 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fc0d 	bl	8000c18 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001402:	6013      	str	r3, [r2, #0]
			startTimeSwitch = HAL_GetTick();
 8001404:	f004 f8fc 	bl	8005600 <HAL_GetTick>
 8001408:	4603      	mov	r3, r0
 800140a:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_GPIO_EXTI_Callback+0xd8>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	54442d18 	.word	0x54442d18
 800141c:	400921fb 	.word	0x400921fb
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	400ccccc 	.word	0x400ccccc
 8001428:	2000020c 	.word	0x2000020c
 800142c:	20000210 	.word	0x20000210
 8001430:	408f4000 	.word	0x408f4000
 8001434:	3e5013a9 	.word	0x3e5013a9
 8001438:	20000214 	.word	0x20000214

0800143c <Throttle_Get_ADC_Value>:
#include "ThrottleADC.h"
#include "adc.h"


void Throttle_Get_ADC_Value(ADC_HandleTypeDef* hadc, uint32_t* adc_val)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
	ADC_Select_CH9();
 8001446:	f000 fad9 	bl	80019fc <ADC_Select_CH9>
	HAL_ADC_Start(hadc);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f004 f94c 	bl	80056e8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f004 fa2e 	bl	80058b6 <HAL_ADC_PollForConversion>
    *adc_val = HAL_ADC_GetValue(hadc);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f004 fab6 	bl	80059cc <HAL_ADC_GetValue>
 8001460:	4602      	mov	r2, r0
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f004 f9f2 	bl	8005850 <HAL_ADC_Stop>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0000      	movs	r0, r0
	...

08001478 <Throttle_Get_Voltage>:

void Throttle_Get_Voltage(ADC_HandleTypeDef* hadc, float* outputVoltage)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	uint32_t adc_val;
	Throttle_Get_ADC_Value(hadc, &adc_val);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffd7 	bl	800143c <Throttle_Get_ADC_Value>
    *outputVoltage = (((float)adc_val - 1000) / ADC_RESOLUTION) * (VMAX - VMIN) + VMIN;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001498:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001500 <Throttle_Get_Voltage+0x88>
 800149c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a0:	ee17 0a90 	vmov	r0, s15
 80014a4:	f7ff f868 	bl	8000578 <__aeabi_f2d>
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <Throttle_Get_Voltage+0x8c>)
 80014ae:	f7ff f9e5 	bl	800087c <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	a30d      	add	r3, pc, #52	; (adr r3, 80014f0 <Throttle_Get_Voltage+0x78>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8b2 	bl	8000628 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	a30a      	add	r3, pc, #40	; (adr r3, 80014f8 <Throttle_Get_Voltage+0x80>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fef3 	bl	80002bc <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb9b 	bl	8000c18 <__aeabi_d2f>
 80014e2:	4602      	mov	r2, r0
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	33333334 	.word	0x33333334
 80014f4:	400b3333 	.word	0x400b3333
 80014f8:	9999999a 	.word	0x9999999a
 80014fc:	3fe99999 	.word	0x3fe99999
 8001500:	447a0000 	.word	0x447a0000
 8001504:	409f4000 	.word	0x409f4000

08001508 <Throttle_Get_Average_Voltage>:

void Throttle_Get_Average_Voltage(ADC_HandleTypeDef* hadc, float* averageVoltage)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    float sum_voltage = 0;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    float single_voltage;
    for (int i = 0; i < NUM_SAMPLES; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	e010      	b.n	8001540 <Throttle_Get_Average_Voltage+0x38>
    {
        Throttle_Get_Voltage(hadc, &single_voltage);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffa7 	bl	8001478 <Throttle_Get_Voltage>
        sum_voltage += single_voltage;
 800152a:	edd7 7a03 	vldr	s15, [r7, #12]
 800152e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < NUM_SAMPLES; i++)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3301      	adds	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001546:	dbea      	blt.n	800151e <Throttle_Get_Average_Voltage+0x16>
    }
    *averageVoltage = sum_voltage / NUM_SAMPLES;
 8001548:	ed97 7a05 	vldr	s14, [r7, #20]
 800154c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001564 <Throttle_Get_Average_Voltage+0x5c>
 8001550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	edc3 7a00 	vstr	s15, [r3]
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	43fa0000 	.word	0x43fa0000

08001568 <Throttle_Control_PWM>:

void Throttle_Control_PWM(ADC_HandleTypeDef* hadc, TIM_HandleTypeDef* htim, uint32_t channel)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
    float throttle_avg_voltage;
    Throttle_Get_Average_Voltage(hadc, &throttle_avg_voltage);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4619      	mov	r1, r3
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff ffc4 	bl	8001508 <Throttle_Get_Average_Voltage>

    uint8_t pwm_value = (uint8_t)((throttle_avg_voltage - VMIN) / (VMAX - VMIN) * 100);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fff8 	bl	8000578 <__aeabi_f2d>
 8001588:	a328      	add	r3, pc, #160	; (adr r3, 800162c <Throttle_Control_PWM+0xc4>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe fe93 	bl	80002b8 <__aeabi_dsub>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	a326      	add	r3, pc, #152	; (adr r3, 8001634 <Throttle_Control_PWM+0xcc>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f96c 	bl	800087c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <Throttle_Control_PWM+0xc0>)
 80015b2:	f7ff f839 	bl	8000628 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fb0b 	bl	8000bd8 <__aeabi_d2uiz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]

    HAL_TIM_PWM_Start(htim, channel);
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f006 ffb5 	bl	8008538 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(htim, channel, 100 - pwm_value);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <Throttle_Control_PWM+0x7a>
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015e0:	e01c      	b.n	800161c <Throttle_Control_PWM+0xb4>
    __HAL_TIM_SET_COMPARE(htim, channel, 100 - pwm_value);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d107      	bne.n	80015f8 <Throttle_Control_PWM+0x90>
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	f1c3 0164 	rsb	r1, r3, #100	; 0x64
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	460b      	mov	r3, r1
 80015f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015f6:	e011      	b.n	800161c <Throttle_Control_PWM+0xb4>
    __HAL_TIM_SET_COMPARE(htim, channel, 100 - pwm_value);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d107      	bne.n	800160e <Throttle_Control_PWM+0xa6>
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	f1c3 0164 	rsb	r1, r3, #100	; 0x64
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	460b      	mov	r3, r1
 800160a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800160c:	e006      	b.n	800161c <Throttle_Control_PWM+0xb4>
    __HAL_TIM_SET_COMPARE(htim, channel, 100 - pwm_value);
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	f1c3 0164 	rsb	r1, r3, #100	; 0x64
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	460b      	mov	r3, r1
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	40590000 	.word	0x40590000
 800162c:	9999999a 	.word	0x9999999a
 8001630:	3fe99999 	.word	0x3fe99999
 8001634:	33333334 	.word	0x33333334
 8001638:	400b3333 	.word	0x400b3333
 800163c:	00000000 	.word	0x00000000

08001640 <ACS7XX_Init_Default>:
#include "adc.h"
#include "Battery.h"


void ACS7XX_Init_Default(ACS7XX *AcsStateHandler)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

	AcsStateHandler->_sensitivity = ACS7XX_SENSITIVITY_DEFAULT;
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	a30f      	add	r3, pc, #60	; (adr r3, 8001688 <ACS7XX_Init_Default+0x48>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	e9c1 2306 	strd	r2, r3, [r1, #24]
    AcsStateHandler->_resolution = (double) BOARD_ADC_DEPTH;
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	a30e      	add	r3, pc, #56	; (adr r3, 8001690 <ACS7XX_Init_Default+0x50>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    AcsStateHandler->_factor_value = (double) ACS7XX_FACTOR_VALUE;
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	a30d      	add	r3, pc, #52	; (adr r3, 8001698 <ACS7XX_Init_Default+0x58>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    AcsStateHandler->_lastCurrent = 0.0;
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	76c8b439 	.word	0x76c8b439
 800168c:	3f9a9fbe 	.word	0x3f9a9fbe
 8001690:	00000000 	.word	0x00000000
 8001694:	40affe00 	.word	0x40affe00
 8001698:	66666666 	.word	0x66666666
 800169c:	400a6666 	.word	0x400a6666

080016a0 <ACS7XX_Calibrate>:


void ACS7XX_Calibrate(ACS7XX *AcsStateHandler)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	uint32_t offset_sum = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
	   // Assuming you have ADC_HandleTypeDef hadc1; declared and initialized

	for (uint16_t i = 0; i < N_Samples_CALIB; i++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	817b      	strh	r3, [r7, #10]
 80016b0:	e016      	b.n	80016e0 <ACS7XX_Calibrate+0x40>
	{
	  ADC_Select_CH5();
 80016b2:	f000 f963 	bl	800197c <ADC_Select_CH5>
	  HAL_ADC_Start(&hadc1);
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <ACS7XX_Calibrate+0x68>)
 80016b8:	f004 f816 	bl	80056e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <ACS7XX_Calibrate+0x68>)
 80016c2:	f004 f8f8 	bl	80058b6 <HAL_ADC_PollForConversion>
	  offset_sum += HAL_ADC_GetValue(&hadc1);
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <ACS7XX_Calibrate+0x68>)
 80016c8:	f004 f980 	bl	80059cc <HAL_ADC_GetValue>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_Stop(&hadc1);
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <ACS7XX_Calibrate+0x68>)
 80016d6:	f004 f8bb 	bl	8005850 <HAL_ADC_Stop>
	for (uint16_t i = 0; i < N_Samples_CALIB; i++)
 80016da:	897b      	ldrh	r3, [r7, #10]
 80016dc:	3301      	adds	r3, #1
 80016de:	817b      	strh	r3, [r7, #10]
 80016e0:	897b      	ldrh	r3, [r7, #10]
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e6:	d3e4      	bcc.n	80016b2 <ACS7XX_Calibrate+0x12>
	}
	// Calculate average ADC reading for offset
	 AcsStateHandler->_offset = (uint32_t) offset_sum / N_Samples_CALIB;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <ACS7XX_Calibrate+0x6c>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	edc3 7a00 	vstr	s15, [r3]
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000218 	.word	0x20000218
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <ACS7XX_InstantCurrent>:

void ACS7XX_InstantCurrent(ACS7XX *AcsStateHandler, double *current, float *voltage, uint32_t *value)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]

    uint32_t sumValues = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < N_Samples_INST_CURRENT; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	e016      	b.n	8001756 <ACS7XX_InstantCurrent+0x46>
    {
        // Assuming you have ADC_HandleTypeDef &hadc1 declared and initialized
    	ADC_Select_CH5();
 8001728:	f000 f928 	bl	800197c <ADC_Select_CH5>
        HAL_ADC_Start(&hadc1);
 800172c:	4842      	ldr	r0, [pc, #264]	; (8001838 <ACS7XX_InstantCurrent+0x128>)
 800172e:	f003 ffdb 	bl	80056e8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001732:	f04f 31ff 	mov.w	r1, #4294967295
 8001736:	4840      	ldr	r0, [pc, #256]	; (8001838 <ACS7XX_InstantCurrent+0x128>)
 8001738:	f004 f8bd 	bl	80058b6 <HAL_ADC_PollForConversion>
        sumValues += HAL_ADC_GetValue(&hadc1);
 800173c:	483e      	ldr	r0, [pc, #248]	; (8001838 <ACS7XX_InstantCurrent+0x128>)
 800173e:	f004 f945 	bl	80059cc <HAL_ADC_GetValue>
 8001742:	4602      	mov	r2, r0
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	4413      	add	r3, r2
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_ADC_Stop(&hadc1);
 800174a:	483b      	ldr	r0, [pc, #236]	; (8001838 <ACS7XX_InstantCurrent+0x128>)
 800174c:	f004 f880 	bl	8005850 <HAL_ADC_Stop>
    for (int i = 0; i < N_Samples_INST_CURRENT; i++)
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	3301      	adds	r3, #1
 8001754:	623b      	str	r3, [r7, #32]
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800175c:	dbe4      	blt.n	8001728 <ACS7XX_InstantCurrent+0x18>
    }

    uint32_t readvalue = sumValues / N_Samples_INST_CURRENT;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	4a36      	ldr	r2, [pc, #216]	; (800183c <ACS7XX_InstantCurrent+0x12c>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	61bb      	str	r3, [r7, #24]
    float readvolt = (((float)readvalue - AcsStateHandler->_offset) * VPP);
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177e:	ee17 0a90 	vmov	r0, s15
 8001782:	f7fe fef9 	bl	8000578 <__aeabi_f2d>
 8001786:	a328      	add	r3, pc, #160	; (adr r3, 8001828 <ACS7XX_InstantCurrent+0x118>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe ff4c 	bl	8000628 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa3e 	bl	8000c18 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	617b      	str	r3, [r7, #20]
    float readcur = readvolt / AcsStateHandler->_sensitivity;
 80017a0:	6978      	ldr	r0, [r7, #20]
 80017a2:	f7fe fee9 	bl	8000578 <__aeabi_f2d>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017ac:	f7ff f866 	bl	800087c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fa2e 	bl	8000c18 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	61fb      	str	r3, [r7, #28]

    // If current is less than 0.1 A, set it to 0
    if (readcur < 0.1)
 80017c0:	69f8      	ldr	r0, [r7, #28]
 80017c2:	f7fe fed9 	bl	8000578 <__aeabi_f2d>
 80017c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001830 <ACS7XX_InstantCurrent+0x120>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f99e 	bl	8000b0c <__aeabi_dcmplt>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <ACS7XX_InstantCurrent+0xcc>
    {
        readcur = 0.0;
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    }

    *current = readcur;
 80017dc:	69f8      	ldr	r0, [r7, #28]
 80017de:	f7fe fecb 	bl	8000578 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	e9c1 2300 	strd	r2, r3, [r1]
    *voltage = readvolt;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]
    *value = readvalue;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]
    AcsStateHandler->_lastCurrent = readcur;
 80017f8:	69f8      	ldr	r0, [r7, #28]
 80017fa:	f7fe febd 	bl	8000578 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	e9c1 2302 	strd	r2, r3, [r1, #8]
    AcsStateHandler->_lreadvolt = readvolt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
    AcsStateHandler->_lreadvalue = readvalue;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e3fc03eb 	.word	0xe3fc03eb
 800182c:	3f4a680c 	.word	0x3f4a680c
 8001830:	9999999a 	.word	0x9999999a
 8001834:	3fb99999 	.word	0x3fb99999
 8001838:	20000218 	.word	0x20000218
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <ACS7XX_ResetCounters>:

void ACS7XX_ResetCounters(ACS7XX *AcsStateHandler)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

    AcsStateHandler->_lastCurrent = 0.0;
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9c1 2302 	strd	r2, r3, [r1, #8]


}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <Power_Calculate>:


void Power_Calculate(ACS7XX *AcsStateHandler, ADC_HandleTypeDef* hadc, float *power)
{
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  double current;
  float voltage;
  uint32_t value;

  // Read current
  ACS7XX_InstantCurrent(AcsStateHandler, &current, &voltage, &value);
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	f107 021c 	add.w	r2, r7, #28
 8001878:	f107 0120 	add.w	r1, r7, #32
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff ff47 	bl	8001710 <ACS7XX_InstantCurrent>

  // Read voltage
  float batteryVoltage;
  Battery_Get_Voltage(hadc, &batteryVoltage);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	68b8      	ldr	r0, [r7, #8]
 800188a:	f000 f9dd 	bl	8001c48 <Battery_Get_Voltage>

  // Calculate power
  float sum_power = 0;
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < N_Samples_POWER; i++)
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
 8001898:	e01d      	b.n	80018d6 <Power_Calculate+0x72>
  {
	  sum_power += current * batteryVoltage;
 800189a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189c:	f7fe fe6c 	bl	8000578 <__aeabi_f2d>
 80018a0:	4604      	mov	r4, r0
 80018a2:	460d      	mov	r5, r1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe66 	bl	8000578 <__aeabi_f2d>
 80018ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018b0:	f7fe feba 	bl	8000628 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fcfe 	bl	80002bc <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f9a6 	bl	8000c18 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < N_Samples_POWER; i++)
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d2:	3301      	adds	r3, #1
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018dc:	dbdd      	blt.n	800189a <Power_Calculate+0x36>
  }
  *power= sum_power / N_Samples_POWER;
 80018de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018e2:	eddf 6a05 	vldr	s13, [pc, #20]	; 80018f8 <Power_Calculate+0x94>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	edc3 7a00 	vstr	s15, [r3]
//  *power = current * batteryVoltage;
}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	43fa0000 	.word	0x43fa0000

080018fc <ADC_Select_CH3>:

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */

 void ADC_Select_CH3(void)
 {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_3;
 800190e:	2303      	movs	r3, #3
 8001910:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001916:	2303      	movs	r3, #3
 8001918:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <ADC_Select_CH3+0x3c>)
 8001920:	f004 f862 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <ADC_Select_CH3+0x32>
	  {
	    Error_Handler();
 800192a:	f002 fae7 	bl	8003efc <Error_Handler>
	  }
 }
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000218 	.word	0x20000218

0800193c <ADC_Select_CH4>:

 void ADC_Select_CH4(void)
 {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 800194e:	2304      	movs	r3, #4
 8001950:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001952:	2301      	movs	r3, #1
 8001954:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001956:	2303      	movs	r3, #3
 8001958:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <ADC_Select_CH4+0x3c>)
 8001960:	f004 f842 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 800196a:	f002 fac7 	bl	8003efc <Error_Handler>
	  }
 }
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000218 	.word	0x20000218

0800197c <ADC_Select_CH5>:

 /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
 */

 void ADC_Select_CH5(void)
 {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_5;
 800198e:	2305      	movs	r3, #5
 8001990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001996:	2302      	movs	r3, #2
 8001998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <ADC_Select_CH5+0x3c>)
 80019a0:	f004 f822 	bl	80059e8 <HAL_ADC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <ADC_Select_CH5+0x32>
  {
    Error_Handler();
 80019aa:	f002 faa7 	bl	8003efc <Error_Handler>
  }
 }
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000218 	.word	0x20000218

080019bc <ADC_Select_CH8>:

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
 void ADC_Select_CH8(void)
 {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_8;
 80019ce:	2308      	movs	r3, #8
 80019d0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <ADC_Select_CH8+0x3c>)
 80019e0:	f004 f802 	bl	80059e8 <HAL_ADC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <ADC_Select_CH8+0x32>
	  {
	    Error_Handler();
 80019ea:	f002 fa87 	bl	8003efc <Error_Handler>
	  }
 }
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000218 	.word	0x20000218

080019fc <ADC_Select_CH9>:


  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
 void ADC_Select_CH9(void)
 {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001a02:	463b      	mov	r3, r7
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_9;
 8001a0e:	2309      	movs	r3, #9
 8001a10:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001a16:	2305      	movs	r3, #5
 8001a18:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <ADC_Select_CH9+0x3c>)
 8001a20:	f003 ffe2 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <ADC_Select_CH9+0x32>
	  {
	    Error_Handler();
 8001a2a:	f002 fa67 	bl	8003efc <Error_Handler>
	  }
 }
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000218 	.word	0x20000218

08001a3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <MX_ADC1_Init+0x10c>)
 8001a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6e:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a7e:	4a33      	ldr	r2, [pc, #204]	; (8001b4c <MX_ADC1_Init+0x110>)
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a96:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9c:	4829      	ldr	r0, [pc, #164]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001a9e:	f003 fddf 	bl	8005660 <HAL_ADC_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001aa8:	f002 fa28 	bl	8003efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001aac:	2303      	movs	r3, #3
 8001aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4619      	mov	r1, r3
 8001abc:	4821      	ldr	r0, [pc, #132]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001abe:	f003 ff93 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ac8:	f002 fa18 	bl	8003efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001acc:	2305      	movs	r3, #5
 8001ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481a      	ldr	r0, [pc, #104]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001ada:	f003 ff85 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ae4:	f002 fa0a 	bl	8003efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001aec:	2303      	movs	r3, #3
 8001aee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4813      	ldr	r0, [pc, #76]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001af6:	f003 ff77 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b00:	f002 f9fc 	bl	8003efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001b04:	2309      	movs	r3, #9
 8001b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001b12:	f003 ff69 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b1c:	f002 f9ee 	bl	8003efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b20:	2304      	movs	r3, #4
 8001b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001b24:	2305      	movs	r3, #5
 8001b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b28:	463b      	mov	r3, r7
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_ADC1_Init+0x108>)
 8001b2e:	f003 ff5b 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001b38:	f002 f9e0 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000218 	.word	0x20000218
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	0f000001 	.word	0x0f000001

08001b50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a24      	ldr	r2, [pc, #144]	; (8001c00 <HAL_ADC_MspInit+0xb0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d141      	bne.n	8001bf6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_ADC_MspInit+0xb4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_IN3_Pin|ADC1_IN4_Pin|ADC1_IN5_Pin;
 8001bc6:	2338      	movs	r3, #56	; 0x38
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <HAL_ADC_MspInit+0xb8>)
 8001bda:	f004 fad7 	bl	800618c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin|ADC1_IN9_Pin;
 8001bde:	2303      	movs	r3, #3
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <HAL_ADC_MspInit+0xbc>)
 8001bf2:	f004 facb 	bl	800618c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40012000 	.word	0x40012000
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400

08001c10 <Battery_Get_ADC_Value>:
#include "ssd1306_fonts.h"
#include "ssd1306.h"


void Battery_Get_ADC_Value(ADC_HandleTypeDef* hadc , uint32_t* bat_adc_val)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	ADC_Select_CH8();
 8001c1a:	f7ff fecf 	bl	80019bc <ADC_Select_CH8>
	HAL_ADC_Start(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f003 fd62 	bl	80056e8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f003 fe44 	bl	80058b6 <HAL_ADC_PollForConversion>
    *bat_adc_val = HAL_ADC_GetValue(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f003 fecc 	bl	80059cc <HAL_ADC_GetValue>
 8001c34:	4602      	mov	r2, r0
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(hadc);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f003 fe08 	bl	8005850 <HAL_ADC_Stop>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <Battery_Get_Voltage>:

void Battery_Get_Voltage(ADC_HandleTypeDef* hadc , float* batteryVoltage)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    float totalVoltage = 0;
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    uint32_t bat_adc_val;
    float VoltageADC;
    for(uint16_t i = 0; i < MEASURE_COUNT; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	837b      	strh	r3, [r7, #26]
 8001c5c:	e02a      	b.n	8001cb4 <Battery_Get_Voltage+0x6c>
    {
        // Get the ADC value
        Battery_Get_ADC_Value(hadc, &bat_adc_val);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffd3 	bl	8001c10 <Battery_Get_ADC_Value>

        // Compute the corresponding voltage value
        VoltageADC = (((float)bat_adc_val / BATTERY_ADC_RESOLUTION) * VREF);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d50 <Battery_Get_Voltage+0x108>
 8001c78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c7c:	ee16 0a90 	vmov	r0, s13
 8001c80:	f7fe fc7a 	bl	8000578 <__aeabi_f2d>
 8001c84:	a32a      	add	r3, pc, #168	; (adr r3, 8001d30 <Battery_Get_Voltage+0xe8>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fccd 	bl	8000628 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe ffbf 	bl	8000c18 <__aeabi_d2f>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]

        // Add the voltage to the total
        totalVoltage += VoltageADC;
 8001c9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	edc7 7a07 	vstr	s15, [r7, #28]
    for(uint16_t i = 0; i < MEASURE_COUNT; i++)
 8001cae:	8b7b      	ldrh	r3, [r7, #26]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	837b      	strh	r3, [r7, #26]
 8001cb4:	8b7b      	ldrh	r3, [r7, #26]
 8001cb6:	2b63      	cmp	r3, #99	; 0x63
 8001cb8:	d9d1      	bls.n	8001c5e <Battery_Get_Voltage+0x16>
    }

    // Compute the average voltage
    float averagedVoltage = totalVoltage / (float)MEASURE_COUNT;
 8001cba:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cbe:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001d54 <Battery_Get_Voltage+0x10c>
 8001cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Scale and shift voltage value
    *batteryVoltage = ((averagedVoltage - V_RMIN) / (V_RMAX - V_RMIN)) * (BAT_VMAX - BAT_VMIN) + BAT_VMIN;
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7fe fc54 	bl	8000578 <__aeabi_f2d>
 8001cd0:	a319      	add	r3, pc, #100	; (adr r3, 8001d38 <Battery_Get_Voltage+0xf0>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe faef 	bl	80002b8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	a317      	add	r3, pc, #92	; (adr r3, 8001d40 <Battery_Get_Voltage+0xf8>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fdc8 	bl	800087c <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	a314      	add	r3, pc, #80	; (adr r3, 8001d48 <Battery_Get_Voltage+0x100>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc95 	bl	8000628 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <Battery_Get_Voltage+0x110>)
 8001d0c:	f7fe fad6 	bl	80002bc <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe ff7e 	bl	8000c18 <__aeabi_d2f>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	66666666 	.word	0x66666666
 8001d34:	400a6666 	.word	0x400a6666
 8001d38:	eb851eb8 	.word	0xeb851eb8
 8001d3c:	3ff2b851 	.word	0x3ff2b851
 8001d40:	47ae147b 	.word	0x47ae147b
 8001d44:	40007ae1 	.word	0x40007ae1
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40414ccc 	.word	0x40414ccc
 8001d50:	45800000 	.word	0x45800000
 8001d54:	42c80000 	.word	0x42c80000
 8001d58:	40340000 	.word	0x40340000

08001d5c <Button_IsPressed>:
#include "buttons.h"
#include "stm32f4xx_hal_conf.h"


uint8_t Button_IsPressed(BUTTON_T *button)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(button->GPIO_Port, button->GPIO_Pin) == GPIO_PIN_RESET;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f004 fb90 	bl	8006494 <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf0c      	ite	eq
 8001d7a:	2301      	moveq	r3, #1
 8001d7c:	2300      	movne	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <Button_Init>:


//// Button Init /////
void Button_Init(BUTTON_T* Key, GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t TimerDebounce,
				uint32_t TimerLongPress, uint32_t TimerRepeat)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	80fb      	strh	r3, [r7, #6]
    /* Configure GPIO pins for input */
	Key->Button_State = IDLE;		// Set initial state for the button
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	719a      	strb	r2, [r3, #6]
	Key->GPIO_Port = GPIO_Port;		// Remember GPIO Port for the button
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	601a      	str	r2, [r3, #0]
	Key->GPIO_Pin = GPIO_Pin;		// Remember GPIO Pin for the button
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	809a      	strh	r2, [r3, #4]

	Key->TimerDebounce = TimerDebounce;		// Remember Debounce Time for the button
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	60da      	str	r2, [r3, #12]
	Key->TimerLongPress = TimerLongPress;	// Remember LongPress Time for the button
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	611a      	str	r2, [r3, #16]
	Key->TimerRepeat = TimerRepeat;			// Remember Repeat Time for the button
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	615a      	str	r2, [r3, #20]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8001dcc:	4806      	ldr	r0, [pc, #24]	; (8001de8 <DS18B20_StartAll+0x20>)
 8001dce:	f002 fa1c 	bl	800420a <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8001dd2:	21cc      	movs	r1, #204	; 0xcc
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <DS18B20_StartAll+0x20>)
 8001dd6:	f002 fa95 	bl	8004304 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8001dda:	2144      	movs	r1, #68	; 0x44
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DS18B20_StartAll+0x20>)
 8001dde:	f002 fa91 	bl	8004304 <OneWire_WriteByte>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200002a0 	.word	0x200002a0

08001dec <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <DS18B20_Read+0x150>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	79fa      	ldrb	r2, [r7, #7]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d301      	bcc.n	8001e06 <DS18B20_Read+0x1a>
		return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e096      	b.n	8001f34 <DS18B20_Read+0x148>

	int16_t temperature;
	int8_t resolution;
	float result;
	uint8_t i = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <DS18B20_Read+0x154>)
 8001e10:	4413      	add	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f942 	bl	800209c <DS18B20_Is>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <DS18B20_Read+0x36>
		return 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e088      	b.n	8001f34 <DS18B20_Read+0x148>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8001e22:	4848      	ldr	r0, [pc, #288]	; (8001f44 <DS18B20_Read+0x158>)
 8001e24:	f002 fa44 	bl	80042b0 <OneWire_ReadBit>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e080      	b.n	8001f34 <DS18B20_Read+0x148>

	OneWire_Reset(&OneWire); // Reset the bus
 8001e32:	4844      	ldr	r0, [pc, #272]	; (8001f44 <DS18B20_Read+0x158>)
 8001e34:	f002 f9e9 	bl	800420a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4a40      	ldr	r2, [pc, #256]	; (8001f40 <DS18B20_Read+0x154>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	4840      	ldr	r0, [pc, #256]	; (8001f44 <DS18B20_Read+0x158>)
 8001e44:	f002 fb93 	bl	800456e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001e48:	21be      	movs	r1, #190	; 0xbe
 8001e4a:	483e      	ldr	r0, [pc, #248]	; (8001f44 <DS18B20_Read+0x158>)
 8001e4c:	f002 fa5a 	bl	8004304 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001e50:	2300      	movs	r3, #0
 8001e52:	74fb      	strb	r3, [r7, #19]
 8001e54:	e00d      	b.n	8001e72 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8001e56:	7cfc      	ldrb	r4, [r7, #19]
 8001e58:	483a      	ldr	r0, [pc, #232]	; (8001f44 <DS18B20_Read+0x158>)
 8001e5a:	f002 fa71 	bl	8004340 <OneWire_ReadByte>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	f104 0318 	add.w	r3, r4, #24
 8001e66:	443b      	add	r3, r7
 8001e68:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	74fb      	strb	r3, [r7, #19]
 8001e72:	7cfb      	ldrb	r3, [r7, #19]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d9ee      	bls.n	8001e56 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8001e78:	7a3b      	ldrb	r3, [r7, #8]
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	7a7b      	ldrb	r3, [r7, #9]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8001e86:	482f      	ldr	r0, [pc, #188]	; (8001f44 <DS18B20_Read+0x158>)
 8001e88:	f002 f9bf 	bl	800420a <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8001e8c:	7b3b      	ldrb	r3, [r7, #12]
 8001e8e:	115b      	asrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3309      	adds	r3, #9
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	3b09      	subs	r3, #9
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d83f      	bhi.n	8001f28 <DS18B20_Read+0x13c>
 8001ea8:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <DS18B20_Read+0xc4>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08001edb 	.word	0x08001edb
 8001eb8:	08001ef5 	.word	0x08001ef5
 8001ebc:	08001f0f 	.word	0x08001f0f
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8001ec0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ecc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001ed8:	e028      	b.n	8001f2c <DS18B20_Read+0x140>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8001eda:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eee:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8001ef2:	e01b      	b.n	8001f2c <DS18B20_Read+0x140>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8001ef4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f08:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8001f0c:	e00e      	b.n	8001f2c <DS18B20_Read+0x140>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001f0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001f48 <DS18B20_Read+0x15c>
 8001f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f22:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8001f26:	e001      	b.n	8001f2c <DS18B20_Read+0x140>
		default:
			result = 0xFF;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <DS18B20_Read+0x160>)
 8001f2a:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	200002b4 	.word	0x200002b4
 8001f40:	20000260 	.word	0x20000260
 8001f44:	200002a0 	.word	0x200002a0
 8001f48:	3d800000 	.word	0x3d800000
 8001f4c:	437f0000 	.word	0x437f0000

08001f50 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	460a      	mov	r2, r1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <DS18B20_SetResolution+0x140>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d301      	bcc.n	8001f6e <DS18B20_SetResolution+0x1e>
		return 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e08c      	b.n	8002088 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	4a48      	ldr	r2, [pc, #288]	; (8002094 <DS18B20_SetResolution+0x144>)
 8001f74:	4413      	add	r3, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f890 	bl	800209c <DS18B20_Is>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <DS18B20_SetResolution+0x36>
		return 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e080      	b.n	8002088 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8001f86:	4844      	ldr	r0, [pc, #272]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001f88:	f002 f93f 	bl	800420a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4a40      	ldr	r2, [pc, #256]	; (8002094 <DS18B20_SetResolution+0x144>)
 8001f92:	4413      	add	r3, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	4840      	ldr	r0, [pc, #256]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001f98:	f002 fae9 	bl	800456e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001f9c:	21be      	movs	r1, #190	; 0xbe
 8001f9e:	483e      	ldr	r0, [pc, #248]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001fa0:	f002 f9b0 	bl	8004304 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8001fa4:	483c      	ldr	r0, [pc, #240]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001fa6:	f002 f9cb 	bl	8004340 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8001faa:	483b      	ldr	r0, [pc, #236]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001fac:	f002 f9c8 	bl	8004340 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001fb0:	4839      	ldr	r0, [pc, #228]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001fb2:	f002 f9c5 	bl	8004340 <OneWire_ReadByte>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8001fba:	4837      	ldr	r0, [pc, #220]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001fbc:	f002 f9c0 	bl	8004340 <OneWire_ReadByte>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001fc4:	4834      	ldr	r0, [pc, #208]	; (8002098 <DS18B20_SetResolution+0x148>)
 8001fc6:	f002 f9bb 	bl	8004340 <OneWire_ReadByte>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d108      	bne.n	8001fe6 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fda:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	f023 0320 	bic.w	r3, r3, #32
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e022      	b.n	800202c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	2b0a      	cmp	r3, #10
 8001fea:	d108      	bne.n	8001ffe <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ff2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e016      	b.n	800202c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	2b0b      	cmp	r3, #11
 8002002:	d108      	bne.n	8002016 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800200a:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	f023 0320 	bic.w	r3, r3, #32
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e00a      	b.n	800202c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d107      	bne.n	800202c <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002022:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 800202c:	481a      	ldr	r0, [pc, #104]	; (8002098 <DS18B20_SetResolution+0x148>)
 800202e:	f002 f8ec 	bl	800420a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <DS18B20_SetResolution+0x144>)
 8002038:	4413      	add	r3, r2
 800203a:	4619      	mov	r1, r3
 800203c:	4816      	ldr	r0, [pc, #88]	; (8002098 <DS18B20_SetResolution+0x148>)
 800203e:	f002 fa96 	bl	800456e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8002042:	214e      	movs	r1, #78	; 0x4e
 8002044:	4814      	ldr	r0, [pc, #80]	; (8002098 <DS18B20_SetResolution+0x148>)
 8002046:	f002 f95d 	bl	8004304 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800204a:	7bbb      	ldrb	r3, [r7, #14]
 800204c:	4619      	mov	r1, r3
 800204e:	4812      	ldr	r0, [pc, #72]	; (8002098 <DS18B20_SetResolution+0x148>)
 8002050:	f002 f958 	bl	8004304 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8002054:	7b7b      	ldrb	r3, [r7, #13]
 8002056:	4619      	mov	r1, r3
 8002058:	480f      	ldr	r0, [pc, #60]	; (8002098 <DS18B20_SetResolution+0x148>)
 800205a:	f002 f953 	bl	8004304 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	4619      	mov	r1, r3
 8002062:	480d      	ldr	r0, [pc, #52]	; (8002098 <DS18B20_SetResolution+0x148>)
 8002064:	f002 f94e 	bl	8004304 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <DS18B20_SetResolution+0x148>)
 800206a:	f002 f8ce 	bl	800420a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <DS18B20_SetResolution+0x144>)
 8002074:	4413      	add	r3, r2
 8002076:	4619      	mov	r1, r3
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <DS18B20_SetResolution+0x148>)
 800207a:	f002 fa78 	bl	800456e <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 800207e:	2148      	movs	r1, #72	; 0x48
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <DS18B20_SetResolution+0x148>)
 8002082:	f002 f93f 	bl	8004304 <OneWire_WriteByte>

	return 1;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200002b4 	.word	0x200002b4
 8002094:	20000260 	.word	0x20000260
 8002098:	200002a0 	.word	0x200002a0

0800209c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b28      	cmp	r3, #40	; 0x28
 80020aa:	d101      	bne.n	80020b0 <DS18B20_Is+0x14>
		return 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <DS18B20_Is+0x16>
	return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DS18B20_AllDone+0x10>)
 80020c6:	f002 f8f3 	bl	80042b0 <OneWire_ReadBit>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200002a0 	.word	0x200002a0

080020d4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80020da:	f7ff fff1 	bl	80020c0 <DS18B20_AllDone>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02e      	beq.n	8002142 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80020e4:	2300      	movs	r3, #0
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	e026      	b.n	8002138 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <DS18B20_ReadAll+0x78>)
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4413      	add	r3, r2
 80020f2:	330c      	adds	r3, #12
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4a13      	ldr	r2, [pc, #76]	; (800214c <DS18B20_ReadAll+0x78>)
 80020fe:	4413      	add	r3, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ffcb 	bl	800209c <DS18B20_Is>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d012      	beq.n	8002132 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	3308      	adds	r3, #8
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <DS18B20_ReadAll+0x78>)
 8002114:	441a      	add	r2, r3
 8002116:	79fc      	ldrb	r4, [r7, #7]
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fe65 	bl	8001dec <DS18B20_Read>
 8002122:	4603      	mov	r3, r0
 8002124:	4619      	mov	r1, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <DS18B20_ReadAll+0x78>)
 8002128:	0123      	lsls	r3, r4, #4
 800212a:	4413      	add	r3, r2
 800212c:	330c      	adds	r3, #12
 800212e:	460a      	mov	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	3301      	adds	r3, #1
 8002136:	71fb      	strb	r3, [r7, #7]
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <DS18B20_ReadAll+0x7c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	429a      	cmp	r2, r3
 8002140:	d3d3      	bcc.n	80020ea <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	20000260 	.word	0x20000260
 8002150:	200002b4 	.word	0x200002b4

08002154 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <DS18B20_GetROM+0x54>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <DS18B20_GetROM+0x54>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e00d      	b.n	8002192 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 8002176:	79f9      	ldrb	r1, [r7, #7]
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	4403      	add	r3, r0
 8002180:	480a      	ldr	r0, [pc, #40]	; (80021ac <DS18B20_GetROM+0x58>)
 8002182:	0109      	lsls	r1, r1, #4
 8002184:	4401      	add	r1, r0
 8002186:	440a      	add	r2, r1
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	3301      	adds	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b07      	cmp	r3, #7
 8002196:	d9ee      	bls.n	8002176 <DS18B20_GetROM+0x22>
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200002b4 	.word	0x200002b4
 80021ac:	20000260 	.word	0x20000260

080021b0 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	return TempSensorCount;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <DS18B20_Quantity+0x14>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200002b4 	.word	0x200002b4

080021c8 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <DS18B20_GetTemperature+0x40>)
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4413      	add	r3, r2
 80021dc:	330c      	adds	r3, #12
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <DS18B20_GetTemperature+0x20>
		return 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e008      	b.n	80021fa <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <DS18B20_GetTemperature+0x40>)
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4413      	add	r3, r2
 80021f0:	3308      	adds	r3, #8
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	601a      	str	r2, [r3, #0]
	return 1;
 80021f8:	2301      	movs	r3, #1

}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000260 	.word	0x20000260

0800220c <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	2300      	movs	r3, #0
 800221c:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_Pin_GPIO_Port, DS18B20_Pin_Pin); // Init OneWire bus
 800221e:	2201      	movs	r2, #1
 8002220:	491f      	ldr	r1, [pc, #124]	; (80022a0 <DS18B20_Init+0x94>)
 8002222:	4820      	ldr	r0, [pc, #128]	; (80022a4 <DS18B20_Init+0x98>)
 8002224:	f002 f9e0 	bl	80045e8 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8002228:	481e      	ldr	r0, [pc, #120]	; (80022a4 <DS18B20_Init+0x98>)
 800222a:	f002 f983 	bl	8004534 <OneWire_First>
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]
	while(next)
 8002232:	e018      	b.n	8002266 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <DS18B20_Init+0x9c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <DS18B20_Init+0x9c>)
 800223e:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8002240:	7bbb      	ldrb	r3, [r7, #14]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	73ba      	strb	r2, [r7, #14]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <DS18B20_Init+0xa0>)
 800224a:	4413      	add	r3, r2
 800224c:	4619      	mov	r1, r3
 800224e:	4815      	ldr	r0, [pc, #84]	; (80022a4 <DS18B20_Init+0x98>)
 8002250:	f002 f9ac 	bl	80045ac <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8002254:	4813      	ldr	r0, [pc, #76]	; (80022a4 <DS18B20_Init+0x98>)
 8002256:	f002 f97d 	bl	8004554 <OneWire_Next>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <DS18B20_Init+0x9c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d803      	bhi.n	800226e <DS18B20_Init+0x62>
	while(next)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e3      	bne.n	8002234 <DS18B20_Init+0x28>
 800226c:	e000      	b.n	8002270 <DS18B20_Init+0x64>
			break;
 800226e:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8002270:	2300      	movs	r3, #0
 8002272:	737b      	strb	r3, [r7, #13]
 8002274:	e00a      	b.n	800228c <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8002276:	79fa      	ldrb	r2, [r7, #7]
 8002278:	7b7b      	ldrb	r3, [r7, #13]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fe67 	bl	8001f50 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8002282:	f7ff fda1 	bl	8001dc8 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8002286:	7b7b      	ldrb	r3, [r7, #13]
 8002288:	3301      	adds	r3, #1
 800228a:	737b      	strb	r3, [r7, #13]
 800228c:	7b7a      	ldrb	r2, [r7, #13]
 800228e:	7bbb      	ldrb	r3, [r7, #14]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3f0      	bcc.n	8002276 <DS18B20_Init+0x6a>
	}
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40020000 	.word	0x40020000
 80022a4:	200002a0 	.word	0x200002a0
 80022a8:	200002b4 	.word	0x200002b4
 80022ac:	20000260 	.word	0x20000260

080022b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <MX_GPIO_Init+0x118>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a3e      	ldr	r2, [pc, #248]	; (80023c8 <MX_GPIO_Init+0x118>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <MX_GPIO_Init+0x118>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <MX_GPIO_Init+0x118>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a37      	ldr	r2, [pc, #220]	; (80023c8 <MX_GPIO_Init+0x118>)
 80022ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <MX_GPIO_Init+0x118>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <MX_GPIO_Init+0x118>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <MX_GPIO_Init+0x118>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <MX_GPIO_Init+0x118>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <MX_GPIO_Init+0x118>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <MX_GPIO_Init+0x118>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <MX_GPIO_Init+0x118>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233c:	4823      	ldr	r0, [pc, #140]	; (80023cc <MX_GPIO_Init+0x11c>)
 800233e:	f004 f8c1 	bl	80064c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin_Pin;
 8002342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Pin_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <MX_GPIO_Init+0x11c>)
 800235c:	f003 ff16 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin_Pin;
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002364:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_Pin_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4816      	ldr	r0, [pc, #88]	; (80023d0 <MX_GPIO_Init+0x120>)
 8002376:	f003 ff09 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI1_Pin;
 800237a:	2302      	movs	r3, #2
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800237e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI1_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4810      	ldr	r0, [pc, #64]	; (80023d0 <MX_GPIO_Init+0x120>)
 8002390:	f003 fefc 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin_Pin|BUTTON2_Pin_Pin|BUTTON3_Pin_Pin;
 8002394:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	480a      	ldr	r0, [pc, #40]	; (80023d4 <MX_GPIO_Init+0x124>)
 80023aa:	f003 feef 	bl	800618c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2006      	movs	r0, #6
 80023b4:	f003 fe21 	bl	8005ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023b8:	2006      	movs	r0, #6
 80023ba:	f003 fe3a 	bl	8006032 <HAL_NVIC_EnableIRQ>

}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400

080023d8 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <strtoke+0x1a>
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <strtoke+0x60>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <strtoke+0x60>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <strtoke+0x26>
 80023fa:	2300      	movs	r3, #0
 80023fc:	e017      	b.n	800242e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <strtoke+0x60>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <strtoke+0x60>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f009 fe93 	bl	800c136 <strpbrk>
 8002410:	4603      	mov	r3, r0
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <strtoke+0x60>)
 8002414:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <strtoke+0x60>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <strtoke+0x54>
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <strtoke+0x60>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4904      	ldr	r1, [pc, #16]	; (8002438 <strtoke+0x60>)
 8002426:	600a      	str	r2, [r1, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200002b8 	.word	0x200002b8

0800243c <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800244a:	3301      	adds	r3, #1
 800244c:	425a      	negs	r2, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	bf58      	it	pl
 8002454:	4253      	negpl	r3, r2
 8002456:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	429a      	cmp	r2, r3
 8002462:	d02f      	beq.n	80024c4 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <NEO6_ReceiveUartChar+0xa0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b0d      	cmp	r3, #13
 800246c:	d114      	bne.n	8002498 <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002474:	3301      	adds	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <NEO6_ReceiveUartChar+0xa0>)
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	b2d1      	uxtb	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	460a      	mov	r2, r1
 8002494:	711a      	strb	r2, [r3, #4]
 8002496:	e015      	b.n	80024c4 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <NEO6_ReceiveUartChar+0xa0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <NEO6_ReceiveUartChar+0x88>
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <NEO6_ReceiveUartChar+0xa0>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b0a      	cmp	r3, #10
 80024aa:	d00b      	beq.n	80024c4 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <NEO6_ReceiveUartChar+0xa0>)
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	b2d1      	uxtb	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	460a      	mov	r2, r1
 80024c2:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4904      	ldr	r1, [pc, #16]	; (80024dc <NEO6_ReceiveUartChar+0xa0>)
 80024cc:	4618      	mov	r0, r3
 80024ce:	f007 fa66 	bl	800999e <HAL_UART_Receive_IT>
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200002b5 	.word	0x200002b5

080024e0 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d102      	bne.n	80024fe <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	e013      	b.n	8002526 <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8002504:	3301      	adds	r3, #1
 8002506:	425a      	negs	r2, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	bf58      	it	pl
 800250e:	4253      	negpl	r3, r2
 8002510:	b2da      	uxtb	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	791b      	ldrb	r3, [r3, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002540:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01e      	beq.n	800258a <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 800254c:	e008      	b.n	8002560 <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	2b0d      	cmp	r3, #13
 8002552:	d00e      	beq.n	8002572 <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	7afa      	ldrb	r2, [r7, #11]
 8002558:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffbd 	bl	80024e0 <NEO6_GetCharFromBuffer>
 8002566:	4603      	mov	r3, r0
 8002568:	72fb      	strb	r3, [r7, #11]
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <NEO6_GetLineFromBuffer+0x1c>
 8002570:	e000      	b.n	8002574 <NEO6_GetLineFromBuffer+0x42>
				break;
 8002572:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002580:	3b01      	subs	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 800259c:	499c      	ldr	r1, [pc, #624]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 800259e:	2000      	movs	r0, #0
 80025a0:	f7ff ff1a 	bl	80023d8 <strtoke>
 80025a4:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03d      	beq.n	800262a <NEO6_ParseGPRMC+0x96>
	{
		Temp = atoi(ParsePoiner);
 80025ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025b0:	f008 f923 	bl	800a7fa <atoi>
 80025b4:	4603      	mov	r3, r0
 80025b6:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Second = Temp % 100;
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	4b96      	ldr	r3, [pc, #600]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80025bc:	fba3 1302 	umull	r1, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	2164      	movs	r1, #100	; 0x64
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	4a8f      	ldr	r2, [pc, #572]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095a      	lsrs	r2, r3, #5
 80025dc:	4b8d      	ldr	r3, [pc, #564]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80025de:	fba3 1302 	umull	r1, r3, r3, r2
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2164      	movs	r1, #100	; 0x64
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = ((Temp / 10000) % 100 + 1) % 24;  // WINTERTIME       //     //(Temp / 10000) % 100; SUMMERTIME
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	4a88      	ldr	r2, [pc, #544]	; (8002818 <NEO6_ParseGPRMC+0x284>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0b5a      	lsrs	r2, r3, #13
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 8002600:	fba3 1302 	umull	r1, r3, r3, r2
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	2164      	movs	r1, #100	; 0x64
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	4b82      	ldr	r3, [pc, #520]	; (800281c <NEO6_ParseGPRMC+0x288>)
 8002612:	fba3 2301 	umull	r2, r3, r3, r1
 8002616:	091a      	lsrs	r2, r3, #4
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	1aca      	subs	r2, r1, r3
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 800262a:	4979      	ldr	r1, [pc, #484]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fed3 	bl	80023d8 <strtoke>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002634:	4976      	ldr	r1, [pc, #472]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 8002636:	2000      	movs	r0, #0
 8002638:	f7ff fece 	bl	80023d8 <strtoke>
 800263c:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d039      	beq.n	80026ba <NEO6_ParseGPRMC+0x126>
	{
		float RawLatitude = atof(ParsePoiner);
 8002646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002648:	f008 f8d4 	bl	800a7f4 <atof>
 800264c:	ec53 2b10 	vmov	r2, r3, d0
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fae0 	bl	8000c18 <__aeabi_d2f>
 8002658:	4603      	mov	r3, r0
 800265a:	61fb      	str	r3, [r7, #28]
		int DegLat = (int)(RawLatitude / 100);
 800265c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002660:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002820 <NEO6_ParseGPRMC+0x28c>
 8002664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800266c:	ee17 3a90 	vmov	r3, s15
 8002670:	61bb      	str	r3, [r7, #24]
		float MinLat = RawLatitude - (DegLat * 100);
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2264      	movs	r2, #100	; 0x64
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ed97 7a07 	vldr	s14, [r7, #28]
 8002686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268a:	edc7 7a05 	vstr	s15, [r7, #20]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002698:	edd7 6a05 	vldr	s13, [r7, #20]
 800269c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8002824 <NEO6_ParseGPRMC+0x290>
 80026a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a8:	ee17 0a90 	vmov	r0, s15
 80026ac:	f7fd ff64 	bl	8000578 <__aeabi_f2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80026ba:	4955      	ldr	r1, [pc, #340]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fe8b 	bl	80023d8 <strtoke>
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <NEO6_ParseGPRMC+0x142>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 80026d6:	494e      	ldr	r1, [pc, #312]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff fe7d 	bl	80023d8 <strtoke>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d039      	beq.n	800275c <NEO6_ParseGPRMC+0x1c8>
	{
		float RawLongitude = atof(ParsePoiner);
 80026e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ea:	f008 f883 	bl	800a7f4 <atof>
 80026ee:	ec53 2b10 	vmov	r2, r3, d0
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe fa8f 	bl	8000c18 <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	613b      	str	r3, [r7, #16]
		int DegLon = (int)(RawLongitude / 100);
 80026fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002702:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002820 <NEO6_ParseGPRMC+0x28c>
 8002706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800270a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270e:	ee17 3a90 	vmov	r3, s15
 8002712:	60fb      	str	r3, [r7, #12]
		float MinLon = RawLongitude - (DegLon * 100);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2264      	movs	r2, #100	; 0x64
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002724:	ed97 7a04 	vldr	s14, [r7, #16]
 8002728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272c:	edc7 7a02 	vstr	s15, [r7, #8]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273a:	edd7 6a02 	vldr	s13, [r7, #8]
 800273e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8002824 <NEO6_ParseGPRMC+0x290>
 8002742:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	ee17 0a90 	vmov	r0, s15
 800274e:	f7fd ff13 	bl	8000578 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 800275c:	492c      	ldr	r1, [pc, #176]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 800275e:	2000      	movs	r0, #0
 8002760:	f7ff fe3a 	bl	80023d8 <strtoke>
 8002764:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <NEO6_ParseGPRMC+0x1e4>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8002778:	4925      	ldr	r1, [pc, #148]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff fe2c 	bl	80023d8 <strtoke>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 8002782:	4923      	ldr	r1, [pc, #140]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fe27 	bl	80023d8 <strtoke>
 800278a:	6278      	str	r0, [r7, #36]	; 0x24
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 800278c:	4920      	ldr	r1, [pc, #128]	; (8002810 <NEO6_ParseGPRMC+0x27c>)
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff fe22 	bl	80023d8 <strtoke>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d033      	beq.n	8002806 <NEO6_ParseGPRMC+0x272>
	{
		Temp = atoi(ParsePoiner);
 800279e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a0:	f008 f82b 	bl	800a7fa <atoi>
 80027a4:	4603      	mov	r3, r0
 80027a6:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Year = Temp % 100;
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80027ac:	fba3 1302 	umull	r1, r3, r3, r2
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	2164      	movs	r1, #100	; 0x64
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	095a      	lsrs	r2, r3, #5
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80027ce:	fba3 1302 	umull	r1, r3, r3, r2
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2164      	movs	r1, #100	; 0x64
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <NEO6_ParseGPRMC+0x284>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	0b5a      	lsrs	r2, r3, #13
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <NEO6_ParseGPRMC+0x280>)
 80027f0:	fba3 1302 	umull	r1, r3, r3, r2
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	2164      	movs	r1, #100	; 0x64
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800f050 	.word	0x0800f050
 8002814:	51eb851f 	.word	0x51eb851f
 8002818:	d1b71759 	.word	0xd1b71759
 800281c:	aaaaaaab 	.word	0xaaaaaaab
 8002820:	42c80000 	.word	0x42c80000
 8002824:	42700000 	.word	0x42700000

08002828 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8002830:	4921      	ldr	r1, [pc, #132]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 8002832:	2000      	movs	r0, #0
 8002834:	f7ff fdd0 	bl	80023d8 <strtoke>
 8002838:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800283a:	491f      	ldr	r1, [pc, #124]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fdcb 	bl	80023d8 <strtoke>
 8002842:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8002844:	491c      	ldr	r1, [pc, #112]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fdc6 	bl	80023d8 <strtoke>
 800284c:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800284e:	491a      	ldr	r1, [pc, #104]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff fdc1 	bl	80023d8 <strtoke>
 8002856:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8002858:	4917      	ldr	r1, [pc, #92]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff fdbc 	bl	80023d8 <strtoke>
 8002860:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <NEO6_ParseGPVTG+0x56>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f007 ffc2 	bl	800a7f4 <atof>
 8002870:	eeb0 7a40 	vmov.f32	s14, s0
 8002874:	eef0 7a60 	vmov.f32	s15, s1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
	}
	ParsePoiner = strtoke(NULL, ",");
 800287e:	490e      	ldr	r1, [pc, #56]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff fda9 	bl	80023d8 <strtoke>
 8002886:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8002888:	490b      	ldr	r1, [pc, #44]	; (80028b8 <NEO6_ParseGPVTG+0x90>)
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fda4 	bl	80023d8 <strtoke>
 8002890:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <NEO6_ParseGPVTG+0x86>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f007 ffaa 	bl	800a7f4 <atof>
 80028a0:	eeb0 7a40 	vmov.f32	s14, s0
 80028a4:	eef0 7a60 	vmov.f32	s15, s1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
	}
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	0800f050 	.word	0x0800f050

080028bc <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;


	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 80028c4:	4969      	ldr	r1, [pc, #420]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fd86 	bl	80023d8 <strtoke>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80028ce:	4967      	ldr	r1, [pc, #412]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7ff fd81 	bl	80023d8 <strtoke>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d039      	beq.n	8002954 <NEO6_ParseGPGGA+0x98>
	{
		float RawLatitude = atof(ParsePoiner);
 80028e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e2:	f007 ff87 	bl	800a7f4 <atof>
 80028e6:	ec53 2b10 	vmov	r2, r3, d0
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f993 	bl	8000c18 <__aeabi_d2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	623b      	str	r3, [r7, #32]
		int DegLat = (int)(RawLatitude / 100);
 80028f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80028fa:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002a70 <NEO6_ParseGPGGA+0x1b4>
 80028fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002906:	ee17 3a90 	vmov	r3, s15
 800290a:	61fb      	str	r3, [r7, #28]
		float MinLat = RawLatitude - (DegLat * 100);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2264      	movs	r2, #100	; 0x64
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002924:	edc7 7a06 	vstr	s15, [r7, #24]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002932:	edd7 6a06 	vldr	s13, [r7, #24]
 8002936:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8002a74 <NEO6_ParseGPGGA+0x1b8>
 800293a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800293e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002942:	ee17 0a90 	vmov	r0, s15
 8002946:	f7fd fe17 	bl	8000578 <__aeabi_f2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8002954:	4945      	ldr	r1, [pc, #276]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fd3e 	bl	80023d8 <strtoke>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 800295e:	4943      	ldr	r1, [pc, #268]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fd39 	bl	80023d8 <strtoke>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d039      	beq.n	80029e4 <NEO6_ParseGPGGA+0x128>
	{
		float RawLongitude = atof(ParsePoiner);
 8002970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002972:	f007 ff3f 	bl	800a7f4 <atof>
 8002976:	ec53 2b10 	vmov	r2, r3, d0
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f7fe f94b 	bl	8000c18 <__aeabi_d2f>
 8002982:	4603      	mov	r3, r0
 8002984:	617b      	str	r3, [r7, #20]
		int DegLon = (int)(RawLongitude / 100);
 8002986:	ed97 7a05 	vldr	s14, [r7, #20]
 800298a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002a70 <NEO6_ParseGPGGA+0x1b4>
 800298e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002996:	ee17 3a90 	vmov	r3, s15
 800299a:	613b      	str	r3, [r7, #16]
		float MinLon = RawLongitude - (DegLon * 100);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2264      	movs	r2, #100	; 0x64
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	edc7 7a03 	vstr	s15, [r7, #12]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80029c6:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8002a74 <NEO6_ParseGPGGA+0x1b8>
 80029ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	ee17 0a90 	vmov	r0, s15
 80029d6:	f7fd fdcf 	bl	8000578 <__aeabi_f2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 80029e4:	4921      	ldr	r1, [pc, #132]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fcf6 	bl	80023d8 <strtoke>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 80029ee:	491f      	ldr	r1, [pc, #124]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff fcf1 	bl	80023d8 <strtoke>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <NEO6_ParseGPGGA+0x154>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8002a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a02:	f007 fefa 	bl	800a7fa <atoi>
 8002a06:	4603      	mov	r3, r0
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8002a10:	4916      	ldr	r1, [pc, #88]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff fce0 	bl	80023d8 <strtoke>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <NEO6_ParseGPGGA+0x176>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8002a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a24:	f007 fee9 	bl	800a7fa <atoi>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8002a32:	490e      	ldr	r1, [pc, #56]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff fccf 	bl	80023d8 <strtoke>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8002a3c:	490b      	ldr	r1, [pc, #44]	; (8002a6c <NEO6_ParseGPGGA+0x1b0>)
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fcca 	bl	80023d8 <strtoke>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <NEO6_ParseGPGGA+0x1a6>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8002a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a50:	f007 fed0 	bl	800a7f4 <atof>
 8002a54:	eeb0 7a40 	vmov.f32	s14, s0
 8002a58:	eef0 7a60 	vmov.f32	s15, s1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
	}
}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	0800f050 	.word	0x0800f050
 8002a70:	42c80000 	.word	0x42c80000
 8002a74:	42700000 	.word	0x42700000

08002a78 <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8002a80:	4930      	ldr	r1, [pc, #192]	; (8002b44 <NEO6_ParseGPGSA+0xcc>)
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7ff fca8 	bl	80023d8 <strtoke>
 8002a88:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 8002a8a:	492e      	ldr	r1, [pc, #184]	; (8002b44 <NEO6_ParseGPGSA+0xcc>)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7ff fca3 	bl	80023d8 <strtoke>
 8002a92:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8002a9c:	68b8      	ldr	r0, [r7, #8]
 8002a9e:	f007 feac 	bl	800a7fa <atoi>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e007      	b.n	8002ac2 <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 8002ab2:	4924      	ldr	r1, [pc, #144]	; (8002b44 <NEO6_ParseGPGSA+0xcc>)
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff fc8f 	bl	80023d8 <strtoke>
 8002aba:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b0b      	cmp	r3, #11
 8002ac6:	d9f4      	bls.n	8002ab2 <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 8002ac8:	491e      	ldr	r1, [pc, #120]	; (8002b44 <NEO6_ParseGPGSA+0xcc>)
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7ff fc84 	bl	80023d8 <strtoke>
 8002ad0:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <NEO6_ParseGPGSA+0x76>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 8002ada:	68b8      	ldr	r0, [r7, #8]
 8002adc:	f007 fe8a 	bl	800a7f4 <atof>
 8002ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ae4:	eef0 7a60 	vmov.f32	s15, s1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8002aee:	4915      	ldr	r1, [pc, #84]	; (8002b44 <NEO6_ParseGPGSA+0xcc>)
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff fc71 	bl	80023d8 <strtoke>
 8002af6:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <NEO6_ParseGPGSA+0x9c>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8002b00:	68b8      	ldr	r0, [r7, #8]
 8002b02:	f007 fe77 	bl	800a7f4 <atof>
 8002b06:	eeb0 7a40 	vmov.f32	s14, s0
 8002b0a:	eef0 7a60 	vmov.f32	s15, s1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8002b14:	490b      	ldr	r1, [pc, #44]	; (8002b44 <NEO6_ParseGPGSA+0xcc>)
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7ff fc5e 	bl	80023d8 <strtoke>
 8002b1c:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <NEO6_ParseGPGSA+0xc2>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8002b26:	68b8      	ldr	r0, [r7, #8]
 8002b28:	f007 fe64 	bl	800a7f4 <atof>
 8002b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b30:	eef0 7a60 	vmov.f32	s15, s1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8
	}
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	0800f050 	.word	0x0800f050

08002b48 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002b56:	491a      	ldr	r1, [pc, #104]	; (8002bc0 <NEO6_ParseLine+0x78>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fc3d 	bl	80023d8 <strtoke>
 8002b5e:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8002b60:	4918      	ldr	r1, [pc, #96]	; (8002bc4 <NEO6_ParseLine+0x7c>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7fd fb3c 	bl	80001e0 <strcmp>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <NEO6_ParseLine+0x2e>
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fd10 	bl	8002594 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 8002b74:	e01f      	b.n	8002bb6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8002b76:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <NEO6_ParseLine+0x80>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7fd fb31 	bl	80001e0 <strcmp>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <NEO6_ParseLine+0x44>
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fe4f 	bl	8002828 <NEO6_ParseGPVTG>
}
 8002b8a:	e014      	b.n	8002bb6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8002b8c:	490f      	ldr	r1, [pc, #60]	; (8002bcc <NEO6_ParseLine+0x84>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7fd fb26 	bl	80001e0 <strcmp>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <NEO6_ParseLine+0x5a>
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fe8e 	bl	80028bc <NEO6_ParseGPGGA>
}
 8002ba0:	e009      	b.n	8002bb6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8002ba2:	490b      	ldr	r1, [pc, #44]	; (8002bd0 <NEO6_ParseLine+0x88>)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7fd fb1b 	bl	80001e0 <strcmp>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <NEO6_ParseLine+0x6e>
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff61 	bl	8002a78 <NEO6_ParseGPGSA>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	0800f050 	.word	0x0800f050
 8002bc4:	0800f054 	.word	0x0800f054
 8002bc8:	0800f05c 	.word	0x0800f05c
 8002bcc:	0800f064 	.word	0x0800f064
 8002bd0:	0800f06c 	.word	0x0800f06c

08002bd4 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
    	if(GpsStateHandler->UartBufferLines)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <NEO6_Task+0x1e>
    	{
        NEO6_GetLineFromBuffer(GpsStateHandler);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fc96 	bl	8002532 <NEO6_GetLineFromBuffer>
        NEO6_ParseLine(GpsStateHandler);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ff9e 	bl	8002b48 <NEO6_ParseLine>
    	}
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <NEO6_Init>:
double NEO6_GetTotalDistance(NEO6_State *GpsStateHandler) {
    return GpsStateHandler->total_distance;
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2230      	movs	r2, #48	; 0x30
 8002c7e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2230      	movs	r2, #48	; 0x30
 8002c94:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->last_latitude = 0;
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	GpsStateHandler->last_longitude = 0;
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->total_distance = 0;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

	GpsStateHandler->SpeedKilometers = 0;
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->SpeedKnots = 0;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0

	GpsStateHandler->SatelitesNumber = 0;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	GpsStateHandler->Quality = 0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	GpsStateHandler->Dop = 0;
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	GpsStateHandler->Hdop = 0;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	GpsStateHandler->Vdop = 0;
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4904      	ldr	r1, [pc, #16]	; (8002d30 <NEO6_Init+0x11c>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f006 fe3c 	bl	800999e <HAL_UART_Receive_IT>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200002b5 	.word	0x200002b5

08002d34 <HAL_TIM_IC_START>:
#include "math.h"
#include "stm32f4xx_hal_tim.h"


void HAL_TIM_IC_START(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4804      	ldr	r0, [pc, #16]	; (8002d4c <HAL_TIM_IC_START+0x18>)
 8002d3c:	f005 fd06 	bl	800874c <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002d40:	2104      	movs	r1, #4
 8002d42:	4802      	ldr	r0, [pc, #8]	; (8002d4c <HAL_TIM_IC_START+0x18>)
 8002d44:	f005 fd02 	bl	800874c <HAL_TIM_IC_Start_IT>
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000a98 	.word	0x20000a98

08002d50 <HAL_TIM_IC_CaptureCallback>:
float elapsedTimeHours;



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
/* Instantiate for TIM3 */
	if(htim->Instance == TIM2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	f040 80eb 	bne.w	8002f3a <HAL_TIM_IC_CaptureCallback+0x1ea>
	{
	// For both rising and falling edges
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7f1b      	ldrb	r3, [r3, #28]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d004      	beq.n	8002d76 <HAL_TIM_IC_CaptureCallback+0x26>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7f1b      	ldrb	r3, [r3, #28]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	f040 80e2 	bne.w	8002f3a <HAL_TIM_IC_CaptureCallback+0x1ea>
		{
			if (HAL_GetTick() - lastImpulseTime >= TIMEOUT)
 8002d76:	f002 fc43 	bl	8005600 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b78      	ldr	r3, [pc, #480]	; (8002f60 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d86:	d30a      	bcc.n	8002d9e <HAL_TIM_IC_CaptureCallback+0x4e>
		    {
		    	pulseCounter = 0;
 8002d88:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
		    	speed = 0;
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
		    	rotational_speed = 0;
 8002d96:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
		    }

			uint32_t now = HAL_GetTick();
 8002d9e:	f002 fc2f 	bl	8005600 <HAL_GetTick>
 8002da2:	61f8      	str	r0, [r7, #28]
			if(now - lastImpulseTime > DEBOUNCE_DELAY) // If enough time has passed since last impulse
 8002da4:	4b6e      	ldr	r3, [pc, #440]	; (8002f60 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f240 80c4 	bls.w	8002f3a <HAL_TIM_IC_CaptureCallback+0x1ea>
				{
					if(pulseCounter == 0)
 8002db2:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_TIM_IC_CaptureCallback+0x70>
					{
						startTime = now;
 8002dba:	4a6d      	ldr	r2, [pc, #436]	; (8002f70 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	6013      	str	r3, [r2, #0]
					}
					pulseCounter++;
 8002dc0:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4a67      	ldr	r2, [pc, #412]	; (8002f64 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002dc8:	6013      	str	r3, [r2, #0]
					lastImpulseTime = now; // Update the time of the last registered impulse
 8002dca:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	6013      	str	r3, [r2, #0]
					// Check if we have 30 pulses
			if (pulseCounter == 30)
 8002dd0:	4b64      	ldr	r3, [pc, #400]	; (8002f64 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b1e      	cmp	r3, #30
 8002dd6:	f040 8096 	bne.w	8002f06 <HAL_TIM_IC_CaptureCallback+0x1b6>
			{
	        // Compute elapsed time
	        elapsedTime = HAL_GetTick() - startTime;
 8002dda:	f002 fc11 	bl	8005600 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dee:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002df0:	edc3 7a00 	vstr	s15, [r3]

	        // Compute rotational speed (RPS)
	        float elapsedTimeSec = elapsedTime / 500.0;
 8002df4:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd fbbd 	bl	8000578 <__aeabi_f2d>
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002e04:	f7fd fd3a 	bl	800087c <__aeabi_ddiv>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7fd ff02 	bl	8000c18 <__aeabi_d2f>
 8002e14:	4603      	mov	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]
	        rotational_speed = ((60 / elapsedTimeSec) / 30);
 8002e18:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f7c <HAL_TIM_IC_CaptureCallback+0x22c>
 8002e1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e24:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
	        rotational_speed = rotational_speed * 60; // Convert to RPM (rotations per minute)
 8002e32:	4b4e      	ldr	r3, [pc, #312]	; (8002f6c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002f7c <HAL_TIM_IC_CaptureCallback+0x22c>
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002e42:	edc3 7a00 	vstr	s15, [r3]

	        // Compute linear speed
	        float diameter_in_meters = 8 * 0.0254; // Diameter in meters (8 inches -> ~0.2032m)
 8002e46:	4b4e      	ldr	r3, [pc, #312]	; (8002f80 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002e48:	617b      	str	r3, [r7, #20]
	        float circumference = diameter_in_meters * M_PI;
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7fd fb94 	bl	8000578 <__aeabi_f2d>
 8002e50:	a33d      	add	r3, pc, #244	; (adr r3, 8002f48 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fbe7 	bl	8000628 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fed9 	bl	8000c18 <__aeabi_d2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	613b      	str	r3, [r7, #16]
	        speed = circumference * (rotational_speed / 60); // Convert RPM to RPS and calculate speed in m/s
 8002e6a:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002f7c <HAL_TIM_IC_CaptureCallback+0x22c>
 8002e74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002e82:	edc3 7a00 	vstr	s15, [r3]
	        speed = speed * 3.6; // Convert speed to km/h
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb74 	bl	8000578 <__aeabi_f2d>
 8002e90:	a32f      	add	r3, pc, #188	; (adr r3, 8002f50 <HAL_TIM_IC_CaptureCallback+0x200>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	f7fd fbc7 	bl	8000628 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f7fd feb9 	bl	8000c18 <__aeabi_d2f>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002eaa:	6013      	str	r3, [r2, #0]

	        // Compute distance for this set of 30 pulses
	        elapsedTimeHours = elapsedTime / 3600000.0; // Convert elapsed time to hours
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb61 	bl	8000578 <__aeabi_f2d>
 8002eb6:	a328      	add	r3, pc, #160	; (adr r3, 8002f58 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fcde 	bl	800087c <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fea6 	bl	8000c18 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002ed0:	6013      	str	r3, [r2, #0]
	        float pulseDistance = speed * elapsedTimeHours; // distance for this set of 30 pulses in km
 8002ed2:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002ed4:	ed93 7a00 	vldr	s14, [r3]
 8002ed8:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee2:	edc7 7a03 	vstr	s15, [r7, #12]

	    	// Add the pulse distance to the total distance
	    	totalDistance += pulseDistance;
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002ee8:	ed93 7a00 	vldr	s14, [r3]
 8002eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]

	        // Reset pulse counter
	        pulseCounter = 0;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

	        // Start new time measurement
	        startTime = 0;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

	      }
	      lastImpulseTime = HAL_GetTick();
 8002f06:	f002 fb7b 	bl	8005600 <HAL_GetTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002f0e:	6013      	str	r3, [r2, #0]
	      // Restart measure for both channels
	      __HAL_TIM_SetCounter(htim, 0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

	      if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7f1b      	ldrb	r3, [r3, #28]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_IC_CaptureCallback+0x1da>
	      {
	        HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);
 8002f20:	2100      	movs	r1, #0
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f005 fc12 	bl	800874c <HAL_TIM_IC_Start_IT>
	        HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_2);
	      }
	    }
	  }
	}
}
 8002f28:	e007      	b.n	8002f3a <HAL_TIM_IC_CaptureCallback+0x1ea>
	      else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7f1b      	ldrb	r3, [r3, #28]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d103      	bne.n	8002f3a <HAL_TIM_IC_CaptureCallback+0x1ea>
	        HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_2);
 8002f32:	2104      	movs	r1, #4
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f005 fc09 	bl	800874c <HAL_TIM_IC_Start_IT>
}
 8002f3a:	bf00      	nop
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	f3af 8000 	nop.w
 8002f48:	54442d18 	.word	0x54442d18
 8002f4c:	400921fb 	.word	0x400921fb
 8002f50:	cccccccd 	.word	0xcccccccd
 8002f54:	400ccccc 	.word	0x400ccccc
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	414b7740 	.word	0x414b7740
 8002f60:	200002bc 	.word	0x200002bc
 8002f64:	200002c4 	.word	0x200002c4
 8002f68:	200002d0 	.word	0x200002d0
 8002f6c:	200002d4 	.word	0x200002d4
 8002f70:	200002c8 	.word	0x200002c8
 8002f74:	200002cc 	.word	0x200002cc
 8002f78:	407f4000 	.word	0x407f4000
 8002f7c:	42700000 	.word	0x42700000
 8002f80:	3e5013a9 	.word	0x3e5013a9
 8002f84:	200002dc 	.word	0x200002dc
 8002f88:	200002d8 	.word	0x200002d8

08002f8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <MX_I2C1_Init+0x54>)
 8002f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <MX_I2C1_Init+0x58>)
 8002f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fca:	f003 faad 	bl	8006528 <HAL_I2C_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fd4:	f000 ff92 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200002e0 	.word	0x200002e0
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	00061a80 	.word	0x00061a80

08002fe8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_I2C2_Init+0x50>)
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <MX_I2C2_Init+0x54>)
 8002ff0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_I2C2_Init+0x50>)
 8002ff4:	4a12      	ldr	r2, [pc, #72]	; (8003040 <MX_I2C2_Init+0x58>)
 8002ff6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <MX_I2C2_Init+0x50>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <MX_I2C2_Init+0x50>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_I2C2_Init+0x50>)
 8003006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800300a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <MX_I2C2_Init+0x50>)
 800300e:	2200      	movs	r2, #0
 8003010:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_I2C2_Init+0x50>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <MX_I2C2_Init+0x50>)
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_I2C2_Init+0x50>)
 8003020:	2200      	movs	r2, #0
 8003022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <MX_I2C2_Init+0x50>)
 8003026:	f003 fa7f 	bl	8006528 <HAL_I2C_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003030:	f000 ff64 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000334 	.word	0x20000334
 800303c:	40005800 	.word	0x40005800
 8003040:	000186a0 	.word	0x000186a0

08003044 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_I2C_MspInit+0x108>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d12c      	bne.n	80030c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003082:	23c0      	movs	r3, #192	; 0xc0
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003086:	2312      	movs	r3, #18
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003092:	2304      	movs	r3, #4
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	482d      	ldr	r0, [pc, #180]	; (8003154 <HAL_I2C_MspInit+0x110>)
 800309e:	f003 f875 	bl	800618c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a29      	ldr	r2, [pc, #164]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 80030ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80030be:	e041      	b.n	8003144 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <HAL_I2C_MspInit+0x114>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d13c      	bne.n	8003144 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80030e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ec:	2312      	movs	r3, #18
 80030ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030f8:	2304      	movs	r3, #4
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80030fc:	f107 031c 	add.w	r3, r7, #28
 8003100:	4619      	mov	r1, r3
 8003102:	4814      	ldr	r0, [pc, #80]	; (8003154 <HAL_I2C_MspInit+0x110>)
 8003104:	f003 f842 	bl	800618c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8003108:	2308      	movs	r3, #8
 800310a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310c:	2312      	movs	r3, #18
 800310e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003118:	2309      	movs	r3, #9
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	4619      	mov	r1, r3
 8003122:	480c      	ldr	r0, [pc, #48]	; (8003154 <HAL_I2C_MspInit+0x110>)
 8003124:	f003 f832 	bl	800618c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 8003132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003136:	6413      	str	r3, [r2, #64]	; 0x40
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_I2C_MspInit+0x10c>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	bf00      	nop
 8003146:	3730      	adds	r7, #48	; 0x30
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40005400 	.word	0x40005400
 8003150:	40023800 	.word	0x40023800
 8003154:	40020400 	.word	0x40020400
 8003158:	40005800 	.word	0x40005800

0800315c <LM35_Get_Value>:
#include "adc.h"
#include "lm35.h"


void LM35_Get_Value(ADC_HandleTypeDef* hadc, uint32_t* adcval)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	 ADC_Select_CH3();
 8003166:	f7fe fbc9 	bl	80018fc <ADC_Select_CH3>
	 HAL_ADC_Start(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f002 fabc 	bl	80056e8 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f002 fb9e 	bl	80058b6 <HAL_ADC_PollForConversion>
	 *adcval = HAL_ADC_GetValue(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f002 fc26 	bl	80059cc <HAL_ADC_GetValue>
 8003180:	4602      	mov	r2, r0
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	601a      	str	r2, [r3, #0]
	 HAL_ADC_Stop(hadc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f002 fb62 	bl	8005850 <HAL_ADC_Stop>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <LM35_Get_Temperature>:

void LM35_Get_Temperature(ADC_HandleTypeDef* hadc, float* temp)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
	uint32_t adcval;
	float sum = 0;
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
	float tempsum = 0;
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
	float avg_temp;

	for (uint16_t i = 0; i < NSAMPLES; i++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	82fb      	strh	r3, [r7, #22]
 80031ae:	e03e      	b.n	800322e <LM35_Get_Temperature+0x9a>
	{
		LM35_Get_Value(hadc, &adcval);
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffd0 	bl	800315c <LM35_Get_Value>
		sum += adcval;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80031ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
		adcval = sum / (i + 1);
 80031d2:	8afb      	ldrh	r3, [r7, #22]
 80031d4:	3301      	adds	r3, #1
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031de:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ea:	ee17 3a90 	vmov	r3, s15
 80031ee:	60fb      	str	r3, [r7, #12]
		// first, remove the offset from the ADC reading
		adcval -= OFFSET;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3b56      	subs	r3, #86	; 0x56
 80031f4:	60fb      	str	r3, [r7, #12]
		// then, convert the result to temperature
		avg_temp = (adcval * ADC_VOLTAGE_PER_DEGREE);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd f99b 	bl	8000534 <__aeabi_ui2d>
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <LM35_Get_Temperature+0xbc>)
 8003204:	f7fd fa10 	bl	8000628 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f7fd fd02 	bl	8000c18 <__aeabi_d2f>
 8003214:	4603      	mov	r3, r0
 8003216:	613b      	str	r3, [r7, #16]
		tempsum += avg_temp;
 8003218:	ed97 7a06 	vldr	s14, [r7, #24]
 800321c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003224:	edc7 7a06 	vstr	s15, [r7, #24]
	for (uint16_t i = 0; i < NSAMPLES; i++)
 8003228:	8afb      	ldrh	r3, [r7, #22]
 800322a:	3301      	adds	r3, #1
 800322c:	82fb      	strh	r3, [r7, #22]
 800322e:	8afb      	ldrh	r3, [r7, #22]
 8003230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003234:	d3bc      	bcc.n	80031b0 <LM35_Get_Temperature+0x1c>
	}
	// calculate average temperature
	*temp = tempsum / NSAMPLES;
 8003236:	ed97 7a06 	vldr	s14, [r7, #24]
 800323a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003254 <LM35_Get_Temperature+0xc0>
 800323e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	edc3 7a00 	vstr	s15, [r3]
}
 8003248:	bf00      	nop
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	3fbf4000 	.word	0x3fbf4000
 8003254:	447a0000 	.word	0x447a0000

08003258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b0af      	sub	sp, #188	; 0xbc
 800325c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800325e:	f002 f969 	bl	8005534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003262:	f000 fa67 	bl	8003734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003266:	f7ff f823 	bl	80022b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800326a:	f7fe fbe7 	bl	8001a3c <MX_ADC1_Init>
  MX_I2C1_Init();
 800326e:	f7ff fe8d 	bl	8002f8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003272:	f7ff feb9 	bl	8002fe8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003276:	f001 fe5d 	bl	8004f34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800327a:	f002 f8b7 	bl	80053ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800327e:	f001 fea9 	bl	8004fd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003282:	f001 ff27 	bl	80050d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003286:	f001 ff7d 	bl	8005184 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

////////////////////////////// DS18B20 //////
  uint8_t sensor_count = 0;  // Variable_number of sensor
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  uint8_t ROM_tmp[2];		//  Array_sensor address

  DS18B20_Init(DS18B20_Resolution_12bits);  // Initialization
 8003290:	200c      	movs	r0, #12
 8003292:	f7fe ffbb 	bl	800220c <DS18B20_Init>
  sensor_count = DS18B20_Quantity();
 8003296:	f7fe ff8b 	bl	80021b0 <DS18B20_Quantity>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

///////////////////////////////// NTC10K
  HAL_TIM_Base_Start_IT(&htim4);
 80032a0:	48c9      	ldr	r0, [pc, #804]	; (80035c8 <main+0x370>)
 80032a2:	f005 f897 	bl	80083d4 <HAL_TIM_Base_Start_IT>


///////////////////////////////NEO6GPS
  NEO6_Init(&GpsState, &huart1);
 80032a6:	49c9      	ldr	r1, [pc, #804]	; (80035cc <main+0x374>)
 80032a8:	48c9      	ldr	r0, [pc, #804]	; (80035d0 <main+0x378>)
 80032aa:	f7ff fcb3 	bl	8002c14 <NEO6_Init>

////////////////////////////// ACS758 /////
  ACS7XX Serch;
  ACS7XX_ResetCounters(&Serch);
 80032ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fac4 	bl	8001840 <ACS7XX_ResetCounters>
  ACS7XX_Calibrate(&Serch);
 80032b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe f9ef 	bl	80016a0 <ACS7XX_Calibrate>
  ACS7XX_Init_Default(&Serch);
 80032c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f9ba 	bl	8001640 <ACS7XX_Init_Default>

////////////////////////////// Throttle  //////
	/* Initialize DAC */
  myDAC = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A00, MCP4725_REFERENCE_VOLTAGE);
 80032cc:	4cc1      	ldr	r4, [pc, #772]	; (80035d4 <main+0x37c>)
 80032ce:	463b      	mov	r3, r7
 80032d0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80032d4:	2260      	movs	r2, #96	; 0x60
 80032d6:	49c0      	ldr	r1, [pc, #768]	; (80035d8 <main+0x380>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fea1 	bl	8001020 <MCP4725_init>
 80032de:	463b      	mov	r3, r7
 80032e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Check connection with DAC */
  if (!MCP4725_isConnected(&myDAC))
 80032e6:	48bb      	ldr	r0, [pc, #748]	; (80035d4 <main+0x37c>)
 80032e8:	f7fd febb 	bl	8001062 <MCP4725_isConnected>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <main+0xa8>
  {
	  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_SET);
 80032f2:	2201      	movs	r2, #1
 80032f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032f8:	48b8      	ldr	r0, [pc, #736]	; (80035dc <main+0x384>)
 80032fa:	f003 f8e3 	bl	80064c4 <HAL_GPIO_WritePin>
 80032fe:	e005      	b.n	800330c <main+0xb4>
  }
  else
  {
	  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003306:	48b5      	ldr	r0, [pc, #724]	; (80035dc <main+0x384>)
 8003308:	f003 f8dc 	bl	80064c4 <HAL_GPIO_WritePin>
  }

///////////////////////////// HALLSPEED /////
  HAL_TIM_IC_START();
 800330c:	f7ff fd12 	bl	8002d34 <HAL_TIM_IC_START>
//  IC_Capture_Callback(&htim2);

///////////////////////////// SSD1306 /////
  ssd1306_Init();
 8003310:	f001 f9d0 	bl	80046b4 <ssd1306_Init>

//////////////////////////// NEO6GPS  //////
  NEO6_Init(&GpsState, &huart1);
 8003314:	49ad      	ldr	r1, [pc, #692]	; (80035cc <main+0x374>)
 8003316:	48ae      	ldr	r0, [pc, #696]	; (80035d0 <main+0x378>)
 8003318:	f7ff fc7c 	bl	8002c14 <NEO6_Init>

/////////////////////////////// BUTTON ////
  Button_Init(&BUTTON1_Pin, BUTTON1_Pin_GPIO_Port, BUTTON1_Pin_Pin, 20, 2000, 500);
 800331c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2314      	movs	r3, #20
 800332a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800332e:	49ac      	ldr	r1, [pc, #688]	; (80035e0 <main+0x388>)
 8003330:	48ac      	ldr	r0, [pc, #688]	; (80035e4 <main+0x38c>)
 8003332:	f7fe fd29 	bl	8001d88 <Button_Init>
  Button_Init(&BUTTON2_Pin, BUTTON2_Pin_GPIO_Port, BUTTON2_Pin_Pin, 30, 2000, 500);
 8003336:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	231e      	movs	r3, #30
 8003344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003348:	49a5      	ldr	r1, [pc, #660]	; (80035e0 <main+0x388>)
 800334a:	48a7      	ldr	r0, [pc, #668]	; (80035e8 <main+0x390>)
 800334c:	f7fe fd1c 	bl	8001d88 <Button_Init>
  Button_Init(&BUTTON3_Pin, BUTTON3_Pin_GPIO_Port, BUTTON3_Pin_Pin, 40, 2000, 500);
 8003350:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2328      	movs	r3, #40	; 0x28
 800335e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003362:	499f      	ldr	r1, [pc, #636]	; (80035e0 <main+0x388>)
 8003364:	48a1      	ldr	r0, [pc, #644]	; (80035ec <main+0x394>)
 8003366:	f7fe fd0f 	bl	8001d88 <Button_Init>

///////////////////////////////// PWM /////

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800336a:	2104      	movs	r1, #4
 800336c:	48a0      	ldr	r0, [pc, #640]	; (80035f0 <main+0x398>)
 800336e:	f005 f8e3 	bl	8008538 <HAL_TIM_PWM_Start>

/////////////////////////////// DELAY ////
  uint32_t DS18B20_delay = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t POWER_delay = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t ACS758_delay = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t V_BAT_delay = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t Throttle_delay = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t SSD1306_delay = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint32_t NEO6GPS_delay = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t BUTTON_delay = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t LM35_delay = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t NEO6_delay = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t NTC10K_delay = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//////////////////////////////////////  DS18B20 //////
	if((HAL_GetTick() - DS18B20_delay) > 100)
 80033b4:	f002 f924 	bl	8005600 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d917      	bls.n	80033f4 <main+0x19c>
	{
	  if(sensor_count > 0)
 80033c4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <main+0x194>
	  {
	  	DS18B20_GetROM(0, ROM_tmp);
 80033cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033d0:	4619      	mov	r1, r3
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fe febe 	bl	8002154 <DS18B20_GetROM>
	  	DS18B20_AllDone();
 80033d8:	f7fe fe72 	bl	80020c0 <DS18B20_AllDone>
	  	DS18B20_ReadAll();
 80033dc:	f7fe fe7a 	bl	80020d4 <DS18B20_ReadAll>
	  	DS18B20_StartAll();
 80033e0:	f7fe fcf2 	bl	8001dc8 <DS18B20_StartAll>
	  	DS18B20_GetTemperature(0, &temperature);
 80033e4:	4983      	ldr	r1, [pc, #524]	; (80035f4 <main+0x39c>)
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7fe feee 	bl	80021c8 <DS18B20_GetTemperature>

	  }
	 DS18B20_delay = HAL_GetTick();
 80033ec:	f002 f908 	bl	8005600 <HAL_GetTick>
 80033f0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	}


////////////////////////////////// PWM THROTTLE////////////
	Throttle_Control_PWM( &hadc1, &htim3, TIM_CHANNEL_2);
 80033f4:	2204      	movs	r2, #4
 80033f6:	497e      	ldr	r1, [pc, #504]	; (80035f0 <main+0x398>)
 80033f8:	487f      	ldr	r0, [pc, #508]	; (80035f8 <main+0x3a0>)
 80033fa:	f7fe f8b5 	bl	8001568 <Throttle_Control_PWM>


//////////////////////////////////////NTC10K /////////
	if((HAL_GetTick() - NTC10K_delay) > 150)
 80033fe:	f002 f8ff 	bl	8005600 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b96      	cmp	r3, #150	; 0x96
 800340c:	d90d      	bls.n	800342a <main+0x1d2>
	{
	  if(Sch_100ms)
 800340e:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <main+0x3a4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <main+0x1ca>
	    {
		  NTC10K_ADC_Read(&ADC_Raw);
 8003416:	487a      	ldr	r0, [pc, #488]	; (8003600 <main+0x3a8>)
 8003418:	f000 fd76 	bl	8003f08 <NTC10K_ADC_Read>
		  NTC10K_Get_Temp(&Ntc_Tmp);
 800341c:	4879      	ldr	r0, [pc, #484]	; (8003604 <main+0x3ac>)
 800341e:	f000 fd93 	bl	8003f48 <NTC10K_Get_Temp>

	    }
	  NTC10K_delay = HAL_GetTick();
 8003422:	f002 f8ed 	bl	8005600 <HAL_GetTick>
 8003426:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	}

//////////////////////////////////////HALLSPEED /////
	// Check if TIMEOUT has passed since last pulse check
			if (HAL_GetTick() - lastPulseCheckTime >= TIMEOUT)
 800342a:	f002 f8e9 	bl	8005600 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	4b75      	ldr	r3, [pc, #468]	; (8003608 <main+0x3b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800343a:	d318      	bcc.n	800346e <main+0x216>
			{
			  // If the last pulse was more than TIMEOUT milliseconds ago
			  if (HAL_GetTick() - lastImpulseTime >= TIMEOUT)
 800343c:	f002 f8e0 	bl	8005600 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	4b72      	ldr	r3, [pc, #456]	; (800360c <main+0x3b4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800344c:	d30a      	bcc.n	8003464 <main+0x20c>
			  {
			     // reset speed, rotational_speed and pulseCounter
			    pulseCounter = 0;
 800344e:	4b70      	ldr	r3, [pc, #448]	; (8003610 <main+0x3b8>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
			    speed = 0;
 8003454:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <main+0x3bc>)
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
			    rotational_speed = 0;
 800345c:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <main+0x3c0>)
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
			  }

			  // Update the last pulse check time
			  lastPulseCheckTime = HAL_GetTick();
 8003464:	f002 f8cc 	bl	8005600 <HAL_GetTick>
 8003468:	4603      	mov	r3, r0
 800346a:	4a67      	ldr	r2, [pc, #412]	; (8003608 <main+0x3b0>)
 800346c:	6013      	str	r3, [r2, #0]
			}
////////////////////////////////////////// LM35 ///////
	if((HAL_GetTick() - LM35_delay) > 200)
 800346e:	f002 f8c7 	bl	8005600 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2bc8      	cmp	r3, #200	; 0xc8
 800347c:	d90b      	bls.n	8003496 <main+0x23e>
	{
		LM35_Get_Value(&hadc1, &adcval);
 800347e:	4967      	ldr	r1, [pc, #412]	; (800361c <main+0x3c4>)
 8003480:	485d      	ldr	r0, [pc, #372]	; (80035f8 <main+0x3a0>)
 8003482:	f7ff fe6b 	bl	800315c <LM35_Get_Value>
		LM35_Get_Temperature(&hadc1, &temp);
 8003486:	4966      	ldr	r1, [pc, #408]	; (8003620 <main+0x3c8>)
 8003488:	485b      	ldr	r0, [pc, #364]	; (80035f8 <main+0x3a0>)
 800348a:	f7ff fe83 	bl	8003194 <LM35_Get_Temperature>

		LM35_delay = HAL_GetTick();
 800348e:	f002 f8b7 	bl	8005600 <HAL_GetTick>
 8003492:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	}

//////////////////////////////////////////// POWER //////
	if((HAL_GetTick() - POWER_delay) > 100)
 8003496:	f002 f8b3 	bl	8005600 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d90a      	bls.n	80034bc <main+0x264>
	{
		Power_Calculate(&Serch, &hadc1, &power);
 80034a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034aa:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <main+0x3cc>)
 80034ac:	4952      	ldr	r1, [pc, #328]	; (80035f8 <main+0x3a0>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe f9d8 	bl	8001864 <Power_Calculate>

		POWER_delay = HAL_GetTick();
 80034b4:	f002 f8a4 	bl	8005600 <HAL_GetTick>
 80034b8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	}

//////////////////////////////////////////// ACS758 /////
	if((HAL_GetTick() - ACS758_delay) > 100)
 80034bc:	f002 f8a0 	bl	8005600 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d90a      	bls.n	80034e2 <main+0x28a>
	{
	   ACS7XX_InstantCurrent(&Serch, &current, &voltage, &value);
 80034cc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80034d0:	4b55      	ldr	r3, [pc, #340]	; (8003628 <main+0x3d0>)
 80034d2:	4a56      	ldr	r2, [pc, #344]	; (800362c <main+0x3d4>)
 80034d4:	4956      	ldr	r1, [pc, #344]	; (8003630 <main+0x3d8>)
 80034d6:	f7fe f91b 	bl	8001710 <ACS7XX_InstantCurrent>

	   ACS758_delay = HAL_GetTick();
 80034da:	f002 f891 	bl	8005600 <HAL_GetTick>
 80034de:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	}

///////////////////////////////////////////// V_BAT ///////
	if((HAL_GetTick() - V_BAT_delay) > 100)
 80034e2:	f002 f88d 	bl	8005600 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d916      	bls.n	8003520 <main+0x2c8>
	{
	   HAL_ADC_Start(&hadc1);
 80034f2:	4841      	ldr	r0, [pc, #260]	; (80035f8 <main+0x3a0>)
 80034f4:	f002 f8f8 	bl	80056e8 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	483e      	ldr	r0, [pc, #248]	; (80035f8 <main+0x3a0>)
 80034fe:	f002 f9da 	bl	80058b6 <HAL_ADC_PollForConversion>
	   Battery_Get_ADC_Value(&hadc1, &bat_adc_val);
 8003502:	494c      	ldr	r1, [pc, #304]	; (8003634 <main+0x3dc>)
 8003504:	483c      	ldr	r0, [pc, #240]	; (80035f8 <main+0x3a0>)
 8003506:	f7fe fb83 	bl	8001c10 <Battery_Get_ADC_Value>
	   Battery_Get_Voltage(&hadc1 , &batteryVoltage);
 800350a:	494b      	ldr	r1, [pc, #300]	; (8003638 <main+0x3e0>)
 800350c:	483a      	ldr	r0, [pc, #232]	; (80035f8 <main+0x3a0>)
 800350e:	f7fe fb9b 	bl	8001c48 <Battery_Get_Voltage>
	   HAL_ADC_Stop(&hadc1);
 8003512:	4839      	ldr	r0, [pc, #228]	; (80035f8 <main+0x3a0>)
 8003514:	f002 f99c 	bl	8005850 <HAL_ADC_Stop>

	   V_BAT_delay = HAL_GetTick();
 8003518:	f002 f872 	bl	8005600 <HAL_GetTick>
 800351c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	}

//////////////////////////////////////////// Throttle /////
	if((HAL_GetTick() - Throttle_delay) > 100)
 8003520:	f002 f86e 	bl	8005600 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d915      	bls.n	800355c <main+0x304>
	{
	   Throttle_Get_Average_Voltage(&hadc1, &averageVoltage);
 8003530:	4942      	ldr	r1, [pc, #264]	; (800363c <main+0x3e4>)
 8003532:	4831      	ldr	r0, [pc, #196]	; (80035f8 <main+0x3a0>)
 8003534:	f7fd ffe8 	bl	8001508 <Throttle_Get_Average_Voltage>
	   Throttle_Get_ADC_Value(&hadc1, &adc_val);
 8003538:	4941      	ldr	r1, [pc, #260]	; (8003640 <main+0x3e8>)
 800353a:	482f      	ldr	r0, [pc, #188]	; (80035f8 <main+0x3a0>)
 800353c:	f7fd ff7e 	bl	800143c <Throttle_Get_ADC_Value>
	   if(!MCP4725_setVoltage(&myDAC, averageVoltage , MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF))
 8003540:	4b3e      	ldr	r3, [pc, #248]	; (800363c <main+0x3e4>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	eeb0 0a67 	vmov.f32	s0, s15
 800354e:	4821      	ldr	r0, [pc, #132]	; (80035d4 <main+0x37c>)
 8003550:	f7fd fdca 	bl	80010e8 <MCP4725_setVoltage>
	   {
	      /* Handle error */
	   }
	 Throttle_delay = HAL_GetTick();
 8003554:	f002 f854 	bl	8005600 <HAL_GetTick>
 8003558:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	}

//////////////////////////////////////////NEO6GPS
	if((HAL_GetTick() - NEO6_delay) > 100)
 800355c:	f002 f850 	bl	8005600 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	; 0x64
 800356a:	d906      	bls.n	800357a <main+0x322>
	{
	  NEO6_Task(&GpsState);
 800356c:	4818      	ldr	r0, [pc, #96]	; (80035d0 <main+0x378>)
 800356e:	f7ff fb3e 	bl	8002bee <NEO6_Task>
//	  GpsState.Minute;
//	  GpsState.Second;
//	  GpsState.SpeedKilometers;
//	  GpsState.Latitude;
//	  GpsState.Longitude;
  	  NEO6_delay = HAL_GetTick();
 8003572:	f002 f845 	bl	8005600 <HAL_GetTick>
 8003576:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	}
////////////////////////////////////////////// SSD1306  ////

	if((HAL_GetTick() - SSD1306_delay) > 100)
 800357a:	f002 f841 	bl	8005600 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d973      	bls.n	8003672 <main+0x41a>
	{
		char displayBuffer[50];
		ssd1306_Fill(Black);
 800358a:	2000      	movs	r0, #0
 800358c:	f001 f8fc 	bl	8004788 <ssd1306_Fill>

		// Depending on the page to be displayed we render different information.
		switch (pageIndex)
 8003590:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <main+0x3ec>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d863      	bhi.n	8003660 <main+0x408>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <main+0x348>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035bd 	.word	0x080035bd
 80035a8:	08003649 	.word	0x08003649
 80035ac:	08003655 	.word	0x08003655
		{
			case 0: // Page 1
		      renderPage1(displayBuffer);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f925 	bl	8003804 <renderPage1>
		      break;
 80035ba:	e054      	b.n	8003666 <main+0x40e>

			case 1: // Page 2
		      renderPage2(displayBuffer);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fab1 	bl	8003b28 <renderPage2>
		      break;
 80035c6:	e04e      	b.n	8003666 <main+0x40e>
 80035c8:	20000b28 	.word	0x20000b28
 80035cc:	20000b70 	.word	0x20000b70
 80035d0:	200003d0 	.word	0x200003d0
 80035d4:	200003b0 	.word	0x200003b0
 80035d8:	20000334 	.word	0x20000334
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020400 	.word	0x40020400
 80035e4:	200005d0 	.word	0x200005d0
 80035e8:	200005f4 	.word	0x200005f4
 80035ec:	20000618 	.word	0x20000618
 80035f0:	20000ae0 	.word	0x20000ae0
 80035f4:	2000063c 	.word	0x2000063c
 80035f8:	20000218 	.word	0x20000218
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000388 	.word	0x20000388
 8003604:	2000038c 	.word	0x2000038c
 8003608:	200002c0 	.word	0x200002c0
 800360c:	200002bc 	.word	0x200002bc
 8003610:	200002c4 	.word	0x200002c4
 8003614:	200002d0 	.word	0x200002d0
 8003618:	200002d4 	.word	0x200002d4
 800361c:	20000394 	.word	0x20000394
 8003620:	20000390 	.word	0x20000390
 8003624:	20000398 	.word	0x20000398
 8003628:	200003ac 	.word	0x200003ac
 800362c:	200003a8 	.word	0x200003a8
 8003630:	200003a0 	.word	0x200003a0
 8003634:	200003c8 	.word	0x200003c8
 8003638:	200003cc 	.word	0x200003cc
 800363c:	200003c0 	.word	0x200003c0
 8003640:	200003c4 	.word	0x200003c4
 8003644:	20000640 	.word	0x20000640

			case 2: // Page 3
		      renderPage3(displayBuffer);
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fb49 	bl	8003ce4 <renderPage3>
		      break;
 8003652:	e008      	b.n	8003666 <main+0x40e>

			case 3: // Page 4
		      renderPage4(displayBuffer);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fbf7 	bl	8003e4c <renderPage4>
		      break;
 800365e:	e002      	b.n	8003666 <main+0x40e>

			default:
				// If an unrecognized page index is detected, reset to page 1.
				pageIndex = 0;
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <main+0x4c4>)
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
			}
		ssd1306_UpdateScreen();
 8003666:	f001 f8a7 	bl	80047b8 <ssd1306_UpdateScreen>

		SSD1306_delay = HAL_GetTick();
 800366a:	f001 ffc9 	bl	8005600 <HAL_GetTick>
 800366e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	}

///////////////////////////////////////////////NEO6GPS ////
	if((HAL_GetTick() - NEO6GPS_delay) > 1000)
 8003672:	f001 ffc5 	bl	8005600 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003682:	d909      	bls.n	8003698 <main+0x440>
	{
		NEO6_Task(&GpsState);
 8003684:	4826      	ldr	r0, [pc, #152]	; (8003720 <main+0x4c8>)
 8003686:	f7ff fab2 	bl	8002bee <NEO6_Task>
		NEO6_IsFix(&GpsState);
 800368a:	4825      	ldr	r0, [pc, #148]	; (8003720 <main+0x4c8>)
 800368c:	f7ff faa2 	bl	8002bd4 <NEO6_IsFix>

		NEO6GPS_delay = HAL_GetTick();
 8003690:	f001 ffb6 	bl	8005600 <HAL_GetTick>
 8003694:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	}


////////////////////////////////////////////// BUTTON ////
	if((HAL_GetTick() - BUTTON_delay) > 100)
 8003698:	f001 ffb2 	bl	8005600 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	f67f ae85 	bls.w	80033b4 <main+0x15c>
	{

		/////// If button 3 is pressed, we move to the next page.
		if (Button_IsPressed(&BUTTON1_Pin))
 80036aa:	481e      	ldr	r0, [pc, #120]	; (8003724 <main+0x4cc>)
 80036ac:	f7fe fb56 	bl	8001d5c <Button_IsPressed>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <main+0x47a>
		{
			// If we were in the last page, reset to page 1.
		    if (pageIndex >= 3)
 80036b6:	4b19      	ldr	r3, [pc, #100]	; (800371c <main+0x4c4>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d903      	bls.n	80036c6 <main+0x46e>
		    {
		    	pageIndex = 0;
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <main+0x4c4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e005      	b.n	80036d2 <main+0x47a>
		    }
		    // Otherwise, simply go to the next page.
		    else
		    {
		    	pageIndex++;
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <main+0x4c4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <main+0x4c4>)
 80036d0:	701a      	strb	r2, [r3, #0]
		    }
		}

		/////// If button 2 is pressed, increment the support level.
		if (Button_IsPressed(&BUTTON2_Pin))
 80036d2:	4815      	ldr	r0, [pc, #84]	; (8003728 <main+0x4d0>)
 80036d4:	f7fe fb42 	bl	8001d5c <Button_IsPressed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <main+0x49a>
		{
			if (supportLevel <= 4)
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <main+0x4d4>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d805      	bhi.n	80036f2 <main+0x49a>
		    {
		        supportLevel++;
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <main+0x4d4>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <main+0x4d4>)
 80036f0:	701a      	strb	r2, [r3, #0]
		    }
		}

		/////// If button 3 is pressed, decrement the support level.
		if (Button_IsPressed(&BUTTON3_Pin))
 80036f2:	480f      	ldr	r0, [pc, #60]	; (8003730 <main+0x4d8>)
 80036f4:	f7fe fb32 	bl	8001d5c <Button_IsPressed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <main+0x4ba>
		{
			if (supportLevel >= 1)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <main+0x4d4>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <main+0x4ba>
		    {
				supportLevel--;
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <main+0x4d4>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3b01      	subs	r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <main+0x4d4>)
 8003710:	701a      	strb	r2, [r3, #0]
		    }
		}
		   BUTTON_delay = HAL_GetTick();
 8003712:	f001 ff75 	bl	8005600 <HAL_GetTick>
 8003716:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	if((HAL_GetTick() - DS18B20_delay) > 100)
 800371a:	e64b      	b.n	80033b4 <main+0x15c>
 800371c:	20000640 	.word	0x20000640
 8003720:	200003d0 	.word	0x200003d0
 8003724:	200005d0 	.word	0x200005d0
 8003728:	200005f4 	.word	0x200005f4
 800372c:	20000001 	.word	0x20000001
 8003730:	20000618 	.word	0x20000618

08003734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b094      	sub	sp, #80	; 0x50
 8003738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800373a:	f107 0320 	add.w	r3, r7, #32
 800373e:	2230      	movs	r2, #48	; 0x30
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f008 fcdd 	bl	800c102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <SystemClock_Config+0xc8>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <SystemClock_Config+0xc8>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	6413      	str	r3, [r2, #64]	; 0x40
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <SystemClock_Config+0xc8>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003774:	2300      	movs	r3, #0
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <SystemClock_Config+0xcc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <SystemClock_Config+0xcc>)
 800377e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <SystemClock_Config+0xcc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003794:	2301      	movs	r3, #1
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003798:	2310      	movs	r3, #16
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379c:	2302      	movs	r3, #2
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037a0:	2300      	movs	r3, #0
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037a4:	2308      	movs	r3, #8
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80037a8:	2364      	movs	r3, #100	; 0x64
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037ac:	2302      	movs	r3, #2
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037b0:	2304      	movs	r3, #4
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b4:	f107 0320 	add.w	r3, r7, #32
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 f909 	bl	80079d0 <HAL_RCC_OscConfig>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037c4:	f000 fb9a 	bl	8003efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037c8:	230f      	movs	r3, #15
 80037ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037cc:	2302      	movs	r3, #2
 80037ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	2103      	movs	r1, #3
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fb6b 	bl	8007ec0 <HAL_RCC_ClockConfig>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80037f0:	f000 fb84 	bl	8003efc <Error_Handler>
  }
}
 80037f4:	bf00      	nop
 80037f6:	3750      	adds	r7, #80	; 0x50
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000

08003804 <renderPage1>:

/* USER CODE BEGIN 4 */

/////////////////////////////////////// SSD1306PAGE ///////
void renderPage1(char* buffer)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b099      	sub	sp, #100	; 0x64
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
	char displayBuffer[50];

	// Display Speed
	ssd1306_SetCursor(45, 30);
 800380c:	211e      	movs	r1, #30
 800380e:	202d      	movs	r0, #45	; 0x2d
 8003810:	f001 f8fc 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "%.2f km/h", speed);
 8003814:	4bb2      	ldr	r3, [pc, #712]	; (8003ae0 <renderPage1+0x2dc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fead 	bl	8000578 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	f107 0008 	add.w	r0, r7, #8
 8003826:	49af      	ldr	r1, [pc, #700]	; (8003ae4 <renderPage1+0x2e0>)
 8003828:	f008 fbee 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_7x10, White);
 800382c:	4aae      	ldr	r2, [pc, #696]	; (8003ae8 <renderPage1+0x2e4>)
 800382e:	f107 0008 	add.w	r0, r7, #8
 8003832:	2301      	movs	r3, #1
 8003834:	ca06      	ldmia	r2, {r1, r2}
 8003836:	f001 f8c3 	bl	80049c0 <ssd1306_WriteString>
    // Display battery voltage
    ssd1306_SetCursor(10, 2);
 800383a:	2102      	movs	r1, #2
 800383c:	200a      	movs	r0, #10
 800383e:	f001 f8e5 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, ": %.1f V", batteryVoltage);
 8003842:	4baa      	ldr	r3, [pc, #680]	; (8003aec <renderPage1+0x2e8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fe96 	bl	8000578 <__aeabi_f2d>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	f107 0008 	add.w	r0, r7, #8
 8003854:	49a6      	ldr	r1, [pc, #664]	; (8003af0 <renderPage1+0x2ec>)
 8003856:	f008 fbd7 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 800385a:	4aa6      	ldr	r2, [pc, #664]	; (8003af4 <renderPage1+0x2f0>)
 800385c:	f107 0008 	add.w	r0, r7, #8
 8003860:	2301      	movs	r3, #1
 8003862:	ca06      	ldmia	r2, {r1, r2}
 8003864:	f001 f8ac 	bl	80049c0 <ssd1306_WriteString>

    // Display POWER
    ssd1306_SetCursor(84, 2);
 8003868:	2102      	movs	r1, #2
 800386a:	2054      	movs	r0, #84	; 0x54
 800386c:	f001 f8ce 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "%.1f W", power);
 8003870:	4ba1      	ldr	r3, [pc, #644]	; (8003af8 <renderPage1+0x2f4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe7f 	bl	8000578 <__aeabi_f2d>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	f107 0008 	add.w	r0, r7, #8
 8003882:	499e      	ldr	r1, [pc, #632]	; (8003afc <renderPage1+0x2f8>)
 8003884:	f008 fbc0 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003888:	4a9a      	ldr	r2, [pc, #616]	; (8003af4 <renderPage1+0x2f0>)
 800388a:	f107 0008 	add.w	r0, r7, #8
 800388e:	2301      	movs	r3, #1
 8003890:	ca06      	ldmia	r2, {r1, r2}
 8003892:	f001 f895 	bl	80049c0 <ssd1306_WriteString>

    // Display temperature DS18B20
    ssd1306_SetCursor(80, 55);
 8003896:	2137      	movs	r1, #55	; 0x37
 8003898:	2050      	movs	r0, #80	; 0x50
 800389a:	f001 f8b7 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "%.1f C", temperature);
 800389e:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <renderPage1+0x2fc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe68 	bl	8000578 <__aeabi_f2d>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	f107 0008 	add.w	r0, r7, #8
 80038b0:	4994      	ldr	r1, [pc, #592]	; (8003b04 <renderPage1+0x300>)
 80038b2:	f008 fba9 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 80038b6:	4a8f      	ldr	r2, [pc, #572]	; (8003af4 <renderPage1+0x2f0>)
 80038b8:	f107 0008 	add.w	r0, r7, #8
 80038bc:	2301      	movs	r3, #1
 80038be:	ca06      	ldmia	r2, {r1, r2}
 80038c0:	f001 f87e 	bl	80049c0 <ssd1306_WriteString>

    // Display distance
    ssd1306_SetCursor(2, 55);
 80038c4:	2137      	movs	r1, #55	; 0x37
 80038c6:	2002      	movs	r0, #2
 80038c8:	f001 f8a0 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "%.3f km", totalDistance);
 80038cc:	4b8e      	ldr	r3, [pc, #568]	; (8003b08 <renderPage1+0x304>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fe51 	bl	8000578 <__aeabi_f2d>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	f107 0008 	add.w	r0, r7, #8
 80038de:	498b      	ldr	r1, [pc, #556]	; (8003b0c <renderPage1+0x308>)
 80038e0:	f008 fb92 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 80038e4:	4a83      	ldr	r2, [pc, #524]	; (8003af4 <renderPage1+0x2f0>)
 80038e6:	f107 0008 	add.w	r0, r7, #8
 80038ea:	2301      	movs	r3, #1
 80038ec:	ca06      	ldmia	r2, {r1, r2}
 80038ee:	f001 f867 	bl	80049c0 <ssd1306_WriteString>

    //Display support level
    ssd1306_SetCursor(5, 25);
 80038f2:	2119      	movs	r1, #25
 80038f4:	2005      	movs	r0, #5
 80038f6:	f001 f889 	bl	8004a0c <ssd1306_SetCursor>
    snprintf(displayBuffer, sizeof(displayBuffer), "%u", supportLevel);
 80038fa:	4b85      	ldr	r3, [pc, #532]	; (8003b10 <renderPage1+0x30c>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	f107 0008 	add.w	r0, r7, #8
 8003902:	4a84      	ldr	r2, [pc, #528]	; (8003b14 <renderPage1+0x310>)
 8003904:	2132      	movs	r1, #50	; 0x32
 8003906:	f008 fb4b 	bl	800bfa0 <sniprintf>
    ssd1306_WriteString(displayBuffer, Font_11x18, White);
 800390a:	4a83      	ldr	r2, [pc, #524]	; (8003b18 <renderPage1+0x314>)
 800390c:	f107 0008 	add.w	r0, r7, #8
 8003910:	2301      	movs	r3, #1
 8003912:	ca06      	ldmia	r2, {r1, r2}
 8003914:	f001 f854 	bl	80049c0 <ssd1306_WriteString>

    // Calculate the height of the temperature bar
    int tempPercent = temperature; // This assumes temperature is between 0-100. If not, make sure to scale it.
 8003918:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <renderPage1+0x2fc>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003922:	ee17 3a90 	vmov	r3, s15
 8003926:	657b      	str	r3, [r7, #84]	; 0x54
     // Check if temperature is in range.
     if(tempPercent < 0)
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	2b00      	cmp	r3, #0
 800392c:	da02      	bge.n	8003934 <renderPage1+0x130>
     {
       tempPercent = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	657b      	str	r3, [r7, #84]	; 0x54
 8003932:	e004      	b.n	800393e <renderPage1+0x13a>
     }
     else if(tempPercent > 100)
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	dd01      	ble.n	800393e <renderPage1+0x13a>
     {
       tempPercent = 100;
 800393a:	2364      	movs	r3, #100	; 0x64
 800393c:	657b      	str	r3, [r7, #84]	; 0x54
     }
     // Calculate height for temperature.
     int tempHeight = (int) (52*tempPercent/100); // Assuming the height of OLED is 64 pixels. Adjust this value according to your OLED resolution.
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	2234      	movs	r2, #52	; 0x34
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <renderPage1+0x318>)
 8003948:	fb82 1203 	smull	r1, r2, r2, r3
 800394c:	1152      	asrs	r2, r2, #5
 800394e:	17db      	asrs	r3, r3, #31
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	647b      	str	r3, [r7, #68]	; 0x44
     // Draw temperature bar.
     for(int y=63; y>=0; y--)
 8003954:	233f      	movs	r3, #63	; 0x3f
 8003956:	653b      	str	r3, [r7, #80]	; 0x50
 8003958:	e022      	b.n	80039a0 <renderPage1+0x19c>
     {
       for(int x=124; x<128; x++)
 800395a:	237c      	movs	r3, #124	; 0x7c
 800395c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800395e:	e019      	b.n	8003994 <renderPage1+0x190>
       { // Assuming the width of OLED is 128 pixels.
         if(y >= (64-tempHeight))
 8003960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003962:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003966:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003968:	429a      	cmp	r2, r3
 800396a:	db08      	blt.n	800397e <renderPage1+0x17a>
         {
           ssd1306_DrawPixel(x, y, White); // Draw the bar as white.
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	b2db      	uxtb	r3, r3
 8003970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003972:	b2d1      	uxtb	r1, r2
 8003974:	2201      	movs	r2, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f000 ff46 	bl	8004808 <ssd1306_DrawPixel>
 800397c:	e007      	b.n	800398e <renderPage1+0x18a>
         }
         else
         {
           ssd1306_DrawPixel(x, y, Black); // Other area remains black.
 800397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003980:	b2db      	uxtb	r3, r3
 8003982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003984:	b2d1      	uxtb	r1, r2
 8003986:	2200      	movs	r2, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 ff3d 	bl	8004808 <ssd1306_DrawPixel>
       for(int x=124; x<128; x++)
 800398e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003990:	3301      	adds	r3, #1
 8003992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003996:	2b7f      	cmp	r3, #127	; 0x7f
 8003998:	dde2      	ble.n	8003960 <renderPage1+0x15c>
     for(int y=63; y>=0; y--)
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	3b01      	subs	r3, #1
 800399e:	653b      	str	r3, [r7, #80]	; 0x50
 80039a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dad9      	bge.n	800395a <renderPage1+0x156>
         }
       }
     }

 	// Calculate battery level percentage.
 	float batPercent = (((float)batteryVoltage - 20) / 10) * 100 ;    // Assuming batteryVoltage ranges from 10V to 30V.
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <renderPage1+0x2e8>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80039b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80039b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039bc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003b20 <renderPage1+0x31c>
 80039c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 	// Check if battery level is in range.
 	if(batPercent < 0)
 80039c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	d503      	bpl.n	80039de <renderPage1+0x1da>
 	{
 		batPercent = 0;
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48
 80039dc:	e00a      	b.n	80039f4 <renderPage1+0x1f0>
 	}
 	else if(batPercent > 100)
 80039de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039e2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003b20 <renderPage1+0x31c>
 80039e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	dd01      	ble.n	80039f4 <renderPage1+0x1f0>
 	{
 	    batPercent = 100;
 80039f0:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <renderPage1+0x320>)
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
 	}

     uint8_t batteryWidth = 15;
 80039f4:	230f      	movs	r3, #15
 80039f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
     uint8_t batteryHeight = 7;
 80039fa:	2307      	movs	r3, #7
 80039fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
     uint8_t topLeftX = 2; // top right corner (leave 2 pixel space from the edge)
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
     uint8_t topLeftY = 2; // top right corner (leave 2 pixel space from the edge)
 8003a06:	2302      	movs	r3, #2
 8003a08:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
     // draw battery body
     ssd1306_DrawRectangle(topLeftX, topLeftY, topLeftX + batteryWidth, topLeftY + batteryHeight, White);
 8003a0c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003a14:	4413      	add	r3, r2
 8003a16:	b2dc      	uxtb	r4, r3
 8003a18:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003a1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003a20:	4413      	add	r3, r2
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8003a28:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	9200      	str	r2, [sp, #0]
 8003a30:	4622      	mov	r2, r4
 8003a32:	f001 f86f 	bl	8004b14 <ssd1306_DrawRectangle>
     // draw battery terminal
     ssd1306_Line(topLeftX + batteryWidth + 1, topLeftY + 1, topLeftX + batteryWidth + 1, topLeftY + batteryHeight - 1, White);
 8003a36:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003a3e:	4413      	add	r3, r2
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	b2d8      	uxtb	r0, r3
 8003a46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b2d9      	uxtb	r1, r3
 8003a4e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003a56:	4413      	add	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	b2dc      	uxtb	r4, r3
 8003a5e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003a62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003a66:	4413      	add	r3, r2
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	9200      	str	r2, [sp, #0]
 8003a72:	4622      	mov	r2, r4
 8003a74:	f000 ffe2 	bl	8004a3c <ssd1306_Line>
     // you can adjust the width of the filled rectangle reflects battery level
     // pseudocode: int batteryLevelWidth = batteryWidth * (currentBatteryLevel / maxBatteryLevel);
     int batteryLevelWidth =  (batPercent * batteryWidth) / 100; // let's say it's 70% now
 8003a78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a84:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a8c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003b20 <renderPage1+0x31c>
 8003a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a98:	ee17 3a90 	vmov	r3, s15
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
     ssd1306_FillRectangle(topLeftX + 1, topLeftY + 1, topLeftX + 1 + batteryLevelWidth, topLeftY + batteryHeight - 1, White);
 8003a9e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b2d8      	uxtb	r0, r3
 8003aa6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b2d9      	uxtb	r1, r3
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	b2dc      	uxtb	r4, r3
 8003abe:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003ac2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003ac6:	4413      	add	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2201      	movs	r2, #1
 8003ad0:	9200      	str	r2, [sp, #0]
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	f001 f855 	bl	8004b82 <ssd1306_FillRectangle>
}
 8003ad8:	bf00      	nop
 8003ada:	375c      	adds	r7, #92	; 0x5c
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd90      	pop	{r4, r7, pc}
 8003ae0:	200002d0 	.word	0x200002d0
 8003ae4:	0800f074 	.word	0x0800f074
 8003ae8:	2000000c 	.word	0x2000000c
 8003aec:	200003cc 	.word	0x200003cc
 8003af0:	0800f080 	.word	0x0800f080
 8003af4:	20000004 	.word	0x20000004
 8003af8:	20000398 	.word	0x20000398
 8003afc:	0800f08c 	.word	0x0800f08c
 8003b00:	2000063c 	.word	0x2000063c
 8003b04:	0800f094 	.word	0x0800f094
 8003b08:	200002d8 	.word	0x200002d8
 8003b0c:	0800f09c 	.word	0x0800f09c
 8003b10:	20000001 	.word	0x20000001
 8003b14:	0800f0a4 	.word	0x0800f0a4
 8003b18:	20000014 	.word	0x20000014
 8003b1c:	51eb851f 	.word	0x51eb851f
 8003b20:	42c80000 	.word	0x42c80000
 8003b24:	42c80000 	.word	0x42c80000

08003b28 <renderPage2>:

void renderPage2(char* buffer)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b090      	sub	sp, #64	; 0x40
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	char displayBuffer[50];
  // Display battery voltage
	ssd1306_SetCursor(2, 0);
 8003b30:	2100      	movs	r1, #0
 8003b32:	2002      	movs	r0, #2
 8003b34:	f000 ff6a 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "V_Battery: %.2f V", batteryVoltage);
 8003b38:	4b59      	ldr	r3, [pc, #356]	; (8003ca0 <renderPage2+0x178>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fc fd1b 	bl	8000578 <__aeabi_f2d>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	f107 000c 	add.w	r0, r7, #12
 8003b4a:	4956      	ldr	r1, [pc, #344]	; (8003ca4 <renderPage2+0x17c>)
 8003b4c:	f008 fa5c 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003b50:	4a55      	ldr	r2, [pc, #340]	; (8003ca8 <renderPage2+0x180>)
 8003b52:	f107 000c 	add.w	r0, r7, #12
 8003b56:	2301      	movs	r3, #1
 8003b58:	ca06      	ldmia	r2, {r1, r2}
 8003b5a:	f000 ff31 	bl	80049c0 <ssd1306_WriteString>

  // Display current
	ssd1306_SetCursor(2, 8);
 8003b5e:	2108      	movs	r1, #8
 8003b60:	2002      	movs	r0, #2
 8003b62:	f000 ff53 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "Current: %.2f A", current);
 8003b66:	4b51      	ldr	r3, [pc, #324]	; (8003cac <renderPage2+0x184>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f107 000c 	add.w	r0, r7, #12
 8003b70:	494f      	ldr	r1, [pc, #316]	; (8003cb0 <renderPage2+0x188>)
 8003b72:	f008 fa49 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003b76:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <renderPage2+0x180>)
 8003b78:	f107 000c 	add.w	r0, r7, #12
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	ca06      	ldmia	r2, {r1, r2}
 8003b80:	f000 ff1e 	bl	80049c0 <ssd1306_WriteString>

  // Display Speed
	ssd1306_SetCursor(2, 16);
 8003b84:	2110      	movs	r1, #16
 8003b86:	2002      	movs	r0, #2
 8003b88:	f000 ff40 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "Speed: %.2f km/h", speed);
 8003b8c:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <renderPage2+0x18c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fcf1 	bl	8000578 <__aeabi_f2d>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	f107 000c 	add.w	r0, r7, #12
 8003b9e:	4946      	ldr	r1, [pc, #280]	; (8003cb8 <renderPage2+0x190>)
 8003ba0:	f008 fa32 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003ba4:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <renderPage2+0x180>)
 8003ba6:	f107 000c 	add.w	r0, r7, #12
 8003baa:	2301      	movs	r3, #1
 8003bac:	ca06      	ldmia	r2, {r1, r2}
 8003bae:	f000 ff07 	bl	80049c0 <ssd1306_WriteString>

  // Display distance
	ssd1306_SetCursor(2, 24);
 8003bb2:	2118      	movs	r1, #24
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f000 ff29 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "Distance: %.2f km", totalDistance);
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <renderPage2+0x194>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fc fcda 	bl	8000578 <__aeabi_f2d>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	f107 000c 	add.w	r0, r7, #12
 8003bcc:	493c      	ldr	r1, [pc, #240]	; (8003cc0 <renderPage2+0x198>)
 8003bce:	f008 fa1b 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003bd2:	4a35      	ldr	r2, [pc, #212]	; (8003ca8 <renderPage2+0x180>)
 8003bd4:	f107 000c 	add.w	r0, r7, #12
 8003bd8:	2301      	movs	r3, #1
 8003bda:	ca06      	ldmia	r2, {r1, r2}
 8003bdc:	f000 fef0 	bl	80049c0 <ssd1306_WriteString>

  // Display POWER
	ssd1306_SetCursor(2, 32);
 8003be0:	2120      	movs	r1, #32
 8003be2:	2002      	movs	r0, #2
 8003be4:	f000 ff12 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "Power: %.2f W", power);
 8003be8:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <renderPage2+0x19c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc fcc3 	bl	8000578 <__aeabi_f2d>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	f107 000c 	add.w	r0, r7, #12
 8003bfa:	4933      	ldr	r1, [pc, #204]	; (8003cc8 <renderPage2+0x1a0>)
 8003bfc:	f008 fa04 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003c00:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <renderPage2+0x180>)
 8003c02:	f107 000c 	add.w	r0, r7, #12
 8003c06:	2301      	movs	r3, #1
 8003c08:	ca06      	ldmia	r2, {r1, r2}
 8003c0a:	f000 fed9 	bl	80049c0 <ssd1306_WriteString>

  // Display LM35
	ssd1306_SetCursor(2, 40);
 8003c0e:	2128      	movs	r1, #40	; 0x28
 8003c10:	2002      	movs	r0, #2
 8003c12:	f000 fefb 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "TempLM35: %.2f *C", temp);
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <renderPage2+0x1a4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fcac 	bl	8000578 <__aeabi_f2d>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	f107 000c 	add.w	r0, r7, #12
 8003c28:	4929      	ldr	r1, [pc, #164]	; (8003cd0 <renderPage2+0x1a8>)
 8003c2a:	f008 f9ed 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <renderPage2+0x180>)
 8003c30:	f107 000c 	add.w	r0, r7, #12
 8003c34:	2301      	movs	r3, #1
 8003c36:	ca06      	ldmia	r2, {r1, r2}
 8003c38:	f000 fec2 	bl	80049c0 <ssd1306_WriteString>

  // Display NTC10K
	ssd1306_SetCursor(2, 48);
 8003c3c:	2130      	movs	r1, #48	; 0x30
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f000 fee4 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "TempNTC10K: %.2f *C", Ntc_Tmp);
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <renderPage2+0x1ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fc95 	bl	8000578 <__aeabi_f2d>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	f107 000c 	add.w	r0, r7, #12
 8003c56:	4920      	ldr	r1, [pc, #128]	; (8003cd8 <renderPage2+0x1b0>)
 8003c58:	f008 f9d6 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003c5c:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <renderPage2+0x180>)
 8003c5e:	f107 000c 	add.w	r0, r7, #12
 8003c62:	2301      	movs	r3, #1
 8003c64:	ca06      	ldmia	r2, {r1, r2}
 8003c66:	f000 feab 	bl	80049c0 <ssd1306_WriteString>

  // Display temperature
	ssd1306_SetCursor(2, 56);
 8003c6a:	2138      	movs	r1, #56	; 0x38
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f000 fecd 	bl	8004a0c <ssd1306_SetCursor>
	sprintf(displayBuffer, "TempDS18B20: %.2f *C", temperature);
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <renderPage2+0x1b4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fc7e 	bl	8000578 <__aeabi_f2d>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	f107 000c 	add.w	r0, r7, #12
 8003c84:	4916      	ldr	r1, [pc, #88]	; (8003ce0 <renderPage2+0x1b8>)
 8003c86:	f008 f9bf 	bl	800c008 <siprintf>
	ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <renderPage2+0x180>)
 8003c8c:	f107 000c 	add.w	r0, r7, #12
 8003c90:	2301      	movs	r3, #1
 8003c92:	ca06      	ldmia	r2, {r1, r2}
 8003c94:	f000 fe94 	bl	80049c0 <ssd1306_WriteString>
}
 8003c98:	bf00      	nop
 8003c9a:	3740      	adds	r7, #64	; 0x40
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200003cc 	.word	0x200003cc
 8003ca4:	0800f0a8 	.word	0x0800f0a8
 8003ca8:	20000004 	.word	0x20000004
 8003cac:	200003a0 	.word	0x200003a0
 8003cb0:	0800f0bc 	.word	0x0800f0bc
 8003cb4:	200002d0 	.word	0x200002d0
 8003cb8:	0800f0cc 	.word	0x0800f0cc
 8003cbc:	200002d8 	.word	0x200002d8
 8003cc0:	0800f0e0 	.word	0x0800f0e0
 8003cc4:	20000398 	.word	0x20000398
 8003cc8:	0800f0f4 	.word	0x0800f0f4
 8003ccc:	20000390 	.word	0x20000390
 8003cd0:	0800f104 	.word	0x0800f104
 8003cd4:	2000038c 	.word	0x2000038c
 8003cd8:	0800f118 	.word	0x0800f118
 8003cdc:	2000063c 	.word	0x2000063c
 8003ce0:	0800f12c 	.word	0x0800f12c

08003ce4 <renderPage3>:

void renderPage3(char* buffer){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b092      	sub	sp, #72	; 0x48
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	6078      	str	r0, [r7, #4]
	char displayBuffer[50];

    ssd1306_SetCursor(10, 0);
 8003cec:	2100      	movs	r1, #0
 8003cee:	200a      	movs	r0, #10
 8003cf0:	f000 fe8c 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "GPS INFORMATION");
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	494b      	ldr	r1, [pc, #300]	; (8003e28 <renderPage3+0x144>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f008 f984 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003d00:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <renderPage3+0x148>)
 8003d02:	f107 000c 	add.w	r0, r7, #12
 8003d06:	2301      	movs	r3, #1
 8003d08:	ca06      	ldmia	r2, {r1, r2}
 8003d0a:	f000 fe59 	bl	80049c0 <ssd1306_WriteString>

    // Display GPS satelites number
    ssd1306_SetCursor(2, 9);
 8003d0e:	2109      	movs	r1, #9
 8003d10:	2002      	movs	r0, #2
 8003d12:	f000 fe7b 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "SatelitesNumber: %d", GpsState.SatelitesNumber);
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <renderPage3+0x14c>)
 8003d18:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	4944      	ldr	r1, [pc, #272]	; (8003e34 <renderPage3+0x150>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f008 f96f 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003d2a:	4a40      	ldr	r2, [pc, #256]	; (8003e2c <renderPage3+0x148>)
 8003d2c:	f107 000c 	add.w	r0, r7, #12
 8003d30:	2301      	movs	r3, #1
 8003d32:	ca06      	ldmia	r2, {r1, r2}
 8003d34:	f000 fe44 	bl	80049c0 <ssd1306_WriteString>

    // Display GPS Date
    ssd1306_SetCursor(2, 18);
 8003d38:	2112      	movs	r1, #18
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f000 fe66 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "Date: %d.%d.%d", GpsState.Day, GpsState.Month, GpsState.Year);
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <renderPage3+0x14c>)
 8003d42:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <renderPage3+0x14c>)
 8003d4a:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <renderPage3+0x14c>)
 8003d52:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8003d56:	f107 000c 	add.w	r0, r7, #12
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4936      	ldr	r1, [pc, #216]	; (8003e38 <renderPage3+0x154>)
 8003d60:	f008 f952 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003d64:	4a31      	ldr	r2, [pc, #196]	; (8003e2c <renderPage3+0x148>)
 8003d66:	f107 000c 	add.w	r0, r7, #12
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	ca06      	ldmia	r2, {r1, r2}
 8003d6e:	f000 fe27 	bl	80049c0 <ssd1306_WriteString>

    // Display GPS Time
    ssd1306_SetCursor(2, 27);
 8003d72:	211b      	movs	r1, #27
 8003d74:	2002      	movs	r0, #2
 8003d76:	f000 fe49 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "Time: %d:%d:%d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <renderPage3+0x14c>)
 8003d7c:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <renderPage3+0x14c>)
 8003d84:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <renderPage3+0x14c>)
 8003d8c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8003d90:	f107 000c 	add.w	r0, r7, #12
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	460b      	mov	r3, r1
 8003d98:	4928      	ldr	r1, [pc, #160]	; (8003e3c <renderPage3+0x158>)
 8003d9a:	f008 f935 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003d9e:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <renderPage3+0x148>)
 8003da0:	f107 000c 	add.w	r0, r7, #12
 8003da4:	2301      	movs	r3, #1
 8003da6:	ca06      	ldmia	r2, {r1, r2}
 8003da8:	f000 fe0a 	bl	80049c0 <ssd1306_WriteString>

    // Display GPS Speed
    ssd1306_SetCursor(2, 36);
 8003dac:	2124      	movs	r1, #36	; 0x24
 8003dae:	2002      	movs	r0, #2
 8003db0:	f000 fe2c 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "Speed: %.2f km/h", GpsState.SpeedKilometers);
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <renderPage3+0x14c>)
 8003db6:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8003dba:	f107 000c 	add.w	r0, r7, #12
 8003dbe:	4920      	ldr	r1, [pc, #128]	; (8003e40 <renderPage3+0x15c>)
 8003dc0:	f008 f922 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <renderPage3+0x148>)
 8003dc6:	f107 000c 	add.w	r0, r7, #12
 8003dca:	2301      	movs	r3, #1
 8003dcc:	ca06      	ldmia	r2, {r1, r2}
 8003dce:	f000 fdf7 	bl	80049c0 <ssd1306_WriteString>

    // Display GPS Latitude and Longitude
    ssd1306_SetCursor(2, 45);
 8003dd2:	212d      	movs	r1, #45	; 0x2d
 8003dd4:	2002      	movs	r0, #2
 8003dd6:	f000 fe19 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "Lat: %f", GpsState.Latitude);
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <renderPage3+0x14c>)
 8003ddc:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8003de0:	f107 000c 	add.w	r0, r7, #12
 8003de4:	4917      	ldr	r1, [pc, #92]	; (8003e44 <renderPage3+0x160>)
 8003de6:	f008 f90f 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <renderPage3+0x148>)
 8003dec:	f107 000c 	add.w	r0, r7, #12
 8003df0:	2301      	movs	r3, #1
 8003df2:	ca06      	ldmia	r2, {r1, r2}
 8003df4:	f000 fde4 	bl	80049c0 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 54);
 8003df8:	2136      	movs	r1, #54	; 0x36
 8003dfa:	2002      	movs	r0, #2
 8003dfc:	f000 fe06 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "Long: %f",GpsState.Longitude);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <renderPage3+0x14c>)
 8003e02:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8003e06:	f107 000c 	add.w	r0, r7, #12
 8003e0a:	490f      	ldr	r1, [pc, #60]	; (8003e48 <renderPage3+0x164>)
 8003e0c:	f008 f8fc 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003e10:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <renderPage3+0x148>)
 8003e12:	f107 000c 	add.w	r0, r7, #12
 8003e16:	2301      	movs	r3, #1
 8003e18:	ca06      	ldmia	r2, {r1, r2}
 8003e1a:	f000 fdd1 	bl	80049c0 <ssd1306_WriteString>
//    ssd1306_WriteString(displayBuffer, Font_6x8, White);
//
//    ssd1306_SetCursor(2, 54);
//    sprintf(displayBuffer, "Long: **.****** ");
//    ssd1306_WriteString(displayBuffer, Font_6x8, White);
}
 8003e1e:	bf00      	nop
 8003e20:	3740      	adds	r7, #64	; 0x40
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	0800f144 	.word	0x0800f144
 8003e2c:	20000004 	.word	0x20000004
 8003e30:	200003d0 	.word	0x200003d0
 8003e34:	0800f154 	.word	0x0800f154
 8003e38:	0800f168 	.word	0x0800f168
 8003e3c:	0800f178 	.word	0x0800f178
 8003e40:	0800f0cc 	.word	0x0800f0cc
 8003e44:	0800f188 	.word	0x0800f188
 8003e48:	0800f190 	.word	0x0800f190

08003e4c <renderPage4>:

void renderPage4(char* buffer){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b090      	sub	sp, #64	; 0x40
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	char displayBuffer[50];

    ssd1306_SetCursor(35, 2);
 8003e54:	2102      	movs	r1, #2
 8003e56:	2023      	movs	r0, #35	; 0x23
 8003e58:	f000 fdd8 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "SETTINGS");
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	4918      	ldr	r1, [pc, #96]	; (8003ec4 <renderPage4+0x78>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f008 f8d0 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_7x10, White);
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <renderPage4+0x7c>)
 8003e6a:	f107 000c 	add.w	r0, r7, #12
 8003e6e:	2301      	movs	r3, #1
 8003e70:	ca06      	ldmia	r2, {r1, r2}
 8003e72:	f000 fda5 	bl	80049c0 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 15);
 8003e76:	210f      	movs	r1, #15
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f000 fdc7 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "-Temperature_SENS ");
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	4912      	ldr	r1, [pc, #72]	; (8003ecc <renderPage4+0x80>)
 8003e84:	4618      	mov	r0, r3
 8003e86:	f008 f8bf 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <renderPage4+0x84>)
 8003e8c:	f107 000c 	add.w	r0, r7, #12
 8003e90:	2301      	movs	r3, #1
 8003e92:	ca06      	ldmia	r2, {r1, r2}
 8003e94:	f000 fd94 	bl	80049c0 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 30);
 8003e98:	211e      	movs	r1, #30
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f000 fdb6 	bl	8004a0c <ssd1306_SetCursor>
    sprintf(displayBuffer, "-Current_SENS_CALIB");
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	490b      	ldr	r1, [pc, #44]	; (8003ed4 <renderPage4+0x88>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f008 f8ae 	bl	800c008 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_6x8, White);
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <renderPage4+0x84>)
 8003eae:	f107 000c 	add.w	r0, r7, #12
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	ca06      	ldmia	r2, {r1, r2}
 8003eb6:	f000 fd83 	bl	80049c0 <ssd1306_WriteString>
}
 8003eba:	bf00      	nop
 8003ebc:	3740      	adds	r7, #64	; 0x40
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	0800f19c 	.word	0x0800f19c
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	0800f1a8 	.word	0x0800f1a8
 8003ed0:	20000004 	.word	0x20000004
 8003ed4:	0800f1bc 	.word	0x0800f1bc

08003ed8 <HAL_UART_RxCpltCallback>:

/////////////////////////////////////////////// NEO6GPS  //////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_UART_RxCpltCallback+0x20>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d102      	bne.n	8003ef0 <HAL_UART_RxCpltCallback+0x18>
	{
		NEO6_ReceiveUartChar(&GpsState);
 8003eea:	4803      	ldr	r0, [pc, #12]	; (8003ef8 <HAL_UART_RxCpltCallback+0x20>)
 8003eec:	f7fe faa6 	bl	800243c <NEO6_ReceiveUartChar>
	}
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200003d0 	.word	0x200003d0

08003efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f00:	b672      	cpsid	i
}
 8003f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f04:	e7fe      	b.n	8003f04 <Error_Handler+0x8>
	...

08003f08 <NTC10K_ADC_Read>:


uint16_t Ntc_R;

void NTC10K_ADC_Read(uint16_t *ADC_Raw)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	ADC_Select_CH4();
 8003f10:	f7fd fd14 	bl	800193c <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8003f14:	480a      	ldr	r0, [pc, #40]	; (8003f40 <NTC10K_ADC_Read+0x38>)
 8003f16:	f001 fbe7 	bl	80056e8 <HAL_ADC_Start>
	// Check if the ADC has ended its conversion
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8003f1a:	210a      	movs	r1, #10
 8003f1c:	4808      	ldr	r0, [pc, #32]	; (8003f40 <NTC10K_ADC_Read+0x38>)
 8003f1e:	f001 fcca 	bl	80058b6 <HAL_ADC_PollForConversion>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <NTC10K_ADC_Read+0x2e>
	{
		*ADC_Raw = HAL_ADC_GetValue(&hadc1);
 8003f28:	4805      	ldr	r0, [pc, #20]	; (8003f40 <NTC10K_ADC_Read+0x38>)
 8003f2a:	f001 fd4f 	bl	80059cc <HAL_ADC_GetValue>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	801a      	strh	r2, [r3, #0]
	}
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000218 	.word	0x20000218
 8003f44:	00000000 	.word	0x00000000

08003f48 <NTC10K_Get_Temp>:

void NTC10K_Get_Temp(float *Ntc_Tmp)
{
 8003f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	uint16_t ADC_Raw;
	NTC10K_ADC_Read(&ADC_Raw);
 8003f52:	f107 030e 	add.w	r3, r7, #14
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ffd6 	bl	8003f08 <NTC10K_ADC_Read>
  /* Calculate thermistor resistance */
  Ntc_R = ((NTC_UP_R * ADC_Raw) / (4095.0 - ADC_Raw));
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f66:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004128 <NTC10K_Get_Temp+0x1e0>
 8003f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f6e:	ee17 0a90 	vmov	r0, s15
 8003f72:	f7fc fb01 	bl	8000578 <__aeabi_f2d>
 8003f76:	4604      	mov	r4, r0
 8003f78:	460d      	mov	r5, r1
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fae9 	bl	8000554 <__aeabi_i2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	a15c      	add	r1, pc, #368	; (adr r1, 80040f8 <NTC10K_Get_Temp+0x1b0>)
 8003f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f8c:	f7fc f994 	bl	80002b8 <__aeabi_dsub>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc fc70 	bl	800087c <__aeabi_ddiv>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7fc fe18 	bl	8000bd8 <__aeabi_d2uiz>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	4b5f      	ldr	r3, [pc, #380]	; (800412c <NTC10K_Get_Temp+0x1e4>)
 8003fae:	801a      	strh	r2, [r3, #0]

  /* Calculate ln(R/Rt) */
  float Ntc_Ln = log(Ntc_R / NTC_REF_RES);
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	; (800412c <NTC10K_Get_Temp+0x1e4>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004128 <NTC10K_Get_Temp+0x1e0>
 8003fc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003fc4:	ee16 0a90 	vmov	r0, s13
 8003fc8:	f7fc fad6 	bl	8000578 <__aeabi_f2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	ec43 2b10 	vmov	d0, r2, r3
 8003fd4:	f00a fe34 	bl	800ec40 <log>
 8003fd8:	ec53 2b10 	vmov	r2, r3, d0
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7fc fe1a 	bl	8000c18 <__aeabi_d2f>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Calculate 1 / T = A + B * ln(R/Rt) + C * (ln(R/Rt))^2 + D * (ln(R/Rt))^3 */
  float inverseT = A + B * Ntc_Ln + C * Ntc_Ln * Ntc_Ln + D * Ntc_Ln * Ntc_Ln * Ntc_Ln;
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f7fc fac5 	bl	8000578 <__aeabi_f2d>
 8003fee:	a344      	add	r3, pc, #272	; (adr r3, 8004100 <NTC10K_Get_Temp+0x1b8>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc fb18 	bl	8000628 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	a341      	add	r3, pc, #260	; (adr r3, 8004108 <NTC10K_Get_Temp+0x1c0>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc f959 	bl	80002bc <__adddf3>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4614      	mov	r4, r2
 8004010:	461d      	mov	r5, r3
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7fc fab0 	bl	8000578 <__aeabi_f2d>
 8004018:	a33d      	add	r3, pc, #244	; (adr r3, 8004110 <NTC10K_Get_Temp+0x1c8>)
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f7fc fb03 	bl	8000628 <__aeabi_dmul>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4690      	mov	r8, r2
 8004028:	4699      	mov	r9, r3
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7fc faa4 	bl	8000578 <__aeabi_f2d>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4640      	mov	r0, r8
 8004036:	4649      	mov	r1, r9
 8004038:	f7fc faf6 	bl	8000628 <__aeabi_dmul>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc f93a 	bl	80002bc <__adddf3>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	6978      	ldr	r0, [r7, #20]
 8004052:	f7fc fa91 	bl	8000578 <__aeabi_f2d>
 8004056:	a330      	add	r3, pc, #192	; (adr r3, 8004118 <NTC10K_Get_Temp+0x1d0>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc fae4 	bl	8000628 <__aeabi_dmul>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4690      	mov	r8, r2
 8004066:	4699      	mov	r9, r3
 8004068:	6978      	ldr	r0, [r7, #20]
 800406a:	f7fc fa85 	bl	8000578 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4640      	mov	r0, r8
 8004074:	4649      	mov	r1, r9
 8004076:	f7fc fad7 	bl	8000628 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4690      	mov	r8, r2
 8004080:	4699      	mov	r9, r3
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f7fc fa78 	bl	8000578 <__aeabi_f2d>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4640      	mov	r0, r8
 800408e:	4649      	mov	r1, r9
 8004090:	f7fc faca 	bl	8000628 <__aeabi_dmul>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4620      	mov	r0, r4
 800409a:	4629      	mov	r1, r5
 800409c:	f7fc f90e 	bl	80002bc <__adddf3>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f7fc fdb6 	bl	8000c18 <__aeabi_d2f>
 80040ac:	4603      	mov	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]

  /* Calculate temperature in Celsius */
  *Ntc_Tmp = (1.0 / inverseT) - 273.15;
 80040b0:	6938      	ldr	r0, [r7, #16]
 80040b2:	f7fc fa61 	bl	8000578 <__aeabi_f2d>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	f04f 0000 	mov.w	r0, #0
 80040be:	491c      	ldr	r1, [pc, #112]	; (8004130 <NTC10K_Get_Temp+0x1e8>)
 80040c0:	f7fc fbdc 	bl	800087c <__aeabi_ddiv>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	a314      	add	r3, pc, #80	; (adr r3, 8004120 <NTC10K_Get_Temp+0x1d8>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc f8f1 	bl	80002b8 <__aeabi_dsub>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	f7fc fd9b 	bl	8000c18 <__aeabi_d2f>
 80040e2:	4602      	mov	r2, r0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040f2:	bf00      	nop
 80040f4:	f3af 8000 	nop.w
 80040f8:	00000000 	.word	0x00000000
 80040fc:	40affe00 	.word	0x40affe00
 8004100:	2ba9fce9 	.word	0x2ba9fce9
 8004104:	3f30d77e 	.word	0x3f30d77e
 8004108:	a0f7e55d 	.word	0xa0f7e55d
 800410c:	3f6b79e1 	.word	0x3f6b79e1
 8004110:	401a1857 	.word	0x401a1857
 8004114:	3ec5fab0 	.word	0x3ec5fab0
 8004118:	3e7d9fce 	.word	0x3e7d9fce
 800411c:	3e71226d 	.word	0x3e71226d
 8004120:	66666666 	.word	0x66666666
 8004124:	40711266 	.word	0x40711266
 8004128:	461c4000 	.word	0x461c4000
 800412c:	20000642 	.word	0x20000642
 8004130:	3ff00000 	.word	0x3ff00000

08004134 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <OneWire_Delay+0x30>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8004146:	bf00      	nop
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <OneWire_Delay+0x30>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	429a      	cmp	r2, r3
 8004152:	d9f9      	bls.n	8004148 <OneWire_Delay+0x14>
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000a50 	.word	0x20000a50

08004168 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8004178:	2301      	movs	r3, #1
 800417a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	889b      	ldrh	r3, [r3, #4]
 8004180:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f107 020c 	add.w	r2, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f001 fffd 	bl	800618c <HAL_GPIO_Init>
}
 8004192:	bf00      	nop
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 80041a2:	2311      	movs	r3, #17
 80041a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80041aa:	2301      	movs	r3, #1
 80041ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	889b      	ldrh	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f107 020c 	add.w	r2, r7, #12
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 ffe4 	bl	800618c <HAL_GPIO_Init>
}
 80041c4:	bf00      	nop
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	889b      	ldrh	r3, [r3, #4]
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	619a      	str	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	889a      	ldrh	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ffda 	bl	80041cc <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ffbe 	bl	800419a <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 800421e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004222:	f7ff ff87 	bl	8004134 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ff9e 	bl	8004168 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 800422c:	2046      	movs	r0, #70	; 0x46
 800422e:	f7ff ff81 	bl	8004134 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	889b      	ldrh	r3, [r3, #4]
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f002 f929 	bl	8006494 <HAL_GPIO_ReadPin>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8004246:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800424a:	f7ff ff73 	bl	8004134 <OneWire_Delay>

	return i;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00f      	beq.n	800428a <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff ffae 	bl	80041cc <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff92 	bl	800419a <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8004276:	2006      	movs	r0, #6
 8004278:	f7ff ff5c 	bl	8004134 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff73 	bl	8004168 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8004282:	2040      	movs	r0, #64	; 0x40
 8004284:	f7ff ff56 	bl	8004134 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8004288:	e00e      	b.n	80042a8 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff9e 	bl	80041cc <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff82 	bl	800419a <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8004296:	203c      	movs	r0, #60	; 0x3c
 8004298:	f7ff ff4c 	bl	8004134 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff63 	bl	8004168 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 80042a2:	200a      	movs	r0, #10
 80042a4:	f7ff ff46 	bl	8004134 <OneWire_Delay>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff85 	bl	80041cc <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff69 	bl	800419a <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80042c8:	2002      	movs	r0, #2
 80042ca:	f7ff ff33 	bl	8004134 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ff4a 	bl	8004168 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80042d4:	200a      	movs	r0, #10
 80042d6:	f7ff ff2d 	bl	8004134 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	889b      	ldrh	r3, [r3, #4]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f002 f8d5 	bl	8006494 <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <OneWire_ReadBit+0x44>
		bit = 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 80042f4:	2032      	movs	r0, #50	; 0x32
 80042f6:	f7ff ff1d 	bl	8004134 <OneWire_Delay>

	return bit;
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004310:	2308      	movs	r3, #8
 8004312:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ff9a 	bl	8004258 <OneWire_WriteBit>
		byte >>= 1;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	3b01      	subs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ee      	bne.n	8004314 <OneWire_WriteByte+0x10>
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8004348:	2308      	movs	r3, #8
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	2300      	movs	r3, #0
 800434e:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ffaa 	bl	80042b0 <OneWire_ReadBit>
 800435c:	4603      	mov	r3, r0
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	b25a      	sxtb	r2, r3
 8004362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004366:	4313      	orrs	r3, r2
 8004368:	b25b      	sxtb	r3, r3
 800436a:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	3b01      	subs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1eb      	bne.n	8004350 <OneWire_ReadByte+0x10>

	return byte;
 8004378:	7bbb      	ldrb	r3, [r7, #14]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	71da      	strb	r2, [r3, #7]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80043c0:	2301      	movs	r3, #1
 80043c2:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7a1b      	ldrb	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 809a 	bne.w	8004506 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff19 	bl	800420a <OneWire_Reset>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	71da      	strb	r2, [r3, #7]
			return 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e09b      	b.n	800452c <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff83 	bl	8004304 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ff56 	bl	80042b0 <OneWire_ReadBit>
 8004404:	4603      	mov	r3, r0
 8004406:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff51 	bl	80042b0 <OneWire_ReadBit>
 800440e:	4603      	mov	r3, r0
 8004410:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8004412:	7a7b      	ldrb	r3, [r7, #9]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <OneWire_Search+0x76>
 8004418:	7a3b      	ldrb	r3, [r7, #8]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d064      	beq.n	80044e8 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 800441e:	7a7a      	ldrb	r2, [r7, #9]
 8004420:	7a3b      	ldrb	r3, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	d002      	beq.n	800442c <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8004426:	7a7b      	ldrb	r3, [r7, #9]
 8004428:	72bb      	strb	r3, [r7, #10]
 800442a:	e026      	b.n	800447a <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	799b      	ldrb	r3, [r3, #6]
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	429a      	cmp	r2, r3
 8004434:	d20d      	bcs.n	8004452 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8004436:	7b7b      	ldrb	r3, [r7, #13]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	7a5a      	ldrb	r2, [r3, #9]
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	4013      	ands	r3, r2
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	72bb      	strb	r3, [r7, #10]
 8004450:	e008      	b.n	8004464 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	799b      	ldrb	r3, [r3, #6]
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	429a      	cmp	r2, r3
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8004464:	7abb      	ldrb	r3, [r7, #10]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d802      	bhi.n	800447a <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7bba      	ldrb	r2, [r7, #14]
 8004478:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 800447a:	7abb      	ldrb	r3, [r7, #10]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10c      	bne.n	800449a <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8004480:	7b7b      	ldrb	r3, [r7, #13]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	7a59      	ldrb	r1, [r3, #9]
 8004488:	7b7b      	ldrb	r3, [r7, #13]
 800448a:	7afa      	ldrb	r2, [r7, #11]
 800448c:	430a      	orrs	r2, r1
 800448e:	b2d1      	uxtb	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	460a      	mov	r2, r1
 8004496:	725a      	strb	r2, [r3, #9]
 8004498:	e010      	b.n	80044bc <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 800449a:	7b7b      	ldrb	r3, [r7, #13]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	7a5b      	ldrb	r3, [r3, #9]
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	4013      	ands	r3, r2
 80044ae:	b25a      	sxtb	r2, r3
 80044b0:	7b7b      	ldrb	r3, [r7, #13]
 80044b2:	b2d1      	uxtb	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	460a      	mov	r2, r1
 80044ba:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 80044bc:	7abb      	ldrb	r3, [r7, #10]
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fec9 	bl	8004258 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	3301      	adds	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 80044cc:	7afb      	ldrb	r3, [r7, #11]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 80044d8:	7b7b      	ldrb	r3, [r7, #13]
 80044da:	3301      	adds	r3, #1
 80044dc:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 80044de:	2301      	movs	r3, #1
 80044e0:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 80044e2:	7b7b      	ldrb	r3, [r7, #13]
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	d98a      	bls.n	80043fe <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d90b      	bls.n	8004506 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	7bba      	ldrb	r2, [r7, #14]
 80044f2:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	799b      	ldrb	r3, [r3, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8004502:	2301      	movs	r3, #1
 8004504:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8004506:	7b3b      	ldrb	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <OneWire_Search+0x16c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7a5b      	ldrb	r3, [r3, #9]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800452a:	7b3b      	ldrb	r3, [r7, #12]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff20 	bl	8004382 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8004542:	21f0      	movs	r1, #240	; 0xf0
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff ff2f 	bl	80043a8 <OneWire_Search>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800455c:	21f0      	movs	r1, #240	; 0xf0
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ff22 	bl	80043a8 <OneWire_Search>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8004578:	2155      	movs	r1, #85	; 0x55
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fec2 	bl	8004304 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e00a      	b.n	800459c <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	4413      	add	r3, r2
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff feb7 	bl	8004304 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	3301      	adds	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b07      	cmp	r3, #7
 80045a0:	d9f1      	bls.n	8004586 <OneWire_SelectWithPointer+0x18>
	}
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e00a      	b.n	80045d2 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	440b      	add	r3, r1
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	440a      	add	r2, r1
 80045c8:	7a52      	ldrb	r2, [r2, #9]
 80045ca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	3301      	adds	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b07      	cmp	r3, #7
 80045d6:	d9f1      	bls.n	80045bc <OneWire_GetFullROM+0x10>
	}
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80045f6:	4811      	ldr	r0, [pc, #68]	; (800463c <OneWire_Init+0x54>)
 80045f8:	f003 fe92 	bl	8008320 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	88fa      	ldrh	r2, [r7, #6]
 8004606:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fdc6 	bl	800419a <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff fdec 	bl	80041ec <OneWire_OutputHigh>
	HAL_Delay(100);
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	f000 ffff 	bl	8005618 <HAL_Delay>
	OneWire_OutputLow(onewire);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fdd6 	bl	80041cc <OneWire_OutputLow>
	HAL_Delay(100);
 8004620:	2064      	movs	r0, #100	; 0x64
 8004622:	f000 fff9 	bl	8005618 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff fde0 	bl	80041ec <OneWire_OutputHigh>
	HAL_Delay(200);
 800462c:	20c8      	movs	r0, #200	; 0xc8
 800462e:	f000 fff3 	bl	8005618 <HAL_Delay>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000a50 	.word	0x20000a50

08004640 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af04      	add	r7, sp, #16
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	2301      	movs	r3, #1
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2301      	movs	r3, #1
 800466a:	2200      	movs	r2, #0
 800466c:	2178      	movs	r1, #120	; 0x78
 800466e:	4803      	ldr	r0, [pc, #12]	; (800467c <ssd1306_WriteCommand+0x2c>)
 8004670:	f002 fbc2 	bl	8006df8 <HAL_I2C_Mem_Write>
}
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	200002e0 	.word	0x200002e0

08004680 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af04      	add	r7, sp, #16
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	9202      	str	r2, [sp, #8]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2301      	movs	r3, #1
 800469c:	2240      	movs	r2, #64	; 0x40
 800469e:	2178      	movs	r1, #120	; 0x78
 80046a0:	4803      	ldr	r0, [pc, #12]	; (80046b0 <ssd1306_WriteData+0x30>)
 80046a2:	f002 fba9 	bl	8006df8 <HAL_I2C_Mem_Write>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200002e0 	.word	0x200002e0

080046b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80046b8:	f7ff ffc2 	bl	8004640 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80046bc:	2064      	movs	r0, #100	; 0x64
 80046be:	f000 ffab 	bl	8005618 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80046c2:	2000      	movs	r0, #0
 80046c4:	f000 fabe 	bl	8004c44 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80046c8:	2020      	movs	r0, #32
 80046ca:	f7ff ffc1 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff ffbe 	bl	8004650 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80046d4:	20b0      	movs	r0, #176	; 0xb0
 80046d6:	f7ff ffbb 	bl	8004650 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80046da:	20c8      	movs	r0, #200	; 0xc8
 80046dc:	f7ff ffb8 	bl	8004650 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7ff ffb5 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80046e6:	2010      	movs	r0, #16
 80046e8:	f7ff ffb2 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80046ec:	2040      	movs	r0, #64	; 0x40
 80046ee:	f7ff ffaf 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80046f2:	20ff      	movs	r0, #255	; 0xff
 80046f4:	f000 fa93 	bl	8004c1e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80046f8:	20a1      	movs	r0, #161	; 0xa1
 80046fa:	f7ff ffa9 	bl	8004650 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80046fe:	20a6      	movs	r0, #166	; 0xa6
 8004700:	f7ff ffa6 	bl	8004650 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004704:	20a8      	movs	r0, #168	; 0xa8
 8004706:	f7ff ffa3 	bl	8004650 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800470a:	203f      	movs	r0, #63	; 0x3f
 800470c:	f7ff ffa0 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004710:	20a4      	movs	r0, #164	; 0xa4
 8004712:	f7ff ff9d 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004716:	20d3      	movs	r0, #211	; 0xd3
 8004718:	f7ff ff9a 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800471c:	2000      	movs	r0, #0
 800471e:	f7ff ff97 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004722:	20d5      	movs	r0, #213	; 0xd5
 8004724:	f7ff ff94 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004728:	20f0      	movs	r0, #240	; 0xf0
 800472a:	f7ff ff91 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800472e:	20d9      	movs	r0, #217	; 0xd9
 8004730:	f7ff ff8e 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004734:	2022      	movs	r0, #34	; 0x22
 8004736:	f7ff ff8b 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800473a:	20da      	movs	r0, #218	; 0xda
 800473c:	f7ff ff88 	bl	8004650 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004740:	2012      	movs	r0, #18
 8004742:	f7ff ff85 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004746:	20db      	movs	r0, #219	; 0xdb
 8004748:	f7ff ff82 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800474c:	2020      	movs	r0, #32
 800474e:	f7ff ff7f 	bl	8004650 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004752:	208d      	movs	r0, #141	; 0x8d
 8004754:	f7ff ff7c 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004758:	2014      	movs	r0, #20
 800475a:	f7ff ff79 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800475e:	2001      	movs	r0, #1
 8004760:	f000 fa70 	bl	8004c44 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004764:	2000      	movs	r0, #0
 8004766:	f000 f80f 	bl	8004788 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800476a:	f000 f825 	bl	80047b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <ssd1306_Init+0xd0>)
 8004770:	2200      	movs	r2, #0
 8004772:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <ssd1306_Init+0xd0>)
 8004776:	2200      	movs	r2, #0
 8004778:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800477a:	4b02      	ldr	r3, [pc, #8]	; (8004784 <ssd1306_Init+0xd0>)
 800477c:	2201      	movs	r2, #1
 800477e:	711a      	strb	r2, [r3, #4]
}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000a44 	.word	0x20000a44

08004788 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <ssd1306_Fill+0x14>
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <ssd1306_Fill+0x16>
 800479c:	23ff      	movs	r3, #255	; 0xff
 800479e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047a2:	4619      	mov	r1, r3
 80047a4:	4803      	ldr	r0, [pc, #12]	; (80047b4 <ssd1306_Fill+0x2c>)
 80047a6:	f007 fcac 	bl	800c102 <memset>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000644 	.word	0x20000644

080047b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80047be:	2300      	movs	r3, #0
 80047c0:	71fb      	strb	r3, [r7, #7]
 80047c2:	e016      	b.n	80047f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	3b50      	subs	r3, #80	; 0x50
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff40 	bl	8004650 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80047d0:	2002      	movs	r0, #2
 80047d2:	f7ff ff3d 	bl	8004650 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80047d6:	2010      	movs	r0, #16
 80047d8:	f7ff ff3a 	bl	8004650 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	01db      	lsls	r3, r3, #7
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <ssd1306_UpdateScreen+0x4c>)
 80047e2:	4413      	add	r3, r2
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ff4a 	bl	8004680 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	3301      	adds	r3, #1
 80047f0:	71fb      	strb	r3, [r7, #7]
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b07      	cmp	r3, #7
 80047f6:	d9e5      	bls.n	80047c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000644 	.word	0x20000644

08004808 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
 8004812:	460b      	mov	r3, r1
 8004814:	71bb      	strb	r3, [r7, #6]
 8004816:	4613      	mov	r3, r2
 8004818:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	2b00      	cmp	r3, #0
 8004820:	db3d      	blt.n	800489e <ssd1306_DrawPixel+0x96>
 8004822:	79bb      	ldrb	r3, [r7, #6]
 8004824:	2b3f      	cmp	r3, #63	; 0x3f
 8004826:	d83a      	bhi.n	800489e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004828:	797b      	ldrb	r3, [r7, #5]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d11a      	bne.n	8004864 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800482e:	79fa      	ldrb	r2, [r7, #7]
 8004830:	79bb      	ldrb	r3, [r7, #6]
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	b2d8      	uxtb	r0, r3
 8004836:	4603      	mov	r3, r0
 8004838:	01db      	lsls	r3, r3, #7
 800483a:	4413      	add	r3, r2
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <ssd1306_DrawPixel+0xa4>)
 800483e:	5cd3      	ldrb	r3, [r2, r3]
 8004840:	b25a      	sxtb	r2, r3
 8004842:	79bb      	ldrb	r3, [r7, #6]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	b25b      	sxtb	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	b259      	sxtb	r1, r3
 8004854:	79fa      	ldrb	r2, [r7, #7]
 8004856:	4603      	mov	r3, r0
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	4413      	add	r3, r2
 800485c:	b2c9      	uxtb	r1, r1
 800485e:	4a13      	ldr	r2, [pc, #76]	; (80048ac <ssd1306_DrawPixel+0xa4>)
 8004860:	54d1      	strb	r1, [r2, r3]
 8004862:	e01d      	b.n	80048a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004864:	79fa      	ldrb	r2, [r7, #7]
 8004866:	79bb      	ldrb	r3, [r7, #6]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	b2d8      	uxtb	r0, r3
 800486c:	4603      	mov	r3, r0
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4413      	add	r3, r2
 8004872:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <ssd1306_DrawPixel+0xa4>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
 8004876:	b25a      	sxtb	r2, r3
 8004878:	79bb      	ldrb	r3, [r7, #6]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	2101      	movs	r1, #1
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	b25b      	sxtb	r3, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	b25b      	sxtb	r3, r3
 800488a:	4013      	ands	r3, r2
 800488c:	b259      	sxtb	r1, r3
 800488e:	79fa      	ldrb	r2, [r7, #7]
 8004890:	4603      	mov	r3, r0
 8004892:	01db      	lsls	r3, r3, #7
 8004894:	4413      	add	r3, r2
 8004896:	b2c9      	uxtb	r1, r1
 8004898:	4a04      	ldr	r2, [pc, #16]	; (80048ac <ssd1306_DrawPixel+0xa4>)
 800489a:	54d1      	strb	r1, [r2, r3]
 800489c:	e000      	b.n	80048a0 <ssd1306_DrawPixel+0x98>
        return;
 800489e:	bf00      	nop
    }
}
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000644 	.word	0x20000644

080048b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	1d38      	adds	r0, r7, #4
 80048ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80048be:	461a      	mov	r2, r3
 80048c0:	4623      	mov	r3, r4
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	4613      	mov	r3, r2
 80048c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b1f      	cmp	r3, #31
 80048cc:	d902      	bls.n	80048d4 <ssd1306_WriteChar+0x24>
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b7e      	cmp	r3, #126	; 0x7e
 80048d2:	d901      	bls.n	80048d8 <ssd1306_WriteChar+0x28>
        return 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e06d      	b.n	80049b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80048d8:	4b38      	ldr	r3, [pc, #224]	; (80049bc <ssd1306_WriteChar+0x10c>)
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	793b      	ldrb	r3, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	dc06      	bgt.n	80048f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80048e6:	4b35      	ldr	r3, [pc, #212]	; (80049bc <ssd1306_WriteChar+0x10c>)
 80048e8:	885b      	ldrh	r3, [r3, #2]
 80048ea:	461a      	mov	r2, r3
 80048ec:	797b      	ldrb	r3, [r7, #5]
 80048ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	dd01      	ble.n	80048f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e05d      	b.n	80049b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e04c      	b.n	8004998 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	3b20      	subs	r3, #32
 8004904:	7979      	ldrb	r1, [r7, #5]
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4619      	mov	r1, r3
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	440b      	add	r3, r1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004918:	2300      	movs	r3, #0
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e034      	b.n	8004988 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d012      	beq.n	8004954 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <ssd1306_WriteChar+0x10c>)
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	4413      	add	r3, r2
 800493a:	b2d8      	uxtb	r0, r3
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <ssd1306_WriteChar+0x10c>)
 800493e:	885b      	ldrh	r3, [r3, #2]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4413      	add	r3, r2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	7bba      	ldrb	r2, [r7, #14]
 800494c:	4619      	mov	r1, r3
 800494e:	f7ff ff5b 	bl	8004808 <ssd1306_DrawPixel>
 8004952:	e016      	b.n	8004982 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <ssd1306_WriteChar+0x10c>)
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4413      	add	r3, r2
 8004960:	b2d8      	uxtb	r0, r3
 8004962:	4b16      	ldr	r3, [pc, #88]	; (80049bc <ssd1306_WriteChar+0x10c>)
 8004964:	885b      	ldrh	r3, [r3, #2]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	4413      	add	r3, r2
 800496e:	b2d9      	uxtb	r1, r3
 8004970:	7bbb      	ldrb	r3, [r7, #14]
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	f7ff ff43 	bl	8004808 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3301      	adds	r3, #1
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	793b      	ldrb	r3, [r7, #4]
 800498a:	461a      	mov	r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4293      	cmp	r3, r2
 8004990:	d3c5      	bcc.n	800491e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	797b      	ldrb	r3, [r7, #5]
 800499a:	461a      	mov	r2, r3
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4293      	cmp	r3, r2
 80049a0:	d3ad      	bcc.n	80048fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <ssd1306_WriteChar+0x10c>)
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	793b      	ldrb	r3, [r7, #4]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	4b03      	ldr	r3, [pc, #12]	; (80049bc <ssd1306_WriteChar+0x10c>)
 80049b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3724      	adds	r7, #36	; 0x24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}
 80049bc:	20000a44 	.word	0x20000a44

080049c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	1d38      	adds	r0, r7, #4
 80049ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80049ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80049d0:	e012      	b.n	80049f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	7818      	ldrb	r0, [r3, #0]
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	1d3a      	adds	r2, r7, #4
 80049da:	ca06      	ldmia	r2, {r1, r2}
 80049dc:	f7ff ff68 	bl	80048b0 <ssd1306_WriteChar>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d002      	beq.n	80049f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	e008      	b.n	8004a04 <ssd1306_WriteString+0x44>
        }
        str++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e8      	bne.n	80049d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	781b      	ldrb	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	460a      	mov	r2, r1
 8004a16:	71fb      	strb	r3, [r7, #7]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <ssd1306_SetCursor+0x2c>)
 8004a22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004a24:	79bb      	ldrb	r3, [r7, #6]
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <ssd1306_SetCursor+0x2c>)
 8004a2a:	805a      	strh	r2, [r3, #2]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000a44 	.word	0x20000a44

08004a3c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71bb      	strb	r3, [r7, #6]
 8004a52:	460b      	mov	r3, r1
 8004a54:	717b      	strb	r3, [r7, #5]
 8004a56:	4613      	mov	r3, r2
 8004a58:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8004a5a:	797a      	ldrb	r2, [r7, #5]
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bfb8      	it	lt
 8004a64:	425b      	neglt	r3, r3
 8004a66:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8004a68:	793a      	ldrb	r2, [r7, #4]
 8004a6a:	79bb      	ldrb	r3, [r7, #6]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	425b      	neglt	r3, r3
 8004a74:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8004a76:	79fa      	ldrb	r2, [r7, #7]
 8004a78:	797b      	ldrb	r3, [r7, #5]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d201      	bcs.n	8004a82 <ssd1306_Line+0x46>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e001      	b.n	8004a86 <ssd1306_Line+0x4a>
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8004a88:	79ba      	ldrb	r2, [r7, #6]
 8004a8a:	793b      	ldrb	r3, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d201      	bcs.n	8004a94 <ssd1306_Line+0x58>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e001      	b.n	8004a98 <ssd1306_Line+0x5c>
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8004aa2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004aa6:	7939      	ldrb	r1, [r7, #4]
 8004aa8:	797b      	ldrb	r3, [r7, #5]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff feac 	bl	8004808 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004ab0:	e024      	b.n	8004afc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004ab2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004ab6:	79b9      	ldrb	r1, [r7, #6]
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fea4 	bl	8004808 <ssd1306_DrawPixel>
        error2 = error * 2;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	425b      	negs	r3, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	dd08      	ble.n	8004ae2 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	4413      	add	r3, r2
 8004ae0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	da08      	bge.n	8004afc <ssd1306_Line+0xc0>
            error += deltaX;
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	4413      	add	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	79bb      	ldrb	r3, [r7, #6]
 8004af8:	4413      	add	r3, r2
 8004afa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004afc:	79fa      	ldrb	r2, [r7, #7]
 8004afe:	797b      	ldrb	r3, [r7, #5]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d1d6      	bne.n	8004ab2 <ssd1306_Line+0x76>
 8004b04:	79ba      	ldrb	r2, [r7, #6]
 8004b06:	793b      	ldrb	r3, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1d2      	bne.n	8004ab2 <ssd1306_Line+0x76>
        }
    }
    return;
 8004b0c:	bf00      	nop
}
 8004b0e:	3724      	adds	r7, #36	; 0x24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}

08004b14 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	71fb      	strb	r3, [r7, #7]
 8004b26:	4603      	mov	r3, r0
 8004b28:	71bb      	strb	r3, [r7, #6]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	717b      	strb	r3, [r7, #5]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004b32:	79bc      	ldrb	r4, [r7, #6]
 8004b34:	797a      	ldrb	r2, [r7, #5]
 8004b36:	79b9      	ldrb	r1, [r7, #6]
 8004b38:	79f8      	ldrb	r0, [r7, #7]
 8004b3a:	7e3b      	ldrb	r3, [r7, #24]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f7ff ff7c 	bl	8004a3c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004b44:	793c      	ldrb	r4, [r7, #4]
 8004b46:	797a      	ldrb	r2, [r7, #5]
 8004b48:	79b9      	ldrb	r1, [r7, #6]
 8004b4a:	7978      	ldrb	r0, [r7, #5]
 8004b4c:	7e3b      	ldrb	r3, [r7, #24]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4623      	mov	r3, r4
 8004b52:	f7ff ff73 	bl	8004a3c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004b56:	793c      	ldrb	r4, [r7, #4]
 8004b58:	79fa      	ldrb	r2, [r7, #7]
 8004b5a:	7939      	ldrb	r1, [r7, #4]
 8004b5c:	7978      	ldrb	r0, [r7, #5]
 8004b5e:	7e3b      	ldrb	r3, [r7, #24]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4623      	mov	r3, r4
 8004b64:	f7ff ff6a 	bl	8004a3c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004b68:	79bc      	ldrb	r4, [r7, #6]
 8004b6a:	79fa      	ldrb	r2, [r7, #7]
 8004b6c:	7939      	ldrb	r1, [r7, #4]
 8004b6e:	79f8      	ldrb	r0, [r7, #7]
 8004b70:	7e3b      	ldrb	r3, [r7, #24]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4623      	mov	r3, r4
 8004b76:	f7ff ff61 	bl	8004a3c <ssd1306_Line>

    return;
 8004b7a:	bf00      	nop
}
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd90      	pop	{r4, r7, pc}

08004b82 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	4604      	mov	r4, r0
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4623      	mov	r3, r4
 8004b92:	71fb      	strb	r3, [r7, #7]
 8004b94:	4603      	mov	r3, r0
 8004b96:	71bb      	strb	r3, [r7, #6]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	717b      	strb	r3, [r7, #5]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8004ba0:	79fa      	ldrb	r2, [r7, #7]
 8004ba2:	797b      	ldrb	r3, [r7, #5]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bf28      	it	cs
 8004ba8:	4613      	movcs	r3, r2
 8004baa:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004bac:	797a      	ldrb	r2, [r7, #5]
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bf38      	it	cc
 8004bb4:	4613      	movcc	r3, r2
 8004bb6:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004bb8:	79ba      	ldrb	r2, [r7, #6]
 8004bba:	793b      	ldrb	r3, [r7, #4]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bf28      	it	cs
 8004bc0:	4613      	movcs	r3, r2
 8004bc2:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004bc4:	793a      	ldrb	r2, [r7, #4]
 8004bc6:	79bb      	ldrb	r3, [r7, #6]
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bf38      	it	cc
 8004bcc:	4613      	movcc	r3, r2
 8004bce:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e017      	b.n	8004c06 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004bd6:	7b7b      	ldrb	r3, [r7, #13]
 8004bd8:	73bb      	strb	r3, [r7, #14]
 8004bda:	e009      	b.n	8004bf0 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004bdc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004be0:	7bf9      	ldrb	r1, [r7, #15]
 8004be2:	7bbb      	ldrb	r3, [r7, #14]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fe0f 	bl	8004808 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	3301      	adds	r3, #1
 8004bee:	73bb      	strb	r3, [r7, #14]
 8004bf0:	7bba      	ldrb	r2, [r7, #14]
 8004bf2:	7b3b      	ldrb	r3, [r7, #12]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d803      	bhi.n	8004c00 <ssd1306_FillRectangle+0x7e>
 8004bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	daed      	bge.n	8004bdc <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	3301      	adds	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	7abb      	ldrb	r3, [r7, #10]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d803      	bhi.n	8004c16 <ssd1306_FillRectangle+0x94>
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b3f      	cmp	r3, #63	; 0x3f
 8004c12:	d9e0      	bls.n	8004bd6 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
}
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}

08004c1e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004c28:	2381      	movs	r3, #129	; 0x81
 8004c2a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd0e 	bl	8004650 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fd0a 	bl	8004650 <ssd1306_WriteCommand>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004c54:	23af      	movs	r3, #175	; 0xaf
 8004c56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <ssd1306_SetDisplayOn+0x38>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	715a      	strb	r2, [r3, #5]
 8004c5e:	e004      	b.n	8004c6a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004c60:	23ae      	movs	r3, #174	; 0xae
 8004c62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <ssd1306_SetDisplayOn+0x38>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fcef 	bl	8004650 <ssd1306_WriteCommand>
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000a44 	.word	0x20000a44

08004c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_MspInit+0x4c>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <HAL_MspInit+0x4c>)
 8004c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c94:	6453      	str	r3, [r2, #68]	; 0x44
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_MspInit+0x4c>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <HAL_MspInit+0x4c>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <HAL_MspInit+0x4c>)
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_MspInit+0x4c>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800

08004cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cd4:	e7fe      	b.n	8004cd4 <NMI_Handler+0x4>

08004cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cda:	e7fe      	b.n	8004cda <HardFault_Handler+0x4>

08004cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ce0:	e7fe      	b.n	8004ce0 <MemManage_Handler+0x4>

08004ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ce6:	e7fe      	b.n	8004ce6 <BusFault_Handler+0x4>

08004ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cec:	e7fe      	b.n	8004cec <UsageFault_Handler+0x4>

08004cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d1c:	f000 fc5c 	bl	80055d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d20:	bf00      	nop
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DS18B20_Pin_Pin);
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f001 fbe5 	bl	80064f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d38:	4802      	ldr	r0, [pc, #8]	; (8004d44 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004d3a:	f003 fe21 	bl	8008980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000a50 	.word	0x20000a50

08004d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d4c:	4802      	ldr	r0, [pc, #8]	; (8004d58 <TIM2_IRQHandler+0x10>)
 8004d4e:	f003 fe17 	bl	8008980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000a98 	.word	0x20000a98

08004d5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d60:	4802      	ldr	r0, [pc, #8]	; (8004d6c <TIM4_IRQHandler+0x10>)
 8004d62:	f003 fe0d 	bl	8008980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000b28 	.word	0x20000b28

08004d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d74:	4802      	ldr	r0, [pc, #8]	; (8004d80 <USART1_IRQHandler+0x10>)
 8004d76:	f004 fe43 	bl	8009a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000b70 	.word	0x20000b70

08004d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return 1;
 8004d88:	2301      	movs	r3, #1
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <_kill>:

int _kill(int pid, int sig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d9e:	f007 fa2f 	bl	800c200 <__errno>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2216      	movs	r2, #22
 8004da6:	601a      	str	r2, [r3, #0]
  return -1;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_exit>:

void _exit (int status)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ffe7 	bl	8004d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dc6:	e7fe      	b.n	8004dc6 <_exit+0x12>

08004dc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e00a      	b.n	8004df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dda:	f3af 8000 	nop.w
 8004dde:	4601      	mov	r1, r0
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	60ba      	str	r2, [r7, #8]
 8004de6:	b2ca      	uxtb	r2, r1
 8004de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	3301      	adds	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	dbf0      	blt.n	8004dda <_read+0x12>
  }

  return len;
 8004df8:	687b      	ldr	r3, [r7, #4]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e009      	b.n	8004e28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	60ba      	str	r2, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	3301      	adds	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	dbf1      	blt.n	8004e14 <_write+0x12>
  }
  return len;
 8004e30:	687b      	ldr	r3, [r7, #4]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <_close>:

int _close(int file)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e62:	605a      	str	r2, [r3, #4]
  return 0;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <_isatty>:

int _isatty(int file)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e7a:	2301      	movs	r3, #1
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eac:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <_sbrk+0x5c>)
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <_sbrk+0x60>)
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eb8:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <_sbrk+0x64>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <_sbrk+0x64>)
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <_sbrk+0x68>)
 8004ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <_sbrk+0x64>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d207      	bcs.n	8004ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ed4:	f007 f994 	bl	800c200 <__errno>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	220c      	movs	r2, #12
 8004edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e009      	b.n	8004ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <_sbrk+0x64>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <_sbrk+0x64>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <_sbrk+0x64>)
 8004ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20020000 	.word	0x20020000
 8004f04:	00000400 	.word	0x00000400
 8004f08:	20000a4c 	.word	0x20000a4c
 8004f0c:	20000d08 	.word	0x20000d08

08004f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <SystemInit+0x20>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <SystemInit+0x20>)
 8004f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	609a      	str	r2, [r3, #8]
 8004f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f48:	463b      	mov	r3, r7
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f50:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f52:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <MX_TIM1_Init+0x9c>)
 8004f54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f58:	2263      	movs	r2, #99	; 0x63
 8004f5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f7c:	4813      	ldr	r0, [pc, #76]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f7e:	f003 f97f 	bl	8008280 <HAL_TIM_Base_Init>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004f88:	f7fe ffb8 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	4619      	mov	r1, r3
 8004f98:	480c      	ldr	r0, [pc, #48]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004f9a:	f003 ff57 	bl	8008e4c <HAL_TIM_ConfigClockSource>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004fa4:	f7fe ffaa 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <MX_TIM1_Init+0x98>)
 8004fb6:	f004 fc23 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004fc0:	f7fe ff9c 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004fc4:	bf00      	nop
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000a50 	.word	0x20000a50
 8004fd0:	40010000 	.word	0x40010000

08004fd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fda:	f107 0318 	add.w	r3, r7, #24
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005008:	2200      	movs	r2, #0
 800500a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500c:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <MX_TIM2_Init+0xf8>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69355;
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005014:	4a2e      	ldr	r2, [pc, #184]	; (80050d0 <MX_TIM2_Init+0xfc>)
 8005016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <MX_TIM2_Init+0xf8>)
 800501a:	2200      	movs	r2, #0
 800501c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800501e:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005024:	4829      	ldr	r0, [pc, #164]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005026:	f003 f92b 	bl	8008280 <HAL_TIM_Base_Init>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8005030:	f7fe ff64 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005038:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800503a:	f107 0318 	add.w	r3, r7, #24
 800503e:	4619      	mov	r1, r3
 8005040:	4822      	ldr	r0, [pc, #136]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005042:	f003 ff03 	bl	8008e4c <HAL_TIM_ConfigClockSource>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800504c:	f7fe ff56 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005050:	481e      	ldr	r0, [pc, #120]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005052:	f003 fb21 	bl	8008698 <HAL_TIM_IC_Init>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800505c:	f7fe ff4e 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005068:	f107 0310 	add.w	r3, r7, #16
 800506c:	4619      	mov	r1, r3
 800506e:	4817      	ldr	r0, [pc, #92]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005070:	f004 fbc6 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800507a:	f7fe ff3f 	bl	8003efc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800507e:	2300      	movs	r3, #0
 8005080:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005082:	2301      	movs	r3, #1
 8005084:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800508e:	463b      	mov	r3, r7
 8005090:	2200      	movs	r2, #0
 8005092:	4619      	mov	r1, r3
 8005094:	480d      	ldr	r0, [pc, #52]	; (80050cc <MX_TIM2_Init+0xf8>)
 8005096:	f003 fd7b 	bl	8008b90 <HAL_TIM_IC_ConfigChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80050a0:	f7fe ff2c 	bl	8003efc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80050a4:	2302      	movs	r3, #2
 80050a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80050a8:	2302      	movs	r3, #2
 80050aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80050ac:	463b      	mov	r3, r7
 80050ae:	2204      	movs	r2, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4806      	ldr	r0, [pc, #24]	; (80050cc <MX_TIM2_Init+0xf8>)
 80050b4:	f003 fd6c 	bl	8008b90 <HAL_TIM_IC_ConfigChannel>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80050be:	f7fe ff1d 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80050c2:	bf00      	nop
 80050c4:	3728      	adds	r7, #40	; 0x28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000a98 	.word	0x20000a98
 80050d0:	00010eeb 	.word	0x00010eeb

080050d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050da:	f107 0320 	add.w	r3, r7, #32
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	60da      	str	r2, [r3, #12]
 80050f0:	611a      	str	r2, [r3, #16]
 80050f2:	615a      	str	r2, [r3, #20]
 80050f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80050f6:	4b21      	ldr	r3, [pc, #132]	; (800517c <MX_TIM3_Init+0xa8>)
 80050f8:	4a21      	ldr	r2, [pc, #132]	; (8005180 <MX_TIM3_Init+0xac>)
 80050fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <MX_TIM3_Init+0xa8>)
 80050fe:	2209      	movs	r2, #9
 8005100:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <MX_TIM3_Init+0xa8>)
 8005104:	2200      	movs	r2, #0
 8005106:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8005108:	4b1c      	ldr	r3, [pc, #112]	; (800517c <MX_TIM3_Init+0xa8>)
 800510a:	2263      	movs	r2, #99	; 0x63
 800510c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800510e:	4b1b      	ldr	r3, [pc, #108]	; (800517c <MX_TIM3_Init+0xa8>)
 8005110:	2200      	movs	r2, #0
 8005112:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <MX_TIM3_Init+0xa8>)
 8005116:	2200      	movs	r2, #0
 8005118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800511a:	4818      	ldr	r0, [pc, #96]	; (800517c <MX_TIM3_Init+0xa8>)
 800511c:	f003 f9bc 	bl	8008498 <HAL_TIM_PWM_Init>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005126:	f7fe fee9 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005132:	f107 0320 	add.w	r3, r7, #32
 8005136:	4619      	mov	r1, r3
 8005138:	4810      	ldr	r0, [pc, #64]	; (800517c <MX_TIM3_Init+0xa8>)
 800513a:	f004 fb61 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005144:	f7fe feda 	bl	8003efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005148:	2360      	movs	r3, #96	; 0x60
 800514a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	2204      	movs	r2, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4807      	ldr	r0, [pc, #28]	; (800517c <MX_TIM3_Init+0xa8>)
 8005160:	f003 fdb2 	bl	8008cc8 <HAL_TIM_PWM_ConfigChannel>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800516a:	f7fe fec7 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800516e:	4803      	ldr	r0, [pc, #12]	; (800517c <MX_TIM3_Init+0xa8>)
 8005170:	f000 f902 	bl	8005378 <HAL_TIM_MspPostInit>

}
 8005174:	bf00      	nop
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20000ae0 	.word	0x20000ae0
 8005180:	40000400 	.word	0x40000400

08005184 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005198:	463b      	mov	r3, r7
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80051a0:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <MX_TIM4_Init+0x94>)
 80051a2:	4a1e      	ldr	r2, [pc, #120]	; (800521c <MX_TIM4_Init+0x98>)
 80051a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80051a6:	4b1c      	ldr	r3, [pc, #112]	; (8005218 <MX_TIM4_Init+0x94>)
 80051a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80051ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ae:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <MX_TIM4_Init+0x94>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80051b4:	4b18      	ldr	r3, [pc, #96]	; (8005218 <MX_TIM4_Init+0x94>)
 80051b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051bc:	4b16      	ldr	r3, [pc, #88]	; (8005218 <MX_TIM4_Init+0x94>)
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <MX_TIM4_Init+0x94>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80051c8:	4813      	ldr	r0, [pc, #76]	; (8005218 <MX_TIM4_Init+0x94>)
 80051ca:	f003 f859 	bl	8008280 <HAL_TIM_Base_Init>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80051d4:	f7fe fe92 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80051de:	f107 0308 	add.w	r3, r7, #8
 80051e2:	4619      	mov	r1, r3
 80051e4:	480c      	ldr	r0, [pc, #48]	; (8005218 <MX_TIM4_Init+0x94>)
 80051e6:	f003 fe31 	bl	8008e4c <HAL_TIM_ConfigClockSource>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80051f0:	f7fe fe84 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80051fc:	463b      	mov	r3, r7
 80051fe:	4619      	mov	r1, r3
 8005200:	4805      	ldr	r0, [pc, #20]	; (8005218 <MX_TIM4_Init+0x94>)
 8005202:	f004 fafd 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800520c:	f7fe fe76 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000b28 	.word	0x20000b28
 800521c:	40000800 	.word	0x40000800

08005220 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	; 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005228:	f107 031c 	add.w	r3, r7, #28
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	60da      	str	r2, [r3, #12]
 8005236:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a39      	ldr	r2, [pc, #228]	; (8005324 <HAL_TIM_Base_MspInit+0x104>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d116      	bne.n	8005270 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	4b38      	ldr	r3, [pc, #224]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 8005248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524a:	4a37      	ldr	r2, [pc, #220]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	6453      	str	r3, [r2, #68]	; 0x44
 8005252:	4b35      	ldr	r3, [pc, #212]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	2018      	movs	r0, #24
 8005264:	f000 fec9 	bl	8005ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005268:	2018      	movs	r0, #24
 800526a:	f000 fee2 	bl	8006032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800526e:	e055      	b.n	800531c <HAL_TIM_Base_MspInit+0xfc>
  else if(tim_baseHandle->Instance==TIM2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d135      	bne.n	80052e6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a29      	ldr	r2, [pc, #164]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	4b23      	ldr	r3, [pc, #140]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	4a22      	ldr	r2, [pc, #136]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6313      	str	r3, [r2, #48]	; 0x30
 80052a6:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH1_Pin;
 80052b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b8:	2302      	movs	r3, #2
 80052ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80052bc:	2302      	movs	r3, #2
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c0:	2303      	movs	r3, #3
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052c4:	2301      	movs	r3, #1
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 80052c8:	f107 031c 	add.w	r3, r7, #28
 80052cc:	4619      	mov	r1, r3
 80052ce:	4817      	ldr	r0, [pc, #92]	; (800532c <HAL_TIM_Base_MspInit+0x10c>)
 80052d0:	f000 ff5c 	bl	800618c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2100      	movs	r1, #0
 80052d8:	201c      	movs	r0, #28
 80052da:	f000 fe8e 	bl	8005ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052de:	201c      	movs	r0, #28
 80052e0:	f000 fea7 	bl	8006032 <HAL_NVIC_EnableIRQ>
}
 80052e4:	e01a      	b.n	800531c <HAL_TIM_Base_MspInit+0xfc>
  else if(tim_baseHandle->Instance==TIM4)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a11      	ldr	r2, [pc, #68]	; (8005330 <HAL_TIM_Base_MspInit+0x110>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d115      	bne.n	800531c <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 80052fa:	f043 0304 	orr.w	r3, r3, #4
 80052fe:	6413      	str	r3, [r2, #64]	; 0x40
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_TIM_Base_MspInit+0x108>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800530c:	2200      	movs	r2, #0
 800530e:	2100      	movs	r1, #0
 8005310:	201e      	movs	r0, #30
 8005312:	f000 fe72 	bl	8005ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005316:	201e      	movs	r0, #30
 8005318:	f000 fe8b 	bl	8006032 <HAL_NVIC_EnableIRQ>
}
 800531c:	bf00      	nop
 800531e:	3730      	adds	r7, #48	; 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40010000 	.word	0x40010000
 8005328:	40023800 	.word	0x40023800
 800532c:	40020000 	.word	0x40020000
 8005330:	40000800 	.word	0x40000800

08005334 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <HAL_TIM_PWM_MspInit+0x3c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10d      	bne.n	8005362 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_TIM_PWM_MspInit+0x40>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <HAL_TIM_PWM_MspInit+0x40>)
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_TIM_PWM_MspInit+0x40>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40000400 	.word	0x40000400
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005380:	f107 030c 	add.w	r3, r7, #12
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <HAL_TIM_MspPostInit+0x68>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d11d      	bne.n	80053d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_TIM_MspPostInit+0x6c>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <HAL_TIM_MspPostInit+0x6c>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <HAL_TIM_MspPostInit+0x6c>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH2_Pin;
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ba:	2302      	movs	r3, #2
 80053bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053c6:	2302      	movs	r3, #2
 80053c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_CH2_GPIO_Port, &GPIO_InitStruct);
 80053ca:	f107 030c 	add.w	r3, r7, #12
 80053ce:	4619      	mov	r1, r3
 80053d0:	4805      	ldr	r0, [pc, #20]	; (80053e8 <HAL_TIM_MspPostInit+0x70>)
 80053d2:	f000 fedb 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80053d6:	bf00      	nop
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40020000 	.word	0x40020000

080053ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <MX_USART1_UART_Init+0x50>)
 80053f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 80053f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80053fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 8005400:	2200      	movs	r2, #0
 8005402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 8005406:	2200      	movs	r2, #0
 8005408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 8005412:	220c      	movs	r2, #12
 8005414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 800541e:	2200      	movs	r2, #0
 8005420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005422:	4805      	ldr	r0, [pc, #20]	; (8005438 <MX_USART1_UART_Init+0x4c>)
 8005424:	f004 fa6e 	bl	8009904 <HAL_UART_Init>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800542e:	f7fe fd65 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000b70 	.word	0x20000b70
 800543c:	40011000 	.word	0x40011000

08005440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_UART_MspInit+0x94>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d134      	bne.n	80054cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_UART_MspInit+0x98>)
 800546c:	f043 0310 	orr.w	r3, r3, #16
 8005470:	6453      	str	r3, [r2, #68]	; 0x44
 8005472:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800549a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800549e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a8:	2303      	movs	r3, #3
 80054aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054ac:	2307      	movs	r3, #7
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4619      	mov	r1, r3
 80054b6:	4809      	ldr	r0, [pc, #36]	; (80054dc <HAL_UART_MspInit+0x9c>)
 80054b8:	f000 fe68 	bl	800618c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054bc:	2200      	movs	r2, #0
 80054be:	2100      	movs	r1, #0
 80054c0:	2025      	movs	r0, #37	; 0x25
 80054c2:	f000 fd9a 	bl	8005ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054c6:	2025      	movs	r0, #37	; 0x25
 80054c8:	f000 fdb3 	bl	8006032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80054cc:	bf00      	nop
 80054ce:	3728      	adds	r7, #40	; 0x28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40011000 	.word	0x40011000
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40020000 	.word	0x40020000

080054e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 80054e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054e4:	480d      	ldr	r0, [pc, #52]	; (800551c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054e6:	490e      	ldr	r1, [pc, #56]	; (8005520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054e8:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054ec:	e002      	b.n	80054f4 <LoopCopyDataInit>

080054ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054f2:	3304      	adds	r3, #4

080054f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054f8:	d3f9      	bcc.n	80054ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054fa:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054fc:	4c0b      	ldr	r4, [pc, #44]	; (800552c <LoopFillZerobss+0x26>)
  movs r3, #0
 80054fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005500:	e001      	b.n	8005506 <LoopFillZerobss>

08005502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005504:	3204      	adds	r2, #4

08005506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005508:	d3fb      	bcc.n	8005502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800550a:	f7ff fd01 	bl	8004f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800550e:	f006 fe7d 	bl	800c20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005512:	f7fd fea1 	bl	8003258 <main>
  bx  lr    
 8005516:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8005518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800551c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005520:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005524:	080110dc 	.word	0x080110dc
  ldr r2, =_sbss
 8005528:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800552c:	20000d04 	.word	0x20000d04

08005530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005530:	e7fe      	b.n	8005530 <ADC_IRQHandler>
	...

08005534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005538:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_Init+0x40>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <HAL_Init+0x40>)
 800553e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_Init+0x40>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <HAL_Init+0x40>)
 800554a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800554e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_Init+0x40>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a07      	ldr	r2, [pc, #28]	; (8005574 <HAL_Init+0x40>)
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800555c:	2003      	movs	r0, #3
 800555e:	f000 fd41 	bl	8005fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005562:	200f      	movs	r0, #15
 8005564:	f000 f808 	bl	8005578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005568:	f7ff fb8a 	bl	8004c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40023c00 	.word	0x40023c00

08005578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005580:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_InitTick+0x54>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_InitTick+0x58>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800558e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005592:	fbb2 f3f3 	udiv	r3, r2, r3
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fd59 	bl	800604e <HAL_SYSTICK_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e00e      	b.n	80055c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d80a      	bhi.n	80055c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055ac:	2200      	movs	r2, #0
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	f000 fd21 	bl	8005ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055b8:	4a06      	ldr	r2, [pc, #24]	; (80055d4 <HAL_InitTick+0x5c>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	2000001c 	.word	0x2000001c
 80055d0:	20000024 	.word	0x20000024
 80055d4:	20000020 	.word	0x20000020

080055d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_IncTick+0x20>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_IncTick+0x24>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	4a04      	ldr	r2, [pc, #16]	; (80055fc <HAL_IncTick+0x24>)
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000024 	.word	0x20000024
 80055fc:	20000bb4 	.word	0x20000bb4

08005600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return uwTick;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_GetTick+0x14>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000bb4 	.word	0x20000bb4

08005618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7ff ffee 	bl	8005600 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d005      	beq.n	800563e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_Delay+0x44>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800563e:	bf00      	nop
 8005640:	f7ff ffde 	bl	8005600 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d8f7      	bhi.n	8005640 <HAL_Delay+0x28>
  {
  }
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000024 	.word	0x20000024

08005660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e033      	b.n	80056de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc fa66 	bl	8001b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	d118      	bne.n	80056d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056a6:	f023 0302 	bic.w	r3, r3, #2
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 faca 	bl	8005c4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
 80056ce:	e001      	b.n	80056d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_ADC_Start+0x1a>
 80056fe:	2302      	movs	r3, #2
 8005700:	e097      	b.n	8005832 <HAL_ADC_Start+0x14a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d018      	beq.n	800574a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005728:	4b45      	ldr	r3, [pc, #276]	; (8005840 <HAL_ADC_Start+0x158>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a45      	ldr	r2, [pc, #276]	; (8005844 <HAL_ADC_Start+0x15c>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	0c9a      	lsrs	r2, r3, #18
 8005734:	4613      	mov	r3, r2
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	4413      	add	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800573c:	e002      	b.n	8005744 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3b01      	subs	r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f9      	bne.n	800573e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d15f      	bne.n	8005818 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005782:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d106      	bne.n	80057a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	f023 0206 	bic.w	r2, r3, #6
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44
 80057a4:	e002      	b.n	80057ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <HAL_ADC_Start+0x160>)
 80057b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10f      	bne.n	80057ee <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d129      	bne.n	8005830 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057ea:	609a      	str	r2, [r3, #8]
 80057ec:	e020      	b.n	8005830 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a16      	ldr	r2, [pc, #88]	; (800584c <HAL_ADC_Start+0x164>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d11b      	bne.n	8005830 <HAL_ADC_Start+0x148>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d114      	bne.n	8005830 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	e00b      	b.n	8005830 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f043 0210 	orr.w	r2, r3, #16
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	f043 0201 	orr.w	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	2000001c 	.word	0x2000001c
 8005844:	431bde83 	.word	0x431bde83
 8005848:	40012300 	.word	0x40012300
 800584c:	40012000 	.word	0x40012000

08005850 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_ADC_Stop+0x16>
 8005862:	2302      	movs	r3, #2
 8005864:	e021      	b.n	80058aa <HAL_ADC_Stop+0x5a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d2:	d113      	bne.n	80058fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e2:	d10b      	bne.n	80058fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e063      	b.n	80059c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80058fc:	f7ff fe80 	bl	8005600 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005902:	e021      	b.n	8005948 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d01d      	beq.n	8005948 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_ADC_PollForConversion+0x6c>
 8005912:	f7ff fe75 	bl	8005600 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d212      	bcs.n	8005948 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d00b      	beq.n	8005948 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e03d      	b.n	80059c4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d1d6      	bne.n	8005904 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f06f 0212 	mvn.w	r2, #18
 800595e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d123      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11f      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800598c:	2b00      	cmp	r3, #0
 800598e:	d006      	beq.n	800599e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800599a:	2b00      	cmp	r3, #0
 800599c:	d111      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x1c>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e113      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x244>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	d925      	bls.n	8005a60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	3b1e      	subs	r3, #30
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43da      	mvns	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	400a      	ands	r2, r1
 8005a38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4403      	add	r3, r0
 8005a52:	3b1e      	subs	r3, #30
 8005a54:	409a      	lsls	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	e022      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6919      	ldr	r1, [r3, #16]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4613      	mov	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	2207      	movs	r2, #7
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	400a      	ands	r2, r1
 8005a82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6919      	ldr	r1, [r3, #16]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4618      	mov	r0, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4403      	add	r3, r0
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d824      	bhi.n	8005af8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	3b05      	subs	r3, #5
 8005ac0:	221f      	movs	r2, #31
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43da      	mvns	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	400a      	ands	r2, r1
 8005ace:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4618      	mov	r0, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3b05      	subs	r3, #5
 8005aea:	fa00 f203 	lsl.w	r2, r0, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34
 8005af6:	e04c      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b0c      	cmp	r3, #12
 8005afe:	d824      	bhi.n	8005b4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	3b23      	subs	r3, #35	; 0x23
 8005b12:	221f      	movs	r2, #31
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43da      	mvns	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	400a      	ands	r2, r1
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4618      	mov	r0, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	3b23      	subs	r3, #35	; 0x23
 8005b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
 8005b48:	e023      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	3b41      	subs	r3, #65	; 0x41
 8005b5c:	221f      	movs	r2, #31
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	43da      	mvns	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	400a      	ands	r2, r1
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4618      	mov	r0, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	3b41      	subs	r3, #65	; 0x41
 8005b86:	fa00 f203 	lsl.w	r2, r0, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <HAL_ADC_ConfigChannel+0x250>)
 8005b94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <HAL_ADC_ConfigChannel+0x254>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x1d8>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b12      	cmp	r3, #18
 8005ba6:	d10b      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	; (8005c3c <HAL_ADC_ConfigChannel+0x254>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d12b      	bne.n	8005c22 <HAL_ADC_ConfigChannel+0x23a>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_ADC_ConfigChannel+0x258>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x1f4>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b11      	cmp	r3, #17
 8005bda:	d122      	bne.n	8005c22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <HAL_ADC_ConfigChannel+0x258>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d111      	bne.n	8005c22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_ADC_ConfigChannel+0x25c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <HAL_ADC_ConfigChannel+0x260>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	0c9a      	lsrs	r2, r3, #18
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c14:	e002      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f9      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40012300 	.word	0x40012300
 8005c3c:	40012000 	.word	0x40012000
 8005c40:	10000012 	.word	0x10000012
 8005c44:	2000001c 	.word	0x2000001c
 8005c48:	431bde83 	.word	0x431bde83

08005c4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c54:	4b79      	ldr	r3, [pc, #484]	; (8005e3c <ADC_Init+0x1f0>)
 8005c56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	021a      	lsls	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6859      	ldr	r1, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6899      	ldr	r1, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	4a58      	ldr	r2, [pc, #352]	; (8005e40 <ADC_Init+0x1f4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d022      	beq.n	8005d2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6899      	ldr	r1, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6899      	ldr	r1, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	e00f      	b.n	8005d4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0202 	bic.w	r2, r2, #2
 8005d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6899      	ldr	r1, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	7e1b      	ldrb	r3, [r3, #24]
 8005d64:	005a      	lsls	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01b      	beq.n	8005db0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	3b01      	subs	r3, #1
 8005da4:	035a      	lsls	r2, r3, #13
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	e007      	b.n	8005dc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	051a      	lsls	r2, r3, #20
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6899      	ldr	r1, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e02:	025a      	lsls	r2, r3, #9
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6899      	ldr	r1, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	029a      	lsls	r2, r3, #10
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012300 	.word	0x40012300
 8005e40:	0f000001 	.word	0x0f000001

08005e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e60:	4013      	ands	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e76:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	60d3      	str	r3, [r2, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f003 0307 	and.w	r3, r3, #7
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db0b      	blt.n	8005ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <__NVIC_EnableIRQ+0x38>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2001      	movs	r0, #1
 8005eca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	e000e100 	.word	0xe000e100

08005ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	6039      	str	r1, [r7, #0]
 8005eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	db0a      	blt.n	8005f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	490c      	ldr	r1, [pc, #48]	; (8005f30 <__NVIC_SetPriority+0x4c>)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	0112      	lsls	r2, r2, #4
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	440b      	add	r3, r1
 8005f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f0c:	e00a      	b.n	8005f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <__NVIC_SetPriority+0x50>)
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	3b04      	subs	r3, #4
 8005f1c:	0112      	lsls	r2, r2, #4
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	440b      	add	r3, r1
 8005f22:	761a      	strb	r2, [r3, #24]
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	e000e100 	.word	0xe000e100
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b089      	sub	sp, #36	; 0x24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f1c3 0307 	rsb	r3, r3, #7
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	bf28      	it	cs
 8005f56:	2304      	movcs	r3, #4
 8005f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d902      	bls.n	8005f68 <NVIC_EncodePriority+0x30>
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3b03      	subs	r3, #3
 8005f66:	e000      	b.n	8005f6a <NVIC_EncodePriority+0x32>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	43da      	mvns	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f80:	f04f 31ff 	mov.w	r1, #4294967295
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	43d9      	mvns	r1, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f90:	4313      	orrs	r3, r2
         );
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3724      	adds	r7, #36	; 0x24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fb0:	d301      	bcc.n	8005fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e00f      	b.n	8005fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <SysTick_Config+0x40>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fbe:	210f      	movs	r1, #15
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	f7ff ff8e 	bl	8005ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <SysTick_Config+0x40>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <SysTick_Config+0x40>)
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	e000e010 	.word	0xe000e010

08005fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ff29 	bl	8005e44 <__NVIC_SetPriorityGrouping>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	4603      	mov	r3, r0
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800600c:	f7ff ff3e 	bl	8005e8c <__NVIC_GetPriorityGrouping>
 8006010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	6978      	ldr	r0, [r7, #20]
 8006018:	f7ff ff8e 	bl	8005f38 <NVIC_EncodePriority>
 800601c:	4602      	mov	r2, r0
 800601e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ff5d 	bl	8005ee4 <__NVIC_SetPriority>
}
 800602a:	bf00      	nop
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800603c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff ff31 	bl	8005ea8 <__NVIC_EnableIRQ>
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ffa2 	bl	8005fa0 <SysTick_Config>
 800605c:	4603      	mov	r3, r0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006074:	f7ff fac4 	bl	8005600 <HAL_GetTick>
 8006078:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d008      	beq.n	8006098 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e052      	b.n	800613e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0216 	bic.w	r2, r2, #22
 80060a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <HAL_DMA_Abort+0x62>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0208 	bic.w	r2, r2, #8
 80060d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060e8:	e013      	b.n	8006112 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ea:	f7ff fa89 	bl	8005600 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	d90c      	bls.n	8006112 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2203      	movs	r2, #3
 8006102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e015      	b.n	800613e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e4      	bne.n	80060ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	223f      	movs	r2, #63	; 0x3f
 8006126:	409a      	lsls	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d004      	beq.n	8006164 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e00c      	b.n	800617e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2205      	movs	r2, #5
 8006168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800618c:	b480      	push	{r7}
 800618e:	b089      	sub	sp, #36	; 0x24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	e159      	b.n	800645c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061a8:	2201      	movs	r2, #1
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4013      	ands	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	f040 8148 	bne.w	8006456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d005      	beq.n	80061de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d130      	bne.n	8006240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	2203      	movs	r2, #3
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4013      	ands	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006214:	2201      	movs	r2, #1
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4013      	ands	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	f003 0201 	and.w	r2, r3, #1
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	2b03      	cmp	r3, #3
 800624a:	d017      	beq.n	800627c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	2203      	movs	r2, #3
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d123      	bne.n	80062d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	08da      	lsrs	r2, r3, #3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3208      	adds	r2, #8
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	220f      	movs	r2, #15
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	43db      	mvns	r3, r3
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4013      	ands	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	08da      	lsrs	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3208      	adds	r2, #8
 80062ca:	69b9      	ldr	r1, [r7, #24]
 80062cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	2203      	movs	r2, #3
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 0203 	and.w	r2, r3, #3
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a2 	beq.w	8006456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	4b57      	ldr	r3, [pc, #348]	; (8006474 <HAL_GPIO_Init+0x2e8>)
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	4a56      	ldr	r2, [pc, #344]	; (8006474 <HAL_GPIO_Init+0x2e8>)
 800631c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006320:	6453      	str	r3, [r2, #68]	; 0x44
 8006322:	4b54      	ldr	r3, [pc, #336]	; (8006474 <HAL_GPIO_Init+0x2e8>)
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800632e:	4a52      	ldr	r2, [pc, #328]	; (8006478 <HAL_GPIO_Init+0x2ec>)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	3302      	adds	r3, #2
 8006336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	220f      	movs	r2, #15
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43db      	mvns	r3, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4013      	ands	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a49      	ldr	r2, [pc, #292]	; (800647c <HAL_GPIO_Init+0x2f0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d019      	beq.n	800638e <HAL_GPIO_Init+0x202>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a48      	ldr	r2, [pc, #288]	; (8006480 <HAL_GPIO_Init+0x2f4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_GPIO_Init+0x1fe>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a47      	ldr	r2, [pc, #284]	; (8006484 <HAL_GPIO_Init+0x2f8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00d      	beq.n	8006386 <HAL_GPIO_Init+0x1fa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a46      	ldr	r2, [pc, #280]	; (8006488 <HAL_GPIO_Init+0x2fc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d007      	beq.n	8006382 <HAL_GPIO_Init+0x1f6>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a45      	ldr	r2, [pc, #276]	; (800648c <HAL_GPIO_Init+0x300>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <HAL_GPIO_Init+0x1f2>
 800637a:	2304      	movs	r3, #4
 800637c:	e008      	b.n	8006390 <HAL_GPIO_Init+0x204>
 800637e:	2307      	movs	r3, #7
 8006380:	e006      	b.n	8006390 <HAL_GPIO_Init+0x204>
 8006382:	2303      	movs	r3, #3
 8006384:	e004      	b.n	8006390 <HAL_GPIO_Init+0x204>
 8006386:	2302      	movs	r3, #2
 8006388:	e002      	b.n	8006390 <HAL_GPIO_Init+0x204>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_GPIO_Init+0x204>
 800638e:	2300      	movs	r3, #0
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	f002 0203 	and.w	r2, r2, #3
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	4093      	lsls	r3, r2
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063a0:	4935      	ldr	r1, [pc, #212]	; (8006478 <HAL_GPIO_Init+0x2ec>)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	3302      	adds	r3, #2
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063ae:	4b38      	ldr	r3, [pc, #224]	; (8006490 <HAL_GPIO_Init+0x304>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063d2:	4a2f      	ldr	r2, [pc, #188]	; (8006490 <HAL_GPIO_Init+0x304>)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063d8:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <HAL_GPIO_Init+0x304>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063fc:	4a24      	ldr	r2, [pc, #144]	; (8006490 <HAL_GPIO_Init+0x304>)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <HAL_GPIO_Init+0x304>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	43db      	mvns	r3, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4013      	ands	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <HAL_GPIO_Init+0x304>)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800642c:	4b18      	ldr	r3, [pc, #96]	; (8006490 <HAL_GPIO_Init+0x304>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <HAL_GPIO_Init+0x304>)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3301      	adds	r3, #1
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	f67f aea2 	bls.w	80061a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3724      	adds	r7, #36	; 0x24
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	40013800 	.word	0x40013800
 800647c:	40020000 	.word	0x40020000
 8006480:	40020400 	.word	0x40020400
 8006484:	40020800 	.word	0x40020800
 8006488:	40020c00 	.word	0x40020c00
 800648c:	40021000 	.word	0x40021000
 8006490:	40013c00 	.word	0x40013c00

08006494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	887b      	ldrh	r3, [r7, #2]
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
 80064b0:	e001      	b.n	80064b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	807b      	strh	r3, [r7, #2]
 80064d0:	4613      	mov	r3, r2
 80064d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064d4:	787b      	ldrb	r3, [r7, #1]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064da:	887a      	ldrh	r2, [r7, #2]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064e0:	e003      	b.n	80064ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064e2:	887b      	ldrh	r3, [r7, #2]
 80064e4:	041a      	lsls	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	619a      	str	r2, [r3, #24]
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006502:	4b08      	ldr	r3, [pc, #32]	; (8006524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	4013      	ands	r3, r2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800650e:	4a05      	ldr	r2, [pc, #20]	; (8006524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	4618      	mov	r0, r3
 8006518:	f7fa ff1a 	bl	8001350 <HAL_GPIO_EXTI_Callback>
  }
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40013c00 	.word	0x40013c00

08006528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e12b      	b.n	8006792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fc fd78 	bl	8003044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800657a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800658a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800658c:	f001 fe50 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 8006590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4a81      	ldr	r2, [pc, #516]	; (800679c <HAL_I2C_Init+0x274>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d807      	bhi.n	80065ac <HAL_I2C_Init+0x84>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a80      	ldr	r2, [pc, #512]	; (80067a0 <HAL_I2C_Init+0x278>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	bf94      	ite	ls
 80065a4:	2301      	movls	r3, #1
 80065a6:	2300      	movhi	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e006      	b.n	80065ba <HAL_I2C_Init+0x92>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_I2C_Init+0x27c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bf94      	ite	ls
 80065b4:	2301      	movls	r3, #1
 80065b6:	2300      	movhi	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e0e7      	b.n	8006792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a78      	ldr	r2, [pc, #480]	; (80067a8 <HAL_I2C_Init+0x280>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	0c9b      	lsrs	r3, r3, #18
 80065cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a6a      	ldr	r2, [pc, #424]	; (800679c <HAL_I2C_Init+0x274>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d802      	bhi.n	80065fc <HAL_I2C_Init+0xd4>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	3301      	adds	r3, #1
 80065fa:	e009      	b.n	8006610 <HAL_I2C_Init+0xe8>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006602:	fb02 f303 	mul.w	r3, r2, r3
 8006606:	4a69      	ldr	r2, [pc, #420]	; (80067ac <HAL_I2C_Init+0x284>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	3301      	adds	r3, #1
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	430b      	orrs	r3, r1
 8006616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	495c      	ldr	r1, [pc, #368]	; (800679c <HAL_I2C_Init+0x274>)
 800662c:	428b      	cmp	r3, r1
 800662e:	d819      	bhi.n	8006664 <HAL_I2C_Init+0x13c>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1e59      	subs	r1, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	fbb1 f3f3 	udiv	r3, r1, r3
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006644:	400b      	ands	r3, r1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_I2C_Init+0x138>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1e59      	subs	r1, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	fbb1 f3f3 	udiv	r3, r1, r3
 8006658:	3301      	adds	r3, #1
 800665a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665e:	e051      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 8006660:	2304      	movs	r3, #4
 8006662:	e04f      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d111      	bne.n	8006690 <HAL_I2C_Init+0x168>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1e58      	subs	r0, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	440b      	add	r3, r1
 800667a:	fbb0 f3f3 	udiv	r3, r0, r3
 800667e:	3301      	adds	r3, #1
 8006680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006684:	2b00      	cmp	r3, #0
 8006686:	bf0c      	ite	eq
 8006688:	2301      	moveq	r3, #1
 800668a:	2300      	movne	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e012      	b.n	80066b6 <HAL_I2C_Init+0x18e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1e58      	subs	r0, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	0099      	lsls	r1, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a6:	3301      	adds	r3, #1
 80066a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bf0c      	ite	eq
 80066b0:	2301      	moveq	r3, #1
 80066b2:	2300      	movne	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_I2C_Init+0x196>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e022      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <HAL_I2C_Init+0x1bc>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1e58      	subs	r0, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6859      	ldr	r1, [r3, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	440b      	add	r3, r1
 80066d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d8:	3301      	adds	r3, #1
 80066da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e2:	e00f      	b.n	8006704 <HAL_I2C_Init+0x1dc>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1e58      	subs	r0, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	0099      	lsls	r1, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066fa:	3301      	adds	r3, #1
 80066fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	6809      	ldr	r1, [r1, #0]
 8006708:	4313      	orrs	r3, r2
 800670a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69da      	ldr	r2, [r3, #28]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6911      	ldr	r1, [r2, #16]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68d2      	ldr	r2, [r2, #12]
 800673e:	4311      	orrs	r1, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	430b      	orrs	r3, r1
 8006746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	000186a0 	.word	0x000186a0
 80067a0:	001e847f 	.word	0x001e847f
 80067a4:	003d08ff 	.word	0x003d08ff
 80067a8:	431bde83 	.word	0x431bde83
 80067ac:	10624dd3 	.word	0x10624dd3

080067b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	461a      	mov	r2, r3
 80067bc:	460b      	mov	r3, r1
 80067be:	817b      	strh	r3, [r7, #10]
 80067c0:	4613      	mov	r3, r2
 80067c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067c4:	f7fe ff1c 	bl	8005600 <HAL_GetTick>
 80067c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	f040 80e0 	bne.w	8006998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	2319      	movs	r3, #25
 80067de:	2201      	movs	r2, #1
 80067e0:	4970      	ldr	r1, [pc, #448]	; (80069a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 ff16 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
 80067f0:	e0d3      	b.n	800699a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_I2C_Master_Transmit+0x50>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0cc      	b.n	800699a <HAL_I2C_Master_Transmit+0x1ea>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d007      	beq.n	8006826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	; 0x21
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2210      	movs	r2, #16
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	893a      	ldrh	r2, [r7, #8]
 8006856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a50      	ldr	r2, [pc, #320]	; (80069a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006868:	8979      	ldrh	r1, [r7, #10]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	6a3a      	ldr	r2, [r7, #32]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fcea 	bl	8007248 <I2C_MasterRequestWrite>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e08d      	b.n	800699a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006894:	e066      	b.n	8006964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	6a39      	ldr	r1, [r7, #32]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 ff90 	bl	80077c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d107      	bne.n	80068be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e06b      	b.n	800699a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d11b      	bne.n	8006938 <HAL_I2C_Master_Transmit+0x188>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	d017      	beq.n	8006938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	6a39      	ldr	r1, [r7, #32]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 ff80 	bl	8007842 <I2C_WaitOnBTFFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b04      	cmp	r3, #4
 800694e:	d107      	bne.n	8006960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e01a      	b.n	800699a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d194      	bne.n	8006896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	00100002 	.word	0x00100002
 80069a8:	ffff0000 	.word	0xffff0000

080069ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08c      	sub	sp, #48	; 0x30
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	461a      	mov	r2, r3
 80069b8:	460b      	mov	r3, r1
 80069ba:	817b      	strh	r3, [r7, #10]
 80069bc:	4613      	mov	r3, r2
 80069be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069c0:	f7fe fe1e 	bl	8005600 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	f040 820b 	bne.w	8006dea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	2319      	movs	r3, #25
 80069da:	2201      	movs	r2, #1
 80069dc:	497c      	ldr	r1, [pc, #496]	; (8006bd0 <HAL_I2C_Master_Receive+0x224>)
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fe18 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80069ea:	2302      	movs	r3, #2
 80069ec:	e1fe      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_I2C_Master_Receive+0x50>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e1f7      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d007      	beq.n	8006a22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2222      	movs	r2, #34	; 0x22
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	893a      	ldrh	r2, [r7, #8]
 8006a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a5c      	ldr	r2, [pc, #368]	; (8006bd4 <HAL_I2C_Master_Receive+0x228>)
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a64:	8979      	ldrh	r1, [r7, #10]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fc6e 	bl	800734c <I2C_MasterRequestRead>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e1b8      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d113      	bne.n	8006aaa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a82:	2300      	movs	r3, #0
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e18c      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d11b      	bne.n	8006aea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e16c      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d11b      	bne.n	8006b2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	e14c      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b50:	e138      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	f200 80f1 	bhi.w	8006d3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d123      	bne.n	8006bac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 feab 	bl	80078c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e139      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006baa:	e10b      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d14e      	bne.n	8006c52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4906      	ldr	r1, [pc, #24]	; (8006bd8 <HAL_I2C_Master_Receive+0x22c>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fd28 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e10e      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
 8006bce:	bf00      	nop
 8006bd0:	00100002 	.word	0x00100002
 8006bd4:	ffff0000 	.word	0xffff0000
 8006bd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c50:	e0b8      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4966      	ldr	r1, [pc, #408]	; (8006df4 <HAL_I2C_Master_Receive+0x448>)
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fcd9 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0bf      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	494f      	ldr	r1, [pc, #316]	; (8006df4 <HAL_I2C_Master_Receive+0x448>)
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fcab 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e091      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d3c:	e042      	b.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fdbe 	bl	80078c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e04c      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d118      	bne.n	8006dc4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f47f aec2 	bne.w	8006b52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3728      	adds	r7, #40	; 0x28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	00010004 	.word	0x00010004

08006df8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	817b      	strh	r3, [r7, #10]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	813b      	strh	r3, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e12:	f7fe fbf5 	bl	8005600 <HAL_GetTick>
 8006e16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	f040 80d9 	bne.w	8006fd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	2319      	movs	r3, #25
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	496d      	ldr	r1, [pc, #436]	; (8006fe4 <HAL_I2C_Mem_Write+0x1ec>)
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fbef 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0cc      	b.n	8006fda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_I2C_Mem_Write+0x56>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e0c5      	b.n	8006fda <HAL_I2C_Mem_Write+0x1e2>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d007      	beq.n	8006e74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2221      	movs	r2, #33	; 0x21
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2240      	movs	r2, #64	; 0x40
 8006e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a3a      	ldr	r2, [r7, #32]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a4d      	ldr	r2, [pc, #308]	; (8006fe8 <HAL_I2C_Mem_Write+0x1f0>)
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006eb6:	88f8      	ldrh	r0, [r7, #6]
 8006eb8:	893a      	ldrh	r2, [r7, #8]
 8006eba:	8979      	ldrh	r1, [r7, #10]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fb0e 	bl	80074e8 <I2C_RequestMemoryWrite>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d052      	beq.n	8006f78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e081      	b.n	8006fda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fc70 	bl	80077c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00d      	beq.n	8006f02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d107      	bne.n	8006efe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e06b      	b.n	8006fda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d11b      	bne.n	8006f78 <HAL_I2C_Mem_Write+0x180>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d017      	beq.n	8006f78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1aa      	bne.n	8006ed6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fc5c 	bl	8007842 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00d      	beq.n	8006fac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d107      	bne.n	8006fa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e016      	b.n	8006fda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	00100002 	.word	0x00100002
 8006fe8:	ffff0000 	.word	0xffff0000

08006fec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006ffc:	f7fe fb00 	bl	8005600 <HAL_GetTick>
 8007000:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b20      	cmp	r3, #32
 8007010:	f040 8111 	bne.w	8007236 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	2319      	movs	r3, #25
 800701a:	2201      	movs	r2, #1
 800701c:	4988      	ldr	r1, [pc, #544]	; (8007240 <HAL_I2C_IsDeviceReady+0x254>)
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 faf8 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
 800702c:	e104      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_I2C_IsDeviceReady+0x50>
 8007038:	2302      	movs	r3, #2
 800703a:	e0fd      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b01      	cmp	r3, #1
 8007050:	d007      	beq.n	8007062 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0201 	orr.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2224      	movs	r2, #36	; 0x24
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a70      	ldr	r2, [pc, #448]	; (8007244 <HAL_I2C_IsDeviceReady+0x258>)
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007094:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fab6 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070bc:	d103      	bne.n	80070c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e0b6      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80070da:	f7fe fa91 	bl	8005600 <HAL_GetTick>
 80070de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007104:	bf0c      	ite	eq
 8007106:	2301      	moveq	r3, #1
 8007108:	2300      	movne	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800710e:	e025      	b.n	800715c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007110:	f7fe fa76 	bl	8005600 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d302      	bcc.n	8007126 <HAL_I2C_IsDeviceReady+0x13a>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	22a0      	movs	r2, #160	; 0xa0
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	bf0c      	ite	eq
 800713c:	2301      	moveq	r3, #1
 800713e:	2300      	movne	r3, #0
 8007140:	b2db      	uxtb	r3, r3
 8007142:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007152:	bf0c      	ite	eq
 8007154:	2301      	moveq	r3, #1
 8007156:	2300      	movne	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2ba0      	cmp	r3, #160	; 0xa0
 8007166:	d005      	beq.n	8007174 <HAL_I2C_IsDeviceReady+0x188>
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <HAL_I2C_IsDeviceReady+0x188>
 800716e:	7dbb      	ldrb	r3, [r7, #22]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0cd      	beq.n	8007110 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b02      	cmp	r3, #2
 8007188:	d129      	bne.n	80071de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007198:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2319      	movs	r3, #25
 80071b6:	2201      	movs	r2, #1
 80071b8:	4921      	ldr	r1, [pc, #132]	; (8007240 <HAL_I2C_IsDeviceReady+0x254>)
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fa2a 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e036      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e02c      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	2319      	movs	r3, #25
 80071fe:	2201      	movs	r2, #1
 8007200:	490f      	ldr	r1, [pc, #60]	; (8007240 <HAL_I2C_IsDeviceReady+0x254>)
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fa06 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e012      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3301      	adds	r3, #1
 8007216:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	f4ff af32 	bcc.w	8007086 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2220      	movs	r2, #32
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007236:	2302      	movs	r3, #2
  }
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	00100002 	.word	0x00100002
 8007244:	ffff0000 	.word	0xffff0000

08007248 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	460b      	mov	r3, r1
 8007256:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d006      	beq.n	8007272 <I2C_MasterRequestWrite+0x2a>
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d003      	beq.n	8007272 <I2C_MasterRequestWrite+0x2a>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007270:	d108      	bne.n	8007284 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	e00b      	b.n	800729c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b12      	cmp	r3, #18
 800728a:	d107      	bne.n	800729c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f9b3 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c2:	d103      	bne.n	80072cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e035      	b.n	800733c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d8:	d108      	bne.n	80072ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072da:	897b      	ldrh	r3, [r7, #10]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072e8:	611a      	str	r2, [r3, #16]
 80072ea:	e01b      	b.n	8007324 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	11db      	asrs	r3, r3, #7
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0306 	and.w	r3, r3, #6
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f063 030f 	orn	r3, r3, #15
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	490e      	ldr	r1, [pc, #56]	; (8007344 <I2C_MasterRequestWrite+0xfc>)
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f9d9 	bl	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e010      	b.n	800733c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800731a:	897b      	ldrh	r3, [r7, #10]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	4907      	ldr	r1, [pc, #28]	; (8007348 <I2C_MasterRequestWrite+0x100>)
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f9c9 	bl	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	00010008 	.word	0x00010008
 8007348:	00010002 	.word	0x00010002

0800734c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af02      	add	r7, sp, #8
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	460b      	mov	r3, r1
 800735a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007370:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d006      	beq.n	8007386 <I2C_MasterRequestRead+0x3a>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d003      	beq.n	8007386 <I2C_MasterRequestRead+0x3a>
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007384:	d108      	bne.n	8007398 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e00b      	b.n	80073b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	2b11      	cmp	r3, #17
 800739e:	d107      	bne.n	80073b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f929 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d6:	d103      	bne.n	80073e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e079      	b.n	80074d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	d108      	bne.n	8007400 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073ee:	897b      	ldrh	r3, [r7, #10]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f043 0301 	orr.w	r3, r3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	611a      	str	r2, [r3, #16]
 80073fe:	e05f      	b.n	80074c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007400:	897b      	ldrh	r3, [r7, #10]
 8007402:	11db      	asrs	r3, r3, #7
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0306 	and.w	r3, r3, #6
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f063 030f 	orn	r3, r3, #15
 8007410:	b2da      	uxtb	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4930      	ldr	r1, [pc, #192]	; (80074e0 <I2C_MasterRequestRead+0x194>)
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f94f 	bl	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e054      	b.n	80074d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800742e:	897b      	ldrh	r3, [r7, #10]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4929      	ldr	r1, [pc, #164]	; (80074e4 <I2C_MasterRequestRead+0x198>)
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f93f 	bl	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e044      	b.n	80074d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007472:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f8c7 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00d      	beq.n	80074a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800749a:	d103      	bne.n	80074a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e017      	b.n	80074d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80074a8:	897b      	ldrh	r3, [r7, #10]
 80074aa:	11db      	asrs	r3, r3, #7
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0306 	and.w	r3, r3, #6
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f063 030e 	orn	r3, r3, #14
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4907      	ldr	r1, [pc, #28]	; (80074e4 <I2C_MasterRequestRead+0x198>)
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f8fb 	bl	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	00010008 	.word	0x00010008
 80074e4:	00010002 	.word	0x00010002

080074e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	817b      	strh	r3, [r7, #10]
 80074fa:	460b      	mov	r3, r1
 80074fc:	813b      	strh	r3, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	2200      	movs	r2, #0
 800751a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f878 	bl	8007614 <I2C_WaitOnFlagUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007538:	d103      	bne.n	8007542 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e05f      	b.n	8007606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007546:	897b      	ldrh	r3, [r7, #10]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	6a3a      	ldr	r2, [r7, #32]
 800755a:	492d      	ldr	r1, [pc, #180]	; (8007610 <I2C_RequestMemoryWrite+0x128>)
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f8b0 	bl	80076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e04c      	b.n	8007606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007584:	6a39      	ldr	r1, [r7, #32]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f91a 	bl	80077c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	2b04      	cmp	r3, #4
 8007598:	d107      	bne.n	80075aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e02b      	b.n	8007606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d105      	bne.n	80075c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075b4:	893b      	ldrh	r3, [r7, #8]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	611a      	str	r2, [r3, #16]
 80075be:	e021      	b.n	8007604 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075c0:	893b      	ldrh	r3, [r7, #8]
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d0:	6a39      	ldr	r1, [r7, #32]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f8f4 	bl	80077c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d107      	bne.n	80075f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e005      	b.n	8007606 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075fa:	893b      	ldrh	r3, [r7, #8]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	00010002 	.word	0x00010002

08007614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007624:	e025      	b.n	8007672 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d021      	beq.n	8007672 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762e:	f7fd ffe7 	bl	8005600 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d116      	bne.n	8007672 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f043 0220 	orr.w	r2, r3, #32
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e023      	b.n	80076ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10d      	bne.n	8007698 <I2C_WaitOnFlagUntilTimeout+0x84>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	43da      	mvns	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4013      	ands	r3, r2
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	e00c      	b.n	80076b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	43da      	mvns	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4013      	ands	r3, r2
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d0b6      	beq.n	8007626 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076d0:	e051      	b.n	8007776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e0:	d123      	bne.n	800772a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f043 0204 	orr.w	r2, r3, #4
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e046      	b.n	80077b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d021      	beq.n	8007776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007732:	f7fd ff65 	bl	8005600 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	429a      	cmp	r2, r3
 8007740:	d302      	bcc.n	8007748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d116      	bne.n	8007776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f043 0220 	orr.w	r2, r3, #32
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e020      	b.n	80077b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	0c1b      	lsrs	r3, r3, #16
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10c      	bne.n	800779a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	43da      	mvns	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4013      	ands	r3, r2
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	bf14      	ite	ne
 8007792:	2301      	movne	r3, #1
 8007794:	2300      	moveq	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	e00b      	b.n	80077b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	43da      	mvns	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4013      	ands	r3, r2
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d18d      	bne.n	80076d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077cc:	e02d      	b.n	800782a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f8ce 	bl	8007970 <I2C_IsAcknowledgeFailed>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e02d      	b.n	800783a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d021      	beq.n	800782a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fd ff0b 	bl	8005600 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d116      	bne.n	800782a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e007      	b.n	800783a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d1ca      	bne.n	80077ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800784e:	e02d      	b.n	80078ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f88d 	bl	8007970 <I2C_IsAcknowledgeFailed>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e02d      	b.n	80078bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007866:	d021      	beq.n	80078ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007868:	f7fd feca 	bl	8005600 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d116      	bne.n	80078ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	f043 0220 	orr.w	r2, r3, #32
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e007      	b.n	80078bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d1ca      	bne.n	8007850 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078d0:	e042      	b.n	8007958 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d119      	bne.n	8007914 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0210 	mvn.w	r2, #16
 80078e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e029      	b.n	8007968 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007914:	f7fd fe74 	bl	8005600 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	429a      	cmp	r2, r3
 8007922:	d302      	bcc.n	800792a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d116      	bne.n	8007958 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	f043 0220 	orr.w	r2, r3, #32
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e007      	b.n	8007968 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d1b5      	bne.n	80078d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007986:	d11b      	bne.n	80079c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007990:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	f043 0204 	orr.w	r2, r3, #4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e267      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d075      	beq.n	8007ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079ee:	4b88      	ldr	r3, [pc, #544]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 030c 	and.w	r3, r3, #12
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d00c      	beq.n	8007a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079fa:	4b85      	ldr	r3, [pc, #532]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d112      	bne.n	8007a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a06:	4b82      	ldr	r3, [pc, #520]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a12:	d10b      	bne.n	8007a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a14:	4b7e      	ldr	r3, [pc, #504]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d05b      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x108>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d157      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e242      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a34:	d106      	bne.n	8007a44 <HAL_RCC_OscConfig+0x74>
 8007a36:	4b76      	ldr	r3, [pc, #472]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a75      	ldr	r2, [pc, #468]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e01d      	b.n	8007a80 <HAL_RCC_OscConfig+0xb0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a4c:	d10c      	bne.n	8007a68 <HAL_RCC_OscConfig+0x98>
 8007a4e:	4b70      	ldr	r3, [pc, #448]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a6f      	ldr	r2, [pc, #444]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	4b6d      	ldr	r3, [pc, #436]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a6c      	ldr	r2, [pc, #432]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	e00b      	b.n	8007a80 <HAL_RCC_OscConfig+0xb0>
 8007a68:	4b69      	ldr	r3, [pc, #420]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a68      	ldr	r2, [pc, #416]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	4b66      	ldr	r3, [pc, #408]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a65      	ldr	r2, [pc, #404]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d013      	beq.n	8007ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a88:	f7fd fdba 	bl	8005600 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a90:	f7fd fdb6 	bl	8005600 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b64      	cmp	r3, #100	; 0x64
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e207      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa2:	4b5b      	ldr	r3, [pc, #364]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0xc0>
 8007aae:	e014      	b.n	8007ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab0:	f7fd fda6 	bl	8005600 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ab8:	f7fd fda2 	bl	8005600 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e1f3      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aca:	4b51      	ldr	r3, [pc, #324]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f0      	bne.n	8007ab8 <HAL_RCC_OscConfig+0xe8>
 8007ad6:	e000      	b.n	8007ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d063      	beq.n	8007bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ae6:	4b4a      	ldr	r3, [pc, #296]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007af2:	4b47      	ldr	r3, [pc, #284]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d11c      	bne.n	8007b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007afe:	4b44      	ldr	r3, [pc, #272]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d116      	bne.n	8007b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0a:	4b41      	ldr	r3, [pc, #260]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_RCC_OscConfig+0x152>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d001      	beq.n	8007b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e1c7      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b22:	4b3b      	ldr	r3, [pc, #236]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4937      	ldr	r1, [pc, #220]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b36:	e03a      	b.n	8007bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d020      	beq.n	8007b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b40:	4b34      	ldr	r3, [pc, #208]	; (8007c14 <HAL_RCC_OscConfig+0x244>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b46:	f7fd fd5b 	bl	8005600 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b4e:	f7fd fd57 	bl	8005600 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e1a8      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b60:	4b2b      	ldr	r3, [pc, #172]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6c:	4b28      	ldr	r3, [pc, #160]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4925      	ldr	r1, [pc, #148]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	600b      	str	r3, [r1, #0]
 8007b80:	e015      	b.n	8007bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b82:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <HAL_RCC_OscConfig+0x244>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fd fd3a 	bl	8005600 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b90:	f7fd fd36 	bl	8005600 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e187      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ba2:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d036      	beq.n	8007c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d016      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <HAL_RCC_OscConfig+0x248>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc8:	f7fd fd1a 	bl	8005600 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bd0:	f7fd fd16 	bl	8005600 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e167      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007be2:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <HAL_RCC_OscConfig+0x240>)
 8007be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0f0      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x200>
 8007bee:	e01b      	b.n	8007c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <HAL_RCC_OscConfig+0x248>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bf6:	f7fd fd03 	bl	8005600 <HAL_GetTick>
 8007bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bfc:	e00e      	b.n	8007c1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bfe:	f7fd fcff 	bl	8005600 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d907      	bls.n	8007c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e150      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
 8007c10:	40023800 	.word	0x40023800
 8007c14:	42470000 	.word	0x42470000
 8007c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c1c:	4b88      	ldr	r3, [pc, #544]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1ea      	bne.n	8007bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8097 	beq.w	8007d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c3a:	4b81      	ldr	r3, [pc, #516]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10f      	bne.n	8007c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	4b7d      	ldr	r3, [pc, #500]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	4a7c      	ldr	r2, [pc, #496]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c54:	6413      	str	r3, [r2, #64]	; 0x40
 8007c56:	4b7a      	ldr	r3, [pc, #488]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c62:	2301      	movs	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c66:	4b77      	ldr	r3, [pc, #476]	; (8007e44 <HAL_RCC_OscConfig+0x474>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d118      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c72:	4b74      	ldr	r3, [pc, #464]	; (8007e44 <HAL_RCC_OscConfig+0x474>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a73      	ldr	r2, [pc, #460]	; (8007e44 <HAL_RCC_OscConfig+0x474>)
 8007c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c7e:	f7fd fcbf 	bl	8005600 <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c84:	e008      	b.n	8007c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c86:	f7fd fcbb 	bl	8005600 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e10c      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c98:	4b6a      	ldr	r3, [pc, #424]	; (8007e44 <HAL_RCC_OscConfig+0x474>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0f0      	beq.n	8007c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <HAL_RCC_OscConfig+0x2ea>
 8007cac:	4b64      	ldr	r3, [pc, #400]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb0:	4a63      	ldr	r2, [pc, #396]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb8:	e01c      	b.n	8007cf4 <HAL_RCC_OscConfig+0x324>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b05      	cmp	r3, #5
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCC_OscConfig+0x30c>
 8007cc2:	4b5f      	ldr	r3, [pc, #380]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc6:	4a5e      	ldr	r2, [pc, #376]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cc8:	f043 0304 	orr.w	r3, r3, #4
 8007ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cce:	4b5c      	ldr	r3, [pc, #368]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	4a5b      	ldr	r2, [pc, #364]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cda:	e00b      	b.n	8007cf4 <HAL_RCC_OscConfig+0x324>
 8007cdc:	4b58      	ldr	r3, [pc, #352]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce0:	4a57      	ldr	r2, [pc, #348]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007ce2:	f023 0301 	bic.w	r3, r3, #1
 8007ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce8:	4b55      	ldr	r3, [pc, #340]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cec:	4a54      	ldr	r2, [pc, #336]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007cee:	f023 0304 	bic.w	r3, r3, #4
 8007cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d015      	beq.n	8007d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfc:	f7fd fc80 	bl	8005600 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d02:	e00a      	b.n	8007d1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d04:	f7fd fc7c 	bl	8005600 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e0cb      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d1a:	4b49      	ldr	r3, [pc, #292]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0ee      	beq.n	8007d04 <HAL_RCC_OscConfig+0x334>
 8007d26:	e014      	b.n	8007d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d28:	f7fd fc6a 	bl	8005600 <HAL_GetTick>
 8007d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d2e:	e00a      	b.n	8007d46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d30:	f7fd fc66 	bl	8005600 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e0b5      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d46:	4b3e      	ldr	r3, [pc, #248]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1ee      	bne.n	8007d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d105      	bne.n	8007d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d58:	4b39      	ldr	r3, [pc, #228]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	4a38      	ldr	r2, [pc, #224]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 80a1 	beq.w	8007eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d6e:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 030c 	and.w	r3, r3, #12
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	d05c      	beq.n	8007e34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d141      	bne.n	8007e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d82:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <HAL_RCC_OscConfig+0x478>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fd fc3a 	bl	8005600 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d90:	f7fd fc36 	bl	8005600 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e087      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007da2:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69da      	ldr	r2, [r3, #28]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	019b      	lsls	r3, r3, #6
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	491b      	ldr	r1, [pc, #108]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <HAL_RCC_OscConfig+0x478>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dde:	f7fd fc0f 	bl	8005600 <HAL_GetTick>
 8007de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de4:	e008      	b.n	8007df8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de6:	f7fd fc0b 	bl	8005600 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e05c      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0f0      	beq.n	8007de6 <HAL_RCC_OscConfig+0x416>
 8007e04:	e054      	b.n	8007eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <HAL_RCC_OscConfig+0x478>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e0c:	f7fd fbf8 	bl	8005600 <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e14:	f7fd fbf4 	bl	8005600 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e045      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e26:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <HAL_RCC_OscConfig+0x470>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x444>
 8007e32:	e03d      	b.n	8007eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d107      	bne.n	8007e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e038      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
 8007e40:	40023800 	.word	0x40023800
 8007e44:	40007000 	.word	0x40007000
 8007e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e4c:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <HAL_RCC_OscConfig+0x4ec>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d028      	beq.n	8007eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d121      	bne.n	8007eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d11a      	bne.n	8007eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d111      	bne.n	8007eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	3b01      	subs	r3, #1
 8007e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d107      	bne.n	8007eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d001      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40023800 	.word	0x40023800

08007ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0cc      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ed4:	4b68      	ldr	r3, [pc, #416]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d90c      	bls.n	8007efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ee2:	4b65      	ldr	r3, [pc, #404]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eea:	4b63      	ldr	r3, [pc, #396]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d001      	beq.n	8007efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0b8      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d020      	beq.n	8007f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f14:	4b59      	ldr	r3, [pc, #356]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	4a58      	ldr	r2, [pc, #352]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f2c:	4b53      	ldr	r3, [pc, #332]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	4a52      	ldr	r2, [pc, #328]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f38:	4b50      	ldr	r3, [pc, #320]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	494d      	ldr	r1, [pc, #308]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d044      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5e:	4b47      	ldr	r3, [pc, #284]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d119      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e07f      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d003      	beq.n	8007f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f7e:	4b3f      	ldr	r3, [pc, #252]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e06f      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f8e:	4b3b      	ldr	r3, [pc, #236]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e067      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f9e:	4b37      	ldr	r3, [pc, #220]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f023 0203 	bic.w	r2, r3, #3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4934      	ldr	r1, [pc, #208]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fb0:	f7fd fb26 	bl	8005600 <HAL_GetTick>
 8007fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fb6:	e00a      	b.n	8007fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fb8:	f7fd fb22 	bl	8005600 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e04f      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fce:	4b2b      	ldr	r3, [pc, #172]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 020c 	and.w	r2, r3, #12
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d1eb      	bne.n	8007fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d20c      	bcs.n	8008008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fee:	4b22      	ldr	r3, [pc, #136]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff6:	4b20      	ldr	r3, [pc, #128]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d001      	beq.n	8008008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e032      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008014:	4b19      	ldr	r3, [pc, #100]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4916      	ldr	r1, [pc, #88]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008022:	4313      	orrs	r3, r2
 8008024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	490e      	ldr	r1, [pc, #56]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008046:	f000 f821 	bl	800808c <HAL_RCC_GetSysClockFreq>
 800804a:	4602      	mov	r2, r0
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	490a      	ldr	r1, [pc, #40]	; (8008080 <HAL_RCC_ClockConfig+0x1c0>)
 8008058:	5ccb      	ldrb	r3, [r1, r3]
 800805a:	fa22 f303 	lsr.w	r3, r2, r3
 800805e:	4a09      	ldr	r2, [pc, #36]	; (8008084 <HAL_RCC_ClockConfig+0x1c4>)
 8008060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCC_ClockConfig+0x1c8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd fa86 	bl	8005578 <HAL_InitTick>

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	40023c00 	.word	0x40023c00
 800807c:	40023800 	.word	0x40023800
 8008080:	08010c88 	.word	0x08010c88
 8008084:	2000001c 	.word	0x2000001c
 8008088:	20000020 	.word	0x20000020

0800808c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800808c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008090:	b090      	sub	sp, #64	; 0x40
 8008092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
 8008098:	2300      	movs	r3, #0
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809c:	2300      	movs	r3, #0
 800809e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080a4:	4b59      	ldr	r3, [pc, #356]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 030c 	and.w	r3, r3, #12
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d00d      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x40>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	f200 80a1 	bhi.w	80081f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x34>
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d003      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80080be:	e09b      	b.n	80081f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080c0:	4b53      	ldr	r3, [pc, #332]	; (8008210 <HAL_RCC_GetSysClockFreq+0x184>)
 80080c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80080c4:	e09b      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080c6:	4b53      	ldr	r3, [pc, #332]	; (8008214 <HAL_RCC_GetSysClockFreq+0x188>)
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80080ca:	e098      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080cc:	4b4f      	ldr	r3, [pc, #316]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080d6:	4b4d      	ldr	r3, [pc, #308]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d028      	beq.n	8008134 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e2:	4b4a      	ldr	r3, [pc, #296]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	2200      	movs	r2, #0
 80080ea:	623b      	str	r3, [r7, #32]
 80080ec:	627a      	str	r2, [r7, #36]	; 0x24
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080f4:	2100      	movs	r1, #0
 80080f6:	4b47      	ldr	r3, [pc, #284]	; (8008214 <HAL_RCC_GetSysClockFreq+0x188>)
 80080f8:	fb03 f201 	mul.w	r2, r3, r1
 80080fc:	2300      	movs	r3, #0
 80080fe:	fb00 f303 	mul.w	r3, r0, r3
 8008102:	4413      	add	r3, r2
 8008104:	4a43      	ldr	r2, [pc, #268]	; (8008214 <HAL_RCC_GetSysClockFreq+0x188>)
 8008106:	fba0 1202 	umull	r1, r2, r0, r2
 800810a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800810c:	460a      	mov	r2, r1
 800810e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008112:	4413      	add	r3, r2
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	2200      	movs	r2, #0
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	61fa      	str	r2, [r7, #28]
 800811e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008122:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008126:	f7f8 fdc7 	bl	8000cb8 <__aeabi_uldivmod>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4613      	mov	r3, r2
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008132:	e053      	b.n	80081dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008134:	4b35      	ldr	r3, [pc, #212]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	099b      	lsrs	r3, r3, #6
 800813a:	2200      	movs	r2, #0
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	617a      	str	r2, [r7, #20]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008146:	f04f 0b00 	mov.w	fp, #0
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	f04f 0000 	mov.w	r0, #0
 8008152:	f04f 0100 	mov.w	r1, #0
 8008156:	0159      	lsls	r1, r3, #5
 8008158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800815c:	0150      	lsls	r0, r2, #5
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	ebb2 080a 	subs.w	r8, r2, sl
 8008166:	eb63 090b 	sbc.w	r9, r3, fp
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008176:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800817a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800817e:	ebb2 0408 	subs.w	r4, r2, r8
 8008182:	eb63 0509 	sbc.w	r5, r3, r9
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	00eb      	lsls	r3, r5, #3
 8008190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008194:	00e2      	lsls	r2, r4, #3
 8008196:	4614      	mov	r4, r2
 8008198:	461d      	mov	r5, r3
 800819a:	eb14 030a 	adds.w	r3, r4, sl
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	eb45 030b 	adc.w	r3, r5, fp
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081b2:	4629      	mov	r1, r5
 80081b4:	028b      	lsls	r3, r1, #10
 80081b6:	4621      	mov	r1, r4
 80081b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081bc:	4621      	mov	r1, r4
 80081be:	028a      	lsls	r2, r1, #10
 80081c0:	4610      	mov	r0, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	2200      	movs	r2, #0
 80081c8:	60bb      	str	r3, [r7, #8]
 80081ca:	60fa      	str	r2, [r7, #12]
 80081cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d0:	f7f8 fd72 	bl	8000cb8 <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4613      	mov	r3, r2
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <HAL_RCC_GetSysClockFreq+0x180>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	3301      	adds	r3, #1
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80081ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081f6:	e002      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_RCC_GetSysClockFreq+0x184>)
 80081fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008200:	4618      	mov	r0, r3
 8008202:	3740      	adds	r7, #64	; 0x40
 8008204:	46bd      	mov	sp, r7
 8008206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800820a:	bf00      	nop
 800820c:	40023800 	.word	0x40023800
 8008210:	00f42400 	.word	0x00f42400
 8008214:	017d7840 	.word	0x017d7840

08008218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <HAL_RCC_GetHCLKFreq+0x14>)
 800821e:	681b      	ldr	r3, [r3, #0]
}
 8008220:	4618      	mov	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	2000001c 	.word	0x2000001c

08008230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008234:	f7ff fff0 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	0a9b      	lsrs	r3, r3, #10
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	4903      	ldr	r1, [pc, #12]	; (8008254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008246:	5ccb      	ldrb	r3, [r1, r3]
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40023800 	.word	0x40023800
 8008254:	08010c98 	.word	0x08010c98

08008258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800825c:	f7ff ffdc 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008260:	4602      	mov	r2, r0
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	0b5b      	lsrs	r3, r3, #13
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <HAL_RCC_GetPCLK2Freq+0x24>)
 800826e:	5ccb      	ldrb	r3, [r1, r3]
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40023800 	.word	0x40023800
 800827c:	08010c98 	.word	0x08010c98

08008280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e041      	b.n	8008316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fc ffba 	bl	8005220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 feb4 	bl	800902c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d001      	beq.n	8008338 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e03c      	b.n	80083b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a1e      	ldr	r2, [pc, #120]	; (80083c0 <HAL_TIM_Base_Start+0xa0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_TIM_Base_Start+0x5c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008352:	d013      	beq.n	800837c <HAL_TIM_Base_Start+0x5c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1a      	ldr	r2, [pc, #104]	; (80083c4 <HAL_TIM_Base_Start+0xa4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_TIM_Base_Start+0x5c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <HAL_TIM_Base_Start+0xa8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_TIM_Base_Start+0x5c>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a17      	ldr	r2, [pc, #92]	; (80083cc <HAL_TIM_Base_Start+0xac>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIM_Base_Start+0x5c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <HAL_TIM_Base_Start+0xb0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d111      	bne.n	80083a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b06      	cmp	r3, #6
 800838c:	d010      	beq.n	80083b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0201 	orr.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839e:	e007      	b.n	80083b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	40000c00 	.word	0x40000c00
 80083d0:	40014000 	.word	0x40014000

080083d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d001      	beq.n	80083ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e044      	b.n	8008476 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1e      	ldr	r2, [pc, #120]	; (8008484 <HAL_TIM_Base_Start_IT+0xb0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d018      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x6c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008416:	d013      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x6c>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1a      	ldr	r2, [pc, #104]	; (8008488 <HAL_TIM_Base_Start_IT+0xb4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00e      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x6c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a19      	ldr	r2, [pc, #100]	; (800848c <HAL_TIM_Base_Start_IT+0xb8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d009      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x6c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a17      	ldr	r2, [pc, #92]	; (8008490 <HAL_TIM_Base_Start_IT+0xbc>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <HAL_TIM_Base_Start_IT+0x6c>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a16      	ldr	r2, [pc, #88]	; (8008494 <HAL_TIM_Base_Start_IT+0xc0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d111      	bne.n	8008464 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b06      	cmp	r3, #6
 8008450:	d010      	beq.n	8008474 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008462:	e007      	b.n	8008474 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0201 	orr.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40010000 	.word	0x40010000
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00
 8008494:	40014000 	.word	0x40014000

08008498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e041      	b.n	800852e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fc ff38 	bl	8005334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f000 fda8 	bl	800902c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <HAL_TIM_PWM_Start+0x24>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	e022      	b.n	80085a2 <HAL_TIM_PWM_Start+0x6a>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b04      	cmp	r3, #4
 8008560:	d109      	bne.n	8008576 <HAL_TIM_PWM_Start+0x3e>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b01      	cmp	r3, #1
 800856c:	bf14      	ite	ne
 800856e:	2301      	movne	r3, #1
 8008570:	2300      	moveq	r3, #0
 8008572:	b2db      	uxtb	r3, r3
 8008574:	e015      	b.n	80085a2 <HAL_TIM_PWM_Start+0x6a>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d109      	bne.n	8008590 <HAL_TIM_PWM_Start+0x58>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b01      	cmp	r3, #1
 8008586:	bf14      	ite	ne
 8008588:	2301      	movne	r3, #1
 800858a:	2300      	moveq	r3, #0
 800858c:	b2db      	uxtb	r3, r3
 800858e:	e008      	b.n	80085a2 <HAL_TIM_PWM_Start+0x6a>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b01      	cmp	r3, #1
 800859a:	bf14      	ite	ne
 800859c:	2301      	movne	r3, #1
 800859e:	2300      	moveq	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e068      	b.n	800867c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <HAL_TIM_PWM_Start+0x82>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b8:	e013      	b.n	80085e2 <HAL_TIM_PWM_Start+0xaa>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d104      	bne.n	80085ca <HAL_TIM_PWM_Start+0x92>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c8:	e00b      	b.n	80085e2 <HAL_TIM_PWM_Start+0xaa>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d104      	bne.n	80085da <HAL_TIM_PWM_Start+0xa2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d8:	e003      	b.n	80085e2 <HAL_TIM_PWM_Start+0xaa>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2201      	movs	r2, #1
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f8e2 	bl	80097b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a23      	ldr	r2, [pc, #140]	; (8008684 <HAL_TIM_PWM_Start+0x14c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d107      	bne.n	800860a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <HAL_TIM_PWM_Start+0x14c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d018      	beq.n	8008646 <HAL_TIM_PWM_Start+0x10e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861c:	d013      	beq.n	8008646 <HAL_TIM_PWM_Start+0x10e>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a19      	ldr	r2, [pc, #100]	; (8008688 <HAL_TIM_PWM_Start+0x150>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00e      	beq.n	8008646 <HAL_TIM_PWM_Start+0x10e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a17      	ldr	r2, [pc, #92]	; (800868c <HAL_TIM_PWM_Start+0x154>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d009      	beq.n	8008646 <HAL_TIM_PWM_Start+0x10e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a16      	ldr	r2, [pc, #88]	; (8008690 <HAL_TIM_PWM_Start+0x158>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_TIM_PWM_Start+0x10e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a14      	ldr	r2, [pc, #80]	; (8008694 <HAL_TIM_PWM_Start+0x15c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d111      	bne.n	800866a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b06      	cmp	r3, #6
 8008656:	d010      	beq.n	800867a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008668:	e007      	b.n	800867a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40010000 	.word	0x40010000
 8008688:	40000400 	.word	0x40000400
 800868c:	40000800 	.word	0x40000800
 8008690:	40000c00 	.word	0x40000c00
 8008694:	40014000 	.word	0x40014000

08008698 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e041      	b.n	800872e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f839 	bl	8008736 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f000 fca8 	bl	800902c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d104      	bne.n	800876a <HAL_TIM_IC_Start_IT+0x1e>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008766:	b2db      	uxtb	r3, r3
 8008768:	e013      	b.n	8008792 <HAL_TIM_IC_Start_IT+0x46>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b04      	cmp	r3, #4
 800876e:	d104      	bne.n	800877a <HAL_TIM_IC_Start_IT+0x2e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008776:	b2db      	uxtb	r3, r3
 8008778:	e00b      	b.n	8008792 <HAL_TIM_IC_Start_IT+0x46>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b08      	cmp	r3, #8
 800877e:	d104      	bne.n	800878a <HAL_TIM_IC_Start_IT+0x3e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008786:	b2db      	uxtb	r3, r3
 8008788:	e003      	b.n	8008792 <HAL_TIM_IC_Start_IT+0x46>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008790:	b2db      	uxtb	r3, r3
 8008792:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <HAL_TIM_IC_Start_IT+0x58>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	e013      	b.n	80087cc <HAL_TIM_IC_Start_IT+0x80>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d104      	bne.n	80087b4 <HAL_TIM_IC_Start_IT+0x68>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	e00b      	b.n	80087cc <HAL_TIM_IC_Start_IT+0x80>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d104      	bne.n	80087c4 <HAL_TIM_IC_Start_IT+0x78>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	e003      	b.n	80087cc <HAL_TIM_IC_Start_IT+0x80>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d102      	bne.n	80087da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80087d4:	7b7b      	ldrb	r3, [r7, #13]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d001      	beq.n	80087de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e0c2      	b.n	8008964 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d104      	bne.n	80087ee <HAL_TIM_IC_Start_IT+0xa2>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ec:	e013      	b.n	8008816 <HAL_TIM_IC_Start_IT+0xca>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d104      	bne.n	80087fe <HAL_TIM_IC_Start_IT+0xb2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087fc:	e00b      	b.n	8008816 <HAL_TIM_IC_Start_IT+0xca>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b08      	cmp	r3, #8
 8008802:	d104      	bne.n	800880e <HAL_TIM_IC_Start_IT+0xc2>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800880c:	e003      	b.n	8008816 <HAL_TIM_IC_Start_IT+0xca>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2202      	movs	r2, #2
 8008812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d104      	bne.n	8008826 <HAL_TIM_IC_Start_IT+0xda>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008824:	e013      	b.n	800884e <HAL_TIM_IC_Start_IT+0x102>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b04      	cmp	r3, #4
 800882a:	d104      	bne.n	8008836 <HAL_TIM_IC_Start_IT+0xea>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008834:	e00b      	b.n	800884e <HAL_TIM_IC_Start_IT+0x102>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b08      	cmp	r3, #8
 800883a:	d104      	bne.n	8008846 <HAL_TIM_IC_Start_IT+0xfa>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008844:	e003      	b.n	800884e <HAL_TIM_IC_Start_IT+0x102>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2202      	movs	r2, #2
 800884a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	d841      	bhi.n	80088d8 <HAL_TIM_IC_Start_IT+0x18c>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <HAL_TIM_IC_Start_IT+0x110>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008891 	.word	0x08008891
 8008860:	080088d9 	.word	0x080088d9
 8008864:	080088d9 	.word	0x080088d9
 8008868:	080088d9 	.word	0x080088d9
 800886c:	080088a3 	.word	0x080088a3
 8008870:	080088d9 	.word	0x080088d9
 8008874:	080088d9 	.word	0x080088d9
 8008878:	080088d9 	.word	0x080088d9
 800887c:	080088b5 	.word	0x080088b5
 8008880:	080088d9 	.word	0x080088d9
 8008884:	080088d9 	.word	0x080088d9
 8008888:	080088d9 	.word	0x080088d9
 800888c:	080088c7 	.word	0x080088c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0202 	orr.w	r2, r2, #2
 800889e:	60da      	str	r2, [r3, #12]
      break;
 80088a0:	e01d      	b.n	80088de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f042 0204 	orr.w	r2, r2, #4
 80088b0:	60da      	str	r2, [r3, #12]
      break;
 80088b2:	e014      	b.n	80088de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0208 	orr.w	r2, r2, #8
 80088c2:	60da      	str	r2, [r3, #12]
      break;
 80088c4:	e00b      	b.n	80088de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0210 	orr.w	r2, r2, #16
 80088d4:	60da      	str	r2, [r3, #12]
      break;
 80088d6:	e002      	b.n	80088de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
      break;
 80088dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d13e      	bne.n	8008962 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2201      	movs	r2, #1
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 ff61 	bl	80097b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1d      	ldr	r2, [pc, #116]	; (800896c <HAL_TIM_IC_Start_IT+0x220>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_TIM_IC_Start_IT+0x1e2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008904:	d013      	beq.n	800892e <HAL_TIM_IC_Start_IT+0x1e2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a19      	ldr	r2, [pc, #100]	; (8008970 <HAL_TIM_IC_Start_IT+0x224>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_TIM_IC_Start_IT+0x1e2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a17      	ldr	r2, [pc, #92]	; (8008974 <HAL_TIM_IC_Start_IT+0x228>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_TIM_IC_Start_IT+0x1e2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a16      	ldr	r2, [pc, #88]	; (8008978 <HAL_TIM_IC_Start_IT+0x22c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_TIM_IC_Start_IT+0x1e2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a14      	ldr	r2, [pc, #80]	; (800897c <HAL_TIM_IC_Start_IT+0x230>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d111      	bne.n	8008952 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b06      	cmp	r3, #6
 800893e:	d010      	beq.n	8008962 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0201 	orr.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008950:	e007      	b.n	8008962 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0201 	orr.w	r2, r2, #1
 8008960:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	40010000 	.word	0x40010000
 8008970:	40000400 	.word	0x40000400
 8008974:	40000800 	.word	0x40000800
 8008978:	40000c00 	.word	0x40000c00
 800897c:	40014000 	.word	0x40014000

08008980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d122      	bne.n	80089dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d11b      	bne.n	80089dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f06f 0202 	mvn.w	r2, #2
 80089ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fa f9c4 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 80089c8:	e005      	b.n	80089d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb0f 	bl	8008fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fb16 	bl	8009002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d122      	bne.n	8008a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d11b      	bne.n	8008a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0204 	mvn.w	r2, #4
 8008a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fa f99a 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8008a1c:	e005      	b.n	8008a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fae5 	bl	8008fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 faec 	bl	8009002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d122      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f003 0308 	and.w	r3, r3, #8
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d11b      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f06f 0208 	mvn.w	r2, #8
 8008a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2204      	movs	r2, #4
 8008a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fa f970 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8008a70:	e005      	b.n	8008a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fabb 	bl	8008fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fac2 	bl	8009002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f003 0310 	and.w	r3, r3, #16
 8008a8e:	2b10      	cmp	r3, #16
 8008a90:	d122      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d11b      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0210 	mvn.w	r2, #16
 8008aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2208      	movs	r2, #8
 8008aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fa f946 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8008ac4:	e005      	b.n	8008ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa91 	bl	8008fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fa98 	bl	8009002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10e      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d107      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f06f 0201 	mvn.w	r2, #1
 8008afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa6b 	bl	8008fda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0e:	2b80      	cmp	r3, #128	; 0x80
 8008b10:	d10e      	bne.n	8008b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b1c:	2b80      	cmp	r3, #128	; 0x80
 8008b1e:	d107      	bne.n	8008b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fee0 	bl	80098f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d10e      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d107      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa5d 	bl	8009016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d10e      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d107      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0220 	mvn.w	r2, #32
 8008b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 feaa 	bl	80098dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_TIM_IC_ConfigChannel+0x1e>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e088      	b.n	8008cc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d11b      	bne.n	8008bf4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f000 fc3a 	bl	8009444 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	699a      	ldr	r2, [r3, #24]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 020c 	bic.w	r2, r2, #12
 8008bde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6999      	ldr	r1, [r3, #24]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	619a      	str	r2, [r3, #24]
 8008bf2:	e060      	b.n	8008cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d11c      	bne.n	8008c34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6819      	ldr	r1, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f000 fcb2 	bl	8009572 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6999      	ldr	r1, [r3, #24]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	021a      	lsls	r2, r3, #8
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	619a      	str	r2, [r3, #24]
 8008c32:	e040      	b.n	8008cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d11b      	bne.n	8008c72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6818      	ldr	r0, [r3, #0]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6819      	ldr	r1, [r3, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f000 fcff 	bl	800964c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 020c 	bic.w	r2, r2, #12
 8008c5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69d9      	ldr	r1, [r3, #28]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	61da      	str	r2, [r3, #28]
 8008c70:	e021      	b.n	8008cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b0c      	cmp	r3, #12
 8008c76:	d11c      	bne.n	8008cb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	6819      	ldr	r1, [r3, #0]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f000 fd1c 	bl	80096c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69da      	ldr	r2, [r3, #28]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69d9      	ldr	r1, [r3, #28]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	021a      	lsls	r2, r3, #8
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	61da      	str	r2, [r3, #28]
 8008cb0:	e001      	b.n	8008cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d101      	bne.n	8008ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e0ae      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b0c      	cmp	r3, #12
 8008cf2:	f200 809f 	bhi.w	8008e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d31 	.word	0x08008d31
 8008d00:	08008e35 	.word	0x08008e35
 8008d04:	08008e35 	.word	0x08008e35
 8008d08:	08008e35 	.word	0x08008e35
 8008d0c:	08008d71 	.word	0x08008d71
 8008d10:	08008e35 	.word	0x08008e35
 8008d14:	08008e35 	.word	0x08008e35
 8008d18:	08008e35 	.word	0x08008e35
 8008d1c:	08008db3 	.word	0x08008db3
 8008d20:	08008e35 	.word	0x08008e35
 8008d24:	08008e35 	.word	0x08008e35
 8008d28:	08008e35 	.word	0x08008e35
 8008d2c:	08008df3 	.word	0x08008df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f9f8 	bl	800912c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699a      	ldr	r2, [r3, #24]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0208 	orr.w	r2, r2, #8
 8008d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699a      	ldr	r2, [r3, #24]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0204 	bic.w	r2, r2, #4
 8008d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6999      	ldr	r1, [r3, #24]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	691a      	ldr	r2, [r3, #16]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	619a      	str	r2, [r3, #24]
      break;
 8008d6e:	e064      	b.n	8008e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fa3e 	bl	80091f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6999      	ldr	r1, [r3, #24]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	021a      	lsls	r2, r3, #8
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	619a      	str	r2, [r3, #24]
      break;
 8008db0:	e043      	b.n	8008e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fa89 	bl	80092d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69da      	ldr	r2, [r3, #28]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0208 	orr.w	r2, r2, #8
 8008dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0204 	bic.w	r2, r2, #4
 8008ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69d9      	ldr	r1, [r3, #28]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	691a      	ldr	r2, [r3, #16]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	61da      	str	r2, [r3, #28]
      break;
 8008df0:	e023      	b.n	8008e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fad3 	bl	80093a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69da      	ldr	r2, [r3, #28]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69da      	ldr	r2, [r3, #28]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69d9      	ldr	r1, [r3, #28]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	021a      	lsls	r2, r3, #8
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	61da      	str	r2, [r3, #28]
      break;
 8008e32:	e002      	b.n	8008e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_TIM_ConfigClockSource+0x1c>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e0b4      	b.n	8008fd2 <HAL_TIM_ConfigClockSource+0x186>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea0:	d03e      	beq.n	8008f20 <HAL_TIM_ConfigClockSource+0xd4>
 8008ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea6:	f200 8087 	bhi.w	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eae:	f000 8086 	beq.w	8008fbe <HAL_TIM_ConfigClockSource+0x172>
 8008eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb6:	d87f      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008eb8:	2b70      	cmp	r3, #112	; 0x70
 8008eba:	d01a      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8008ebc:	2b70      	cmp	r3, #112	; 0x70
 8008ebe:	d87b      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec0:	2b60      	cmp	r3, #96	; 0x60
 8008ec2:	d050      	beq.n	8008f66 <HAL_TIM_ConfigClockSource+0x11a>
 8008ec4:	2b60      	cmp	r3, #96	; 0x60
 8008ec6:	d877      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec8:	2b50      	cmp	r3, #80	; 0x50
 8008eca:	d03c      	beq.n	8008f46 <HAL_TIM_ConfigClockSource+0xfa>
 8008ecc:	2b50      	cmp	r3, #80	; 0x50
 8008ece:	d873      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed0:	2b40      	cmp	r3, #64	; 0x40
 8008ed2:	d058      	beq.n	8008f86 <HAL_TIM_ConfigClockSource+0x13a>
 8008ed4:	2b40      	cmp	r3, #64	; 0x40
 8008ed6:	d86f      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed8:	2b30      	cmp	r3, #48	; 0x30
 8008eda:	d064      	beq.n	8008fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8008edc:	2b30      	cmp	r3, #48	; 0x30
 8008ede:	d86b      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d060      	beq.n	8008fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d867      	bhi.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d05c      	beq.n	8008fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d05a      	beq.n	8008fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8008ef0:	e062      	b.n	8008fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6899      	ldr	r1, [r3, #8]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f000 fc37 	bl	8009774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	609a      	str	r2, [r3, #8]
      break;
 8008f1e:	e04f      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	6899      	ldr	r1, [r3, #8]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f000 fc20 	bl	8009774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f42:	609a      	str	r2, [r3, #8]
      break;
 8008f44:	e03c      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	6859      	ldr	r1, [r3, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f000 fade 	bl	8009514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2150      	movs	r1, #80	; 0x50
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fbed 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8008f64:	e02c      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	6859      	ldr	r1, [r3, #4]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f000 fb3a 	bl	80095ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2160      	movs	r1, #96	; 0x60
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fbdd 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8008f84:	e01c      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6859      	ldr	r1, [r3, #4]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f000 fabe 	bl	8009514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2140      	movs	r1, #64	; 0x40
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fbcd 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8008fa4:	e00c      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	f000 fbc4 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8008fb6:	e003      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbc:	e000      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
	...

0800902c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a34      	ldr	r2, [pc, #208]	; (8009110 <TIM_Base_SetConfig+0xe4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00f      	beq.n	8009064 <TIM_Base_SetConfig+0x38>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904a:	d00b      	beq.n	8009064 <TIM_Base_SetConfig+0x38>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a31      	ldr	r2, [pc, #196]	; (8009114 <TIM_Base_SetConfig+0xe8>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d007      	beq.n	8009064 <TIM_Base_SetConfig+0x38>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a30      	ldr	r2, [pc, #192]	; (8009118 <TIM_Base_SetConfig+0xec>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_Base_SetConfig+0x38>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a2f      	ldr	r2, [pc, #188]	; (800911c <TIM_Base_SetConfig+0xf0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d108      	bne.n	8009076 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a25      	ldr	r2, [pc, #148]	; (8009110 <TIM_Base_SetConfig+0xe4>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d01b      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009084:	d017      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a22      	ldr	r2, [pc, #136]	; (8009114 <TIM_Base_SetConfig+0xe8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a21      	ldr	r2, [pc, #132]	; (8009118 <TIM_Base_SetConfig+0xec>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00f      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a20      	ldr	r2, [pc, #128]	; (800911c <TIM_Base_SetConfig+0xf0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00b      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <TIM_Base_SetConfig+0xf4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d007      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a1e      	ldr	r2, [pc, #120]	; (8009124 <TIM_Base_SetConfig+0xf8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d003      	beq.n	80090b6 <TIM_Base_SetConfig+0x8a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a1d      	ldr	r2, [pc, #116]	; (8009128 <TIM_Base_SetConfig+0xfc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d108      	bne.n	80090c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a08      	ldr	r2, [pc, #32]	; (8009110 <TIM_Base_SetConfig+0xe4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d103      	bne.n	80090fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	615a      	str	r2, [r3, #20]
}
 8009102:	bf00      	nop
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	40010000 	.word	0x40010000
 8009114:	40000400 	.word	0x40000400
 8009118:	40000800 	.word	0x40000800
 800911c:	40000c00 	.word	0x40000c00
 8009120:	40014000 	.word	0x40014000
 8009124:	40014400 	.word	0x40014400
 8009128:	40014800 	.word	0x40014800

0800912c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f023 0201 	bic.w	r2, r3, #1
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f023 0302 	bic.w	r3, r3, #2
 8009174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a1c      	ldr	r2, [pc, #112]	; (80091f4 <TIM_OC1_SetConfig+0xc8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d10c      	bne.n	80091a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f023 0308 	bic.w	r3, r3, #8
 800918e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f023 0304 	bic.w	r3, r3, #4
 80091a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a13      	ldr	r2, [pc, #76]	; (80091f4 <TIM_OC1_SetConfig+0xc8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d111      	bne.n	80091ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	621a      	str	r2, [r3, #32]
}
 80091e8:	bf00      	nop
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	40010000 	.word	0x40010000

080091f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	f023 0210 	bic.w	r2, r3, #16
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800922e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f023 0320 	bic.w	r3, r3, #32
 8009242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4313      	orrs	r3, r2
 800924e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a1e      	ldr	r2, [pc, #120]	; (80092cc <TIM_OC2_SetConfig+0xd4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d10d      	bne.n	8009274 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800925e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009272:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a15      	ldr	r2, [pc, #84]	; (80092cc <TIM_OC2_SetConfig+0xd4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d113      	bne.n	80092a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800928a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	621a      	str	r2, [r3, #32]
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000

080092d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <TIM_OC3_SetConfig+0xd0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d10d      	bne.n	800934a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	021b      	lsls	r3, r3, #8
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	4313      	orrs	r3, r2
 8009340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a14      	ldr	r2, [pc, #80]	; (80093a0 <TIM_OC3_SetConfig+0xd0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d113      	bne.n	800937a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	011b      	lsls	r3, r3, #4
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	621a      	str	r2, [r3, #32]
}
 8009394:	bf00      	nop
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	40010000 	.word	0x40010000

080093a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a10      	ldr	r2, [pc, #64]	; (8009440 <TIM_OC4_SetConfig+0x9c>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d109      	bne.n	8009418 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800940a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	019b      	lsls	r3, r3, #6
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	621a      	str	r2, [r3, #32]
}
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	40010000 	.word	0x40010000

08009444 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f023 0201 	bic.w	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4a24      	ldr	r2, [pc, #144]	; (8009500 <TIM_TI1_SetConfig+0xbc>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d013      	beq.n	800949a <TIM_TI1_SetConfig+0x56>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009478:	d00f      	beq.n	800949a <TIM_TI1_SetConfig+0x56>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4a21      	ldr	r2, [pc, #132]	; (8009504 <TIM_TI1_SetConfig+0xc0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00b      	beq.n	800949a <TIM_TI1_SetConfig+0x56>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4a20      	ldr	r2, [pc, #128]	; (8009508 <TIM_TI1_SetConfig+0xc4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d007      	beq.n	800949a <TIM_TI1_SetConfig+0x56>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4a1f      	ldr	r2, [pc, #124]	; (800950c <TIM_TI1_SetConfig+0xc8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_TI1_SetConfig+0x56>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a1e      	ldr	r2, [pc, #120]	; (8009510 <TIM_TI1_SetConfig+0xcc>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d101      	bne.n	800949e <TIM_TI1_SetConfig+0x5a>
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <TIM_TI1_SetConfig+0x5c>
 800949e:	2300      	movs	r3, #0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d008      	beq.n	80094b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f023 0303 	bic.w	r3, r3, #3
 80094aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	e003      	b.n	80094be <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f023 030a 	bic.w	r3, r3, #10
 80094d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f003 030a 	and.w	r3, r3, #10
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	621a      	str	r2, [r3, #32]
}
 80094f2:	bf00      	nop
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	40010000 	.word	0x40010000
 8009504:	40000400 	.word	0x40000400
 8009508:	40000800 	.word	0x40000800
 800950c:	40000c00 	.word	0x40000c00
 8009510:	40014000 	.word	0x40014000

08009514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f023 0201 	bic.w	r2, r3, #1
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800953e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f023 030a 	bic.w	r3, r3, #10
 8009550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	621a      	str	r2, [r3, #32]
}
 8009566:	bf00      	nop
 8009568:	371c      	adds	r7, #28
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009572:	b480      	push	{r7}
 8009574:	b087      	sub	sp, #28
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f023 0210 	bic.w	r2, r3, #16
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800959e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	031b      	lsls	r3, r3, #12
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	621a      	str	r2, [r3, #32]
}
 80095e0:	bf00      	nop
 80095e2:	371c      	adds	r7, #28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	f023 0210 	bic.w	r2, r3, #16
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	031b      	lsls	r3, r3, #12
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	4313      	orrs	r3, r2
 8009632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	621a      	str	r2, [r3, #32]
}
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	b2db      	uxtb	r3, r3
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800969c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	621a      	str	r2, [r3, #32]
}
 80096b8:	bf00      	nop
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009702:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	031b      	lsls	r3, r3, #12
 8009708:	b29b      	uxth	r3, r3
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	4313      	orrs	r3, r2
 800970e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	031b      	lsls	r3, r3, #12
 800971c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	621a      	str	r2, [r3, #32]
}
 8009732:	bf00      	nop
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800973e:	b480      	push	{r7}
 8009740:	b085      	sub	sp, #20
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	f043 0307 	orr.w	r3, r3, #7
 8009760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	609a      	str	r2, [r3, #8]
}
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800978e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	021a      	lsls	r2, r3, #8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	431a      	orrs	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4313      	orrs	r3, r2
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	609a      	str	r2, [r3, #8]
}
 80097a8:	bf00      	nop
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	2201      	movs	r2, #1
 80097c8:	fa02 f303 	lsl.w	r3, r2, r3
 80097cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1a      	ldr	r2, [r3, #32]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	43db      	mvns	r3, r3
 80097d6:	401a      	ands	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1a      	ldr	r2, [r3, #32]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 031f 	and.w	r3, r3, #31
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	fa01 f303 	lsl.w	r3, r1, r3
 80097ec:	431a      	orrs	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	621a      	str	r2, [r3, #32]
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009814:	2302      	movs	r3, #2
 8009816:	e050      	b.n	80098ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4313      	orrs	r3, r2
 8009848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1c      	ldr	r2, [pc, #112]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d018      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009864:	d013      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a18      	ldr	r2, [pc, #96]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00e      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a16      	ldr	r2, [pc, #88]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d009      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a15      	ldr	r2, [pc, #84]	; (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a13      	ldr	r2, [pc, #76]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d10c      	bne.n	80098a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4313      	orrs	r3, r2
 800989e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40010000 	.word	0x40010000
 80098cc:	40000400 	.word	0x40000400
 80098d0:	40000800 	.word	0x40000800
 80098d4:	40000c00 	.word	0x40000c00
 80098d8:	40014000 	.word	0x40014000

080098dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e03f      	b.n	8009996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7fb fd88 	bl	8005440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2224      	movs	r2, #36	; 0x24
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fcdf 	bl	800a30c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800995c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	695a      	ldr	r2, [r3, #20]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800996c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800997c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2220      	movs	r2, #32
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	4613      	mov	r3, r2
 80099aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d11d      	bne.n	80099f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <HAL_UART_Receive_IT+0x26>
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e016      	b.n	80099f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d101      	bne.n	80099d6 <HAL_UART_Receive_IT+0x38>
 80099d2:	2302      	movs	r3, #2
 80099d4:	e00f      	b.n	80099f6 <HAL_UART_Receive_IT+0x58>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80099e4:	88fb      	ldrh	r3, [r7, #6]
 80099e6:	461a      	mov	r2, r3
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fab6 	bl	8009f5c <UART_Start_Receive_IT>
 80099f0:	4603      	mov	r3, r0
 80099f2:	e000      	b.n	80099f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80099f4:	2302      	movs	r3, #2
  }
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b0ba      	sub	sp, #232	; 0xe8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10f      	bne.n	8009a66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4a:	f003 0320 	and.w	r3, r3, #32
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <HAL_UART_IRQHandler+0x66>
 8009a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb99 	bl	800a196 <UART_Receive_IT>
      return;
 8009a64:	e256      	b.n	8009f14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 80de 	beq.w	8009c2c <HAL_UART_IRQHandler+0x22c>
 8009a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 80d1 	beq.w	8009c2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00b      	beq.n	8009aae <HAL_UART_IRQHandler+0xae>
 8009a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	f043 0201 	orr.w	r2, r3, #1
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab2:	f003 0304 	and.w	r3, r3, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00b      	beq.n	8009ad2 <HAL_UART_IRQHandler+0xd2>
 8009aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	f043 0202 	orr.w	r2, r3, #2
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00b      	beq.n	8009af6 <HAL_UART_IRQHandler+0xf6>
 8009ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	f043 0204 	orr.w	r2, r3, #4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afa:	f003 0308 	and.w	r3, r3, #8
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d011      	beq.n	8009b26 <HAL_UART_IRQHandler+0x126>
 8009b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d105      	bne.n	8009b1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	f043 0208 	orr.w	r2, r3, #8
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 81ed 	beq.w	8009f0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b34:	f003 0320 	and.w	r3, r3, #32
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d008      	beq.n	8009b4e <HAL_UART_IRQHandler+0x14e>
 8009b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fb24 	bl	800a196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b40      	cmp	r3, #64	; 0x40
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2301      	moveq	r3, #1
 8009b5e:	2300      	movne	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	f003 0308 	and.w	r3, r3, #8
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d103      	bne.n	8009b7a <HAL_UART_IRQHandler+0x17a>
 8009b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d04f      	beq.n	8009c1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa2c 	bl	8009fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8a:	2b40      	cmp	r3, #64	; 0x40
 8009b8c:	d141      	bne.n	8009c12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3314      	adds	r3, #20
 8009b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3314      	adds	r3, #20
 8009bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1d9      	bne.n	8009b8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d013      	beq.n	8009c0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	4a7d      	ldr	r2, [pc, #500]	; (8009ddc <HAL_UART_IRQHandler+0x3dc>)
 8009be8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fc faa9 	bl	8006146 <HAL_DMA_Abort_IT>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d016      	beq.n	8009c28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c08:	e00e      	b.n	8009c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f990 	bl	8009f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c10:	e00a      	b.n	8009c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f98c 	bl	8009f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c18:	e006      	b.n	8009c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f988 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c26:	e170      	b.n	8009f0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c28:	bf00      	nop
    return;
 8009c2a:	e16e      	b.n	8009f0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	f040 814a 	bne.w	8009eca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3a:	f003 0310 	and.w	r3, r3, #16
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 8143 	beq.w	8009eca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 813c 	beq.w	8009eca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c52:	2300      	movs	r3, #0
 8009c54:	60bb      	str	r3, [r7, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60bb      	str	r3, [r7, #8]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c72:	2b40      	cmp	r3, #64	; 0x40
 8009c74:	f040 80b4 	bne.w	8009de0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 8140 	beq.w	8009f0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c96:	429a      	cmp	r2, r3
 8009c98:	f080 8139 	bcs.w	8009f0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cae:	f000 8088 	beq.w	8009dc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	330c      	adds	r3, #12
 8009cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	330c      	adds	r3, #12
 8009cda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1d9      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3314      	adds	r3, #20
 8009d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d10:	f023 0301 	bic.w	r3, r3, #1
 8009d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e1      	bne.n	8009cfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3314      	adds	r3, #20
 8009d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3314      	adds	r3, #20
 8009d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e3      	bne.n	8009d3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	330c      	adds	r3, #12
 8009d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d92:	f023 0310 	bic.w	r3, r3, #16
 8009d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	330c      	adds	r3, #12
 8009da0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009da4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009da6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009daa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dac:	e841 2300 	strex	r3, r2, [r1]
 8009db0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e3      	bne.n	8009d80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fc f952 	bl	8006066 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f8b6 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dd8:	e099      	b.n	8009f0e <HAL_UART_IRQHandler+0x50e>
 8009dda:	bf00      	nop
 8009ddc:	0800a09f 	.word	0x0800a09f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 808b 	beq.w	8009f12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 8086 	beq.w	8009f12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	330c      	adds	r3, #12
 8009e26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e2a:	647a      	str	r2, [r7, #68]	; 0x44
 8009e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e3      	bne.n	8009e06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3314      	adds	r3, #20
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	f023 0301 	bic.w	r3, r3, #1
 8009e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3314      	adds	r3, #20
 8009e5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e62:	633a      	str	r2, [r7, #48]	; 0x30
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e3      	bne.n	8009e3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	330c      	adds	r3, #12
 8009e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0310 	bic.w	r3, r3, #16
 8009e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ea8:	61fa      	str	r2, [r7, #28]
 8009eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	69b9      	ldr	r1, [r7, #24]
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e3      	bne.n	8009e84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f83e 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ec8:	e023      	b.n	8009f12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <HAL_UART_IRQHandler+0x4ea>
 8009ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f8ef 	bl	800a0c6 <UART_Transmit_IT>
    return;
 8009ee8:	e014      	b.n	8009f14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00e      	beq.n	8009f14 <HAL_UART_IRQHandler+0x514>
 8009ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d008      	beq.n	8009f14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f92f 	bl	800a166 <UART_EndTransmit_IT>
    return;
 8009f08:	e004      	b.n	8009f14 <HAL_UART_IRQHandler+0x514>
    return;
 8009f0a:	bf00      	nop
 8009f0c:	e002      	b.n	8009f14 <HAL_UART_IRQHandler+0x514>
      return;
 8009f0e:	bf00      	nop
 8009f10:	e000      	b.n	8009f14 <HAL_UART_IRQHandler+0x514>
      return;
 8009f12:	bf00      	nop
  }
}
 8009f14:	37e8      	adds	r7, #232	; 0xe8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop

08009f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	88fa      	ldrh	r2, [r7, #6]
 8009f74:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	88fa      	ldrh	r2, [r7, #6]
 8009f7a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2222      	movs	r2, #34	; 0x22
 8009f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fa8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0201 	orr.w	r2, r2, #1
 8009fb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f042 0220 	orr.w	r2, r2, #32
 8009fc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b095      	sub	sp, #84	; 0x54
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a000:	643a      	str	r2, [r7, #64]	; 0x40
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a008:	e841 2300 	strex	r3, r2, [r1]
 800a00c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e5      	bne.n	8009fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3314      	adds	r3, #20
 800a01a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	61fb      	str	r3, [r7, #28]
   return(result);
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3314      	adds	r3, #20
 800a032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a034:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e5      	bne.n	800a014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d119      	bne.n	800a084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	647b      	str	r3, [r7, #68]	; 0x44
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	330c      	adds	r3, #12
 800a06e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a070:	61ba      	str	r2, [r7, #24]
 800a072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6979      	ldr	r1, [r7, #20]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	613b      	str	r3, [r7, #16]
   return(result);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e5      	bne.n	800a050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a092:	bf00      	nop
 800a094:	3754      	adds	r7, #84	; 0x54
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f7ff ff39 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b21      	cmp	r3, #33	; 0x21
 800a0d8:	d13e      	bne.n	800a158 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e2:	d114      	bne.n	800a10e <UART_Transmit_IT+0x48>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d110      	bne.n	800a10e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a100:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	1c9a      	adds	r2, r3, #2
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	621a      	str	r2, [r3, #32]
 800a10c:	e008      	b.n	800a120 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	1c59      	adds	r1, r3, #1
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	6211      	str	r1, [r2, #32]
 800a118:	781a      	ldrb	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a124:	b29b      	uxth	r3, r3
 800a126:	3b01      	subs	r3, #1
 800a128:	b29b      	uxth	r3, r3
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	4619      	mov	r1, r3
 800a12e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10f      	bne.n	800a154 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68da      	ldr	r2, [r3, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a142:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a152:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	e000      	b.n	800a15a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a158:	2302      	movs	r3, #2
  }
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68da      	ldr	r2, [r3, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a17c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2220      	movs	r2, #32
 800a182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff fec8 	bl	8009f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b08c      	sub	sp, #48	; 0x30
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b22      	cmp	r3, #34	; 0x22
 800a1a8:	f040 80ab 	bne.w	800a302 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b4:	d117      	bne.n	800a1e6 <UART_Receive_IT+0x50>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d113      	bne.n	800a1e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1de:	1c9a      	adds	r2, r3, #2
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	629a      	str	r2, [r3, #40]	; 0x28
 800a1e4:	e026      	b.n	800a234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f8:	d007      	beq.n	800a20a <UART_Receive_IT+0x74>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <UART_Receive_IT+0x82>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d106      	bne.n	800a218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	e008      	b.n	800a22a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a224:	b2da      	uxtb	r2, r3
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a238:	b29b      	uxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	4619      	mov	r1, r3
 800a242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a244:	2b00      	cmp	r3, #0
 800a246:	d15a      	bne.n	800a2fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0220 	bic.w	r2, r2, #32
 800a256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	695a      	ldr	r2, [r3, #20]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 0201 	bic.w	r2, r2, #1
 800a276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a284:	2b01      	cmp	r3, #1
 800a286:	d135      	bne.n	800a2f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	330c      	adds	r3, #12
 800a294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	613b      	str	r3, [r7, #16]
   return(result);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f023 0310 	bic.w	r3, r3, #16
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ae:	623a      	str	r2, [r7, #32]
 800a2b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	69f9      	ldr	r1, [r7, #28]
 800a2b4:	6a3a      	ldr	r2, [r7, #32]
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e5      	bne.n	800a28e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0310 	and.w	r3, r3, #16
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	d10a      	bne.n	800a2e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7ff fe29 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
 800a2f2:	e002      	b.n	800a2fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f7f9 fdef 	bl	8003ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e002      	b.n	800a304 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e000      	b.n	800a304 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a302:	2302      	movs	r3, #2
  }
}
 800a304:	4618      	mov	r0, r3
 800a306:	3730      	adds	r7, #48	; 0x30
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a30c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a310:	b0c0      	sub	sp, #256	; 0x100
 800a312:	af00      	add	r7, sp, #0
 800a314:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a328:	68d9      	ldr	r1, [r3, #12]
 800a32a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	ea40 0301 	orr.w	r3, r0, r1
 800a334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a33a:	689a      	ldr	r2, [r3, #8]
 800a33c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	431a      	orrs	r2, r3
 800a344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	4313      	orrs	r3, r2
 800a354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a364:	f021 010c 	bic.w	r1, r1, #12
 800a368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a372:	430b      	orrs	r3, r1
 800a374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a386:	6999      	ldr	r1, [r3, #24]
 800a388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	ea40 0301 	orr.w	r3, r0, r1
 800a392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	4b8f      	ldr	r3, [pc, #572]	; (800a5d8 <UART_SetConfig+0x2cc>)
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d005      	beq.n	800a3ac <UART_SetConfig+0xa0>
 800a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4b8d      	ldr	r3, [pc, #564]	; (800a5dc <UART_SetConfig+0x2d0>)
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d104      	bne.n	800a3b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3ac:	f7fd ff54 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 800a3b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a3b4:	e003      	b.n	800a3be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3b6:	f7fd ff3b 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 800a3ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c8:	f040 810c 	bne.w	800a5e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	1891      	adds	r1, r2, r2
 800a3e4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3e6:	415b      	adcs	r3, r3
 800a3e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	eb12 0801 	adds.w	r8, r2, r1
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	eb43 0901 	adc.w	r9, r3, r1
 800a3fa:	f04f 0200 	mov.w	r2, #0
 800a3fe:	f04f 0300 	mov.w	r3, #0
 800a402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a40a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a40e:	4690      	mov	r8, r2
 800a410:	4699      	mov	r9, r3
 800a412:	4623      	mov	r3, r4
 800a414:	eb18 0303 	adds.w	r3, r8, r3
 800a418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a41c:	462b      	mov	r3, r5
 800a41e:	eb49 0303 	adc.w	r3, r9, r3
 800a422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a432:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a43a:	460b      	mov	r3, r1
 800a43c:	18db      	adds	r3, r3, r3
 800a43e:	653b      	str	r3, [r7, #80]	; 0x50
 800a440:	4613      	mov	r3, r2
 800a442:	eb42 0303 	adc.w	r3, r2, r3
 800a446:	657b      	str	r3, [r7, #84]	; 0x54
 800a448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a44c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a450:	f7f6 fc32 	bl	8000cb8 <__aeabi_uldivmod>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4b61      	ldr	r3, [pc, #388]	; (800a5e0 <UART_SetConfig+0x2d4>)
 800a45a:	fba3 2302 	umull	r2, r3, r3, r2
 800a45e:	095b      	lsrs	r3, r3, #5
 800a460:	011c      	lsls	r4, r3, #4
 800a462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a466:	2200      	movs	r2, #0
 800a468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a46c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a474:	4642      	mov	r2, r8
 800a476:	464b      	mov	r3, r9
 800a478:	1891      	adds	r1, r2, r2
 800a47a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a47c:	415b      	adcs	r3, r3
 800a47e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a484:	4641      	mov	r1, r8
 800a486:	eb12 0a01 	adds.w	sl, r2, r1
 800a48a:	4649      	mov	r1, r9
 800a48c:	eb43 0b01 	adc.w	fp, r3, r1
 800a490:	f04f 0200 	mov.w	r2, #0
 800a494:	f04f 0300 	mov.w	r3, #0
 800a498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a49c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a4a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4a4:	4692      	mov	sl, r2
 800a4a6:	469b      	mov	fp, r3
 800a4a8:	4643      	mov	r3, r8
 800a4aa:	eb1a 0303 	adds.w	r3, sl, r3
 800a4ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a4b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a4cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	18db      	adds	r3, r3, r3
 800a4d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	eb42 0303 	adc.w	r3, r2, r3
 800a4dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a4de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a4e6:	f7f6 fbe7 	bl	8000cb8 <__aeabi_uldivmod>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4b3b      	ldr	r3, [pc, #236]	; (800a5e0 <UART_SetConfig+0x2d4>)
 800a4f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	2264      	movs	r2, #100	; 0x64
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	1acb      	subs	r3, r1, r3
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a506:	4b36      	ldr	r3, [pc, #216]	; (800a5e0 <UART_SetConfig+0x2d4>)
 800a508:	fba3 2302 	umull	r2, r3, r3, r2
 800a50c:	095b      	lsrs	r3, r3, #5
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a514:	441c      	add	r4, r3
 800a516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a520:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	1891      	adds	r1, r2, r2
 800a52e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a530:	415b      	adcs	r3, r3
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a538:	4641      	mov	r1, r8
 800a53a:	1851      	adds	r1, r2, r1
 800a53c:	6339      	str	r1, [r7, #48]	; 0x30
 800a53e:	4649      	mov	r1, r9
 800a540:	414b      	adcs	r3, r1
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a550:	4659      	mov	r1, fp
 800a552:	00cb      	lsls	r3, r1, #3
 800a554:	4651      	mov	r1, sl
 800a556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a55a:	4651      	mov	r1, sl
 800a55c:	00ca      	lsls	r2, r1, #3
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	4603      	mov	r3, r0
 800a564:	4642      	mov	r2, r8
 800a566:	189b      	adds	r3, r3, r2
 800a568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a56c:	464b      	mov	r3, r9
 800a56e:	460a      	mov	r2, r1
 800a570:	eb42 0303 	adc.w	r3, r2, r3
 800a574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a58c:	460b      	mov	r3, r1
 800a58e:	18db      	adds	r3, r3, r3
 800a590:	62bb      	str	r3, [r7, #40]	; 0x28
 800a592:	4613      	mov	r3, r2
 800a594:	eb42 0303 	adc.w	r3, r2, r3
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a59a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a59e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a5a2:	f7f6 fb89 	bl	8000cb8 <__aeabi_uldivmod>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <UART_SetConfig+0x2d4>)
 800a5ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	2164      	movs	r1, #100	; 0x64
 800a5b4:	fb01 f303 	mul.w	r3, r1, r3
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	3332      	adds	r3, #50	; 0x32
 800a5be:	4a08      	ldr	r2, [pc, #32]	; (800a5e0 <UART_SetConfig+0x2d4>)
 800a5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c4:	095b      	lsrs	r3, r3, #5
 800a5c6:	f003 0207 	and.w	r2, r3, #7
 800a5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4422      	add	r2, r4
 800a5d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5d4:	e106      	b.n	800a7e4 <UART_SetConfig+0x4d8>
 800a5d6:	bf00      	nop
 800a5d8:	40011000 	.word	0x40011000
 800a5dc:	40011400 	.word	0x40011400
 800a5e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a5f6:	4642      	mov	r2, r8
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	1891      	adds	r1, r2, r2
 800a5fc:	6239      	str	r1, [r7, #32]
 800a5fe:	415b      	adcs	r3, r3
 800a600:	627b      	str	r3, [r7, #36]	; 0x24
 800a602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a606:	4641      	mov	r1, r8
 800a608:	1854      	adds	r4, r2, r1
 800a60a:	4649      	mov	r1, r9
 800a60c:	eb43 0501 	adc.w	r5, r3, r1
 800a610:	f04f 0200 	mov.w	r2, #0
 800a614:	f04f 0300 	mov.w	r3, #0
 800a618:	00eb      	lsls	r3, r5, #3
 800a61a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a61e:	00e2      	lsls	r2, r4, #3
 800a620:	4614      	mov	r4, r2
 800a622:	461d      	mov	r5, r3
 800a624:	4643      	mov	r3, r8
 800a626:	18e3      	adds	r3, r4, r3
 800a628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a62c:	464b      	mov	r3, r9
 800a62e:	eb45 0303 	adc.w	r3, r5, r3
 800a632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a646:	f04f 0200 	mov.w	r2, #0
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a652:	4629      	mov	r1, r5
 800a654:	008b      	lsls	r3, r1, #2
 800a656:	4621      	mov	r1, r4
 800a658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a65c:	4621      	mov	r1, r4
 800a65e:	008a      	lsls	r2, r1, #2
 800a660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a664:	f7f6 fb28 	bl	8000cb8 <__aeabi_uldivmod>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4b60      	ldr	r3, [pc, #384]	; (800a7f0 <UART_SetConfig+0x4e4>)
 800a66e:	fba3 2302 	umull	r2, r3, r3, r2
 800a672:	095b      	lsrs	r3, r3, #5
 800a674:	011c      	lsls	r4, r3, #4
 800a676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a688:	4642      	mov	r2, r8
 800a68a:	464b      	mov	r3, r9
 800a68c:	1891      	adds	r1, r2, r2
 800a68e:	61b9      	str	r1, [r7, #24]
 800a690:	415b      	adcs	r3, r3
 800a692:	61fb      	str	r3, [r7, #28]
 800a694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a698:	4641      	mov	r1, r8
 800a69a:	1851      	adds	r1, r2, r1
 800a69c:	6139      	str	r1, [r7, #16]
 800a69e:	4649      	mov	r1, r9
 800a6a0:	414b      	adcs	r3, r1
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	f04f 0200 	mov.w	r2, #0
 800a6a8:	f04f 0300 	mov.w	r3, #0
 800a6ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	00cb      	lsls	r3, r1, #3
 800a6b4:	4651      	mov	r1, sl
 800a6b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6ba:	4651      	mov	r1, sl
 800a6bc:	00ca      	lsls	r2, r1, #3
 800a6be:	4610      	mov	r0, r2
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	189b      	adds	r3, r3, r2
 800a6c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6cc:	464b      	mov	r3, r9
 800a6ce:	460a      	mov	r2, r1
 800a6d0:	eb42 0303 	adc.w	r3, r2, r3
 800a6d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	008b      	lsls	r3, r1, #2
 800a6f4:	4641      	mov	r1, r8
 800a6f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	008a      	lsls	r2, r1, #2
 800a6fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a702:	f7f6 fad9 	bl	8000cb8 <__aeabi_uldivmod>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	4b38      	ldr	r3, [pc, #224]	; (800a7f0 <UART_SetConfig+0x4e4>)
 800a70e:	fba3 2301 	umull	r2, r3, r3, r1
 800a712:	095b      	lsrs	r3, r3, #5
 800a714:	2264      	movs	r2, #100	; 0x64
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	1acb      	subs	r3, r1, r3
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	3332      	adds	r3, #50	; 0x32
 800a720:	4a33      	ldr	r2, [pc, #204]	; (800a7f0 <UART_SetConfig+0x4e4>)
 800a722:	fba2 2303 	umull	r2, r3, r2, r3
 800a726:	095b      	lsrs	r3, r3, #5
 800a728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a72c:	441c      	add	r4, r3
 800a72e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a732:	2200      	movs	r2, #0
 800a734:	673b      	str	r3, [r7, #112]	; 0x70
 800a736:	677a      	str	r2, [r7, #116]	; 0x74
 800a738:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	1891      	adds	r1, r2, r2
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	415b      	adcs	r3, r3
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a74c:	4641      	mov	r1, r8
 800a74e:	1851      	adds	r1, r2, r1
 800a750:	6039      	str	r1, [r7, #0]
 800a752:	4649      	mov	r1, r9
 800a754:	414b      	adcs	r3, r1
 800a756:	607b      	str	r3, [r7, #4]
 800a758:	f04f 0200 	mov.w	r2, #0
 800a75c:	f04f 0300 	mov.w	r3, #0
 800a760:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a764:	4659      	mov	r1, fp
 800a766:	00cb      	lsls	r3, r1, #3
 800a768:	4651      	mov	r1, sl
 800a76a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a76e:	4651      	mov	r1, sl
 800a770:	00ca      	lsls	r2, r1, #3
 800a772:	4610      	mov	r0, r2
 800a774:	4619      	mov	r1, r3
 800a776:	4603      	mov	r3, r0
 800a778:	4642      	mov	r2, r8
 800a77a:	189b      	adds	r3, r3, r2
 800a77c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a77e:	464b      	mov	r3, r9
 800a780:	460a      	mov	r2, r1
 800a782:	eb42 0303 	adc.w	r3, r2, r3
 800a786:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	663b      	str	r3, [r7, #96]	; 0x60
 800a792:	667a      	str	r2, [r7, #100]	; 0x64
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	008b      	lsls	r3, r1, #2
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	008a      	lsls	r2, r1, #2
 800a7ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a7b2:	f7f6 fa81 	bl	8000cb8 <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	; (800a7f0 <UART_SetConfig+0x4e4>)
 800a7bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a7c0:	095b      	lsrs	r3, r3, #5
 800a7c2:	2164      	movs	r1, #100	; 0x64
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	3332      	adds	r3, #50	; 0x32
 800a7ce:	4a08      	ldr	r2, [pc, #32]	; (800a7f0 <UART_SetConfig+0x4e4>)
 800a7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d4:	095b      	lsrs	r3, r3, #5
 800a7d6:	f003 020f 	and.w	r2, r3, #15
 800a7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4422      	add	r2, r4
 800a7e2:	609a      	str	r2, [r3, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7f0:	51eb851f 	.word	0x51eb851f

0800a7f4 <atof>:
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	f000 be13 	b.w	800b420 <strtod>

0800a7fa <atoi>:
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	f000 be9d 	b.w	800b53c <strtol>

0800a802 <sulp>:
 800a802:	b570      	push	{r4, r5, r6, lr}
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
 800a808:	ec45 4b10 	vmov	d0, r4, r5
 800a80c:	4616      	mov	r6, r2
 800a80e:	f003 fb8b 	bl	800df28 <__ulp>
 800a812:	ec51 0b10 	vmov	r0, r1, d0
 800a816:	b17e      	cbz	r6, 800a838 <sulp+0x36>
 800a818:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a81c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a820:	2b00      	cmp	r3, #0
 800a822:	dd09      	ble.n	800a838 <sulp+0x36>
 800a824:	051b      	lsls	r3, r3, #20
 800a826:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a82a:	2400      	movs	r4, #0
 800a82c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 fef8 	bl	8000628 <__aeabi_dmul>
 800a838:	bd70      	pop	{r4, r5, r6, pc}
 800a83a:	0000      	movs	r0, r0
 800a83c:	0000      	movs	r0, r0
	...

0800a840 <_strtod_l>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	ed2d 8b02 	vpush	{d8}
 800a848:	b09b      	sub	sp, #108	; 0x6c
 800a84a:	4604      	mov	r4, r0
 800a84c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a84e:	2200      	movs	r2, #0
 800a850:	9216      	str	r2, [sp, #88]	; 0x58
 800a852:	460d      	mov	r5, r1
 800a854:	f04f 0800 	mov.w	r8, #0
 800a858:	f04f 0900 	mov.w	r9, #0
 800a85c:	460a      	mov	r2, r1
 800a85e:	9215      	str	r2, [sp, #84]	; 0x54
 800a860:	7811      	ldrb	r1, [r2, #0]
 800a862:	292b      	cmp	r1, #43	; 0x2b
 800a864:	d04c      	beq.n	800a900 <_strtod_l+0xc0>
 800a866:	d83a      	bhi.n	800a8de <_strtod_l+0x9e>
 800a868:	290d      	cmp	r1, #13
 800a86a:	d834      	bhi.n	800a8d6 <_strtod_l+0x96>
 800a86c:	2908      	cmp	r1, #8
 800a86e:	d834      	bhi.n	800a8da <_strtod_l+0x9a>
 800a870:	2900      	cmp	r1, #0
 800a872:	d03d      	beq.n	800a8f0 <_strtod_l+0xb0>
 800a874:	2200      	movs	r2, #0
 800a876:	920a      	str	r2, [sp, #40]	; 0x28
 800a878:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a87a:	7832      	ldrb	r2, [r6, #0]
 800a87c:	2a30      	cmp	r2, #48	; 0x30
 800a87e:	f040 80b4 	bne.w	800a9ea <_strtod_l+0x1aa>
 800a882:	7872      	ldrb	r2, [r6, #1]
 800a884:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a888:	2a58      	cmp	r2, #88	; 0x58
 800a88a:	d170      	bne.n	800a96e <_strtod_l+0x12e>
 800a88c:	9302      	str	r3, [sp, #8]
 800a88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	ab16      	add	r3, sp, #88	; 0x58
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4a8e      	ldr	r2, [pc, #568]	; (800aad0 <_strtod_l+0x290>)
 800a898:	ab17      	add	r3, sp, #92	; 0x5c
 800a89a:	a915      	add	r1, sp, #84	; 0x54
 800a89c:	4620      	mov	r0, r4
 800a89e:	f002 fc21 	bl	800d0e4 <__gethex>
 800a8a2:	f010 070f 	ands.w	r7, r0, #15
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	d005      	beq.n	800a8b6 <_strtod_l+0x76>
 800a8aa:	2f06      	cmp	r7, #6
 800a8ac:	d12a      	bne.n	800a904 <_strtod_l+0xc4>
 800a8ae:	3601      	adds	r6, #1
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9615      	str	r6, [sp, #84]	; 0x54
 800a8b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a8b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f040 857f 	bne.w	800b3bc <_strtod_l+0xb7c>
 800a8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c0:	b1db      	cbz	r3, 800a8fa <_strtod_l+0xba>
 800a8c2:	4642      	mov	r2, r8
 800a8c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8c8:	ec43 2b10 	vmov	d0, r2, r3
 800a8cc:	b01b      	add	sp, #108	; 0x6c
 800a8ce:	ecbd 8b02 	vpop	{d8}
 800a8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d6:	2920      	cmp	r1, #32
 800a8d8:	d1cc      	bne.n	800a874 <_strtod_l+0x34>
 800a8da:	3201      	adds	r2, #1
 800a8dc:	e7bf      	b.n	800a85e <_strtod_l+0x1e>
 800a8de:	292d      	cmp	r1, #45	; 0x2d
 800a8e0:	d1c8      	bne.n	800a874 <_strtod_l+0x34>
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	910a      	str	r1, [sp, #40]	; 0x28
 800a8e6:	1c51      	adds	r1, r2, #1
 800a8e8:	9115      	str	r1, [sp, #84]	; 0x54
 800a8ea:	7852      	ldrb	r2, [r2, #1]
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d1c3      	bne.n	800a878 <_strtod_l+0x38>
 800a8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8f2:	9515      	str	r5, [sp, #84]	; 0x54
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 855f 	bne.w	800b3b8 <_strtod_l+0xb78>
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	e7e3      	b.n	800a8c8 <_strtod_l+0x88>
 800a900:	2100      	movs	r1, #0
 800a902:	e7ef      	b.n	800a8e4 <_strtod_l+0xa4>
 800a904:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a906:	b13a      	cbz	r2, 800a918 <_strtod_l+0xd8>
 800a908:	2135      	movs	r1, #53	; 0x35
 800a90a:	a818      	add	r0, sp, #96	; 0x60
 800a90c:	f003 fc09 	bl	800e122 <__copybits>
 800a910:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a912:	4620      	mov	r0, r4
 800a914:	f002 ffdc 	bl	800d8d0 <_Bfree>
 800a918:	3f01      	subs	r7, #1
 800a91a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a91c:	2f04      	cmp	r7, #4
 800a91e:	d806      	bhi.n	800a92e <_strtod_l+0xee>
 800a920:	e8df f007 	tbb	[pc, r7]
 800a924:	201d0314 	.word	0x201d0314
 800a928:	14          	.byte	0x14
 800a929:	00          	.byte	0x00
 800a92a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a92e:	05e9      	lsls	r1, r5, #23
 800a930:	bf48      	it	mi
 800a932:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a93a:	0d1b      	lsrs	r3, r3, #20
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1b9      	bne.n	800a8b6 <_strtod_l+0x76>
 800a942:	f001 fc5d 	bl	800c200 <__errno>
 800a946:	2322      	movs	r3, #34	; 0x22
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	e7b4      	b.n	800a8b6 <_strtod_l+0x76>
 800a94c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a950:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a954:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a958:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a95c:	e7e7      	b.n	800a92e <_strtod_l+0xee>
 800a95e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aad8 <_strtod_l+0x298>
 800a962:	e7e4      	b.n	800a92e <_strtod_l+0xee>
 800a964:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a968:	f04f 38ff 	mov.w	r8, #4294967295
 800a96c:	e7df      	b.n	800a92e <_strtod_l+0xee>
 800a96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	9215      	str	r2, [sp, #84]	; 0x54
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b30      	cmp	r3, #48	; 0x30
 800a978:	d0f9      	beq.n	800a96e <_strtod_l+0x12e>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d09b      	beq.n	800a8b6 <_strtod_l+0x76>
 800a97e:	2301      	movs	r3, #1
 800a980:	f04f 0a00 	mov.w	sl, #0
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a988:	930b      	str	r3, [sp, #44]	; 0x2c
 800a98a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a98e:	46d3      	mov	fp, sl
 800a990:	220a      	movs	r2, #10
 800a992:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a994:	7806      	ldrb	r6, [r0, #0]
 800a996:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a99a:	b2d9      	uxtb	r1, r3
 800a99c:	2909      	cmp	r1, #9
 800a99e:	d926      	bls.n	800a9ee <_strtod_l+0x1ae>
 800a9a0:	494c      	ldr	r1, [pc, #304]	; (800aad4 <_strtod_l+0x294>)
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f001 fbb5 	bl	800c112 <strncmp>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d030      	beq.n	800aa0e <_strtod_l+0x1ce>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	9005      	str	r0, [sp, #20]
 800a9b2:	465e      	mov	r6, fp
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2a65      	cmp	r2, #101	; 0x65
 800a9b8:	d001      	beq.n	800a9be <_strtod_l+0x17e>
 800a9ba:	2a45      	cmp	r2, #69	; 0x45
 800a9bc:	d113      	bne.n	800a9e6 <_strtod_l+0x1a6>
 800a9be:	b91e      	cbnz	r6, 800a9c8 <_strtod_l+0x188>
 800a9c0:	9a04      	ldr	r2, [sp, #16]
 800a9c2:	4302      	orrs	r2, r0
 800a9c4:	d094      	beq.n	800a8f0 <_strtod_l+0xb0>
 800a9c6:	2600      	movs	r6, #0
 800a9c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a9ca:	1c6a      	adds	r2, r5, #1
 800a9cc:	9215      	str	r2, [sp, #84]	; 0x54
 800a9ce:	786a      	ldrb	r2, [r5, #1]
 800a9d0:	2a2b      	cmp	r2, #43	; 0x2b
 800a9d2:	d074      	beq.n	800aabe <_strtod_l+0x27e>
 800a9d4:	2a2d      	cmp	r2, #45	; 0x2d
 800a9d6:	d078      	beq.n	800aaca <_strtod_l+0x28a>
 800a9d8:	f04f 0c00 	mov.w	ip, #0
 800a9dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a9e0:	2909      	cmp	r1, #9
 800a9e2:	d97f      	bls.n	800aae4 <_strtod_l+0x2a4>
 800a9e4:	9515      	str	r5, [sp, #84]	; 0x54
 800a9e6:	2700      	movs	r7, #0
 800a9e8:	e09e      	b.n	800ab28 <_strtod_l+0x2e8>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e7c8      	b.n	800a980 <_strtod_l+0x140>
 800a9ee:	f1bb 0f08 	cmp.w	fp, #8
 800a9f2:	bfd8      	it	le
 800a9f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a9f6:	f100 0001 	add.w	r0, r0, #1
 800a9fa:	bfda      	itte	le
 800a9fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa00:	9309      	strle	r3, [sp, #36]	; 0x24
 800aa02:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800aa06:	f10b 0b01 	add.w	fp, fp, #1
 800aa0a:	9015      	str	r0, [sp, #84]	; 0x54
 800aa0c:	e7c1      	b.n	800a992 <_strtod_l+0x152>
 800aa0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	9215      	str	r2, [sp, #84]	; 0x54
 800aa14:	785a      	ldrb	r2, [r3, #1]
 800aa16:	f1bb 0f00 	cmp.w	fp, #0
 800aa1a:	d037      	beq.n	800aa8c <_strtod_l+0x24c>
 800aa1c:	9005      	str	r0, [sp, #20]
 800aa1e:	465e      	mov	r6, fp
 800aa20:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d912      	bls.n	800aa4e <_strtod_l+0x20e>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e7c4      	b.n	800a9b6 <_strtod_l+0x176>
 800aa2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	9215      	str	r2, [sp, #84]	; 0x54
 800aa32:	785a      	ldrb	r2, [r3, #1]
 800aa34:	3001      	adds	r0, #1
 800aa36:	2a30      	cmp	r2, #48	; 0x30
 800aa38:	d0f8      	beq.n	800aa2c <_strtod_l+0x1ec>
 800aa3a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa3e:	2b08      	cmp	r3, #8
 800aa40:	f200 84c1 	bhi.w	800b3c6 <_strtod_l+0xb86>
 800aa44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa46:	9005      	str	r0, [sp, #20]
 800aa48:	2000      	movs	r0, #0
 800aa4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	3a30      	subs	r2, #48	; 0x30
 800aa50:	f100 0301 	add.w	r3, r0, #1
 800aa54:	d014      	beq.n	800aa80 <_strtod_l+0x240>
 800aa56:	9905      	ldr	r1, [sp, #20]
 800aa58:	4419      	add	r1, r3
 800aa5a:	9105      	str	r1, [sp, #20]
 800aa5c:	4633      	mov	r3, r6
 800aa5e:	eb00 0c06 	add.w	ip, r0, r6
 800aa62:	210a      	movs	r1, #10
 800aa64:	4563      	cmp	r3, ip
 800aa66:	d113      	bne.n	800aa90 <_strtod_l+0x250>
 800aa68:	1833      	adds	r3, r6, r0
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	f106 0601 	add.w	r6, r6, #1
 800aa70:	4406      	add	r6, r0
 800aa72:	dc1a      	bgt.n	800aaaa <_strtod_l+0x26a>
 800aa74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa76:	230a      	movs	r3, #10
 800aa78:	fb03 2301 	mla	r3, r3, r1, r2
 800aa7c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa82:	1c51      	adds	r1, r2, #1
 800aa84:	9115      	str	r1, [sp, #84]	; 0x54
 800aa86:	7852      	ldrb	r2, [r2, #1]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	e7c9      	b.n	800aa20 <_strtod_l+0x1e0>
 800aa8c:	4658      	mov	r0, fp
 800aa8e:	e7d2      	b.n	800aa36 <_strtod_l+0x1f6>
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	f103 0301 	add.w	r3, r3, #1
 800aa96:	dc03      	bgt.n	800aaa0 <_strtod_l+0x260>
 800aa98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa9a:	434f      	muls	r7, r1
 800aa9c:	9709      	str	r7, [sp, #36]	; 0x24
 800aa9e:	e7e1      	b.n	800aa64 <_strtod_l+0x224>
 800aaa0:	2b10      	cmp	r3, #16
 800aaa2:	bfd8      	it	le
 800aaa4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aaa8:	e7dc      	b.n	800aa64 <_strtod_l+0x224>
 800aaaa:	2e10      	cmp	r6, #16
 800aaac:	bfdc      	itt	le
 800aaae:	230a      	movle	r3, #10
 800aab0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aab4:	e7e3      	b.n	800aa7e <_strtod_l+0x23e>
 800aab6:	2300      	movs	r3, #0
 800aab8:	9305      	str	r3, [sp, #20]
 800aaba:	2301      	movs	r3, #1
 800aabc:	e780      	b.n	800a9c0 <_strtod_l+0x180>
 800aabe:	f04f 0c00 	mov.w	ip, #0
 800aac2:	1caa      	adds	r2, r5, #2
 800aac4:	9215      	str	r2, [sp, #84]	; 0x54
 800aac6:	78aa      	ldrb	r2, [r5, #2]
 800aac8:	e788      	b.n	800a9dc <_strtod_l+0x19c>
 800aaca:	f04f 0c01 	mov.w	ip, #1
 800aace:	e7f8      	b.n	800aac2 <_strtod_l+0x282>
 800aad0:	08010ca4 	.word	0x08010ca4
 800aad4:	08010ca0 	.word	0x08010ca0
 800aad8:	7ff00000 	.word	0x7ff00000
 800aadc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aade:	1c51      	adds	r1, r2, #1
 800aae0:	9115      	str	r1, [sp, #84]	; 0x54
 800aae2:	7852      	ldrb	r2, [r2, #1]
 800aae4:	2a30      	cmp	r2, #48	; 0x30
 800aae6:	d0f9      	beq.n	800aadc <_strtod_l+0x29c>
 800aae8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aaec:	2908      	cmp	r1, #8
 800aaee:	f63f af7a 	bhi.w	800a9e6 <_strtod_l+0x1a6>
 800aaf2:	3a30      	subs	r2, #48	; 0x30
 800aaf4:	9208      	str	r2, [sp, #32]
 800aaf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aaf8:	920c      	str	r2, [sp, #48]	; 0x30
 800aafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aafc:	1c57      	adds	r7, r2, #1
 800aafe:	9715      	str	r7, [sp, #84]	; 0x54
 800ab00:	7852      	ldrb	r2, [r2, #1]
 800ab02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ab06:	f1be 0f09 	cmp.w	lr, #9
 800ab0a:	d938      	bls.n	800ab7e <_strtod_l+0x33e>
 800ab0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab0e:	1a7f      	subs	r7, r7, r1
 800ab10:	2f08      	cmp	r7, #8
 800ab12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ab16:	dc03      	bgt.n	800ab20 <_strtod_l+0x2e0>
 800ab18:	9908      	ldr	r1, [sp, #32]
 800ab1a:	428f      	cmp	r7, r1
 800ab1c:	bfa8      	it	ge
 800ab1e:	460f      	movge	r7, r1
 800ab20:	f1bc 0f00 	cmp.w	ip, #0
 800ab24:	d000      	beq.n	800ab28 <_strtod_l+0x2e8>
 800ab26:	427f      	negs	r7, r7
 800ab28:	2e00      	cmp	r6, #0
 800ab2a:	d14f      	bne.n	800abcc <_strtod_l+0x38c>
 800ab2c:	9904      	ldr	r1, [sp, #16]
 800ab2e:	4301      	orrs	r1, r0
 800ab30:	f47f aec1 	bne.w	800a8b6 <_strtod_l+0x76>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f aedb 	bne.w	800a8f0 <_strtod_l+0xb0>
 800ab3a:	2a69      	cmp	r2, #105	; 0x69
 800ab3c:	d029      	beq.n	800ab92 <_strtod_l+0x352>
 800ab3e:	dc26      	bgt.n	800ab8e <_strtod_l+0x34e>
 800ab40:	2a49      	cmp	r2, #73	; 0x49
 800ab42:	d026      	beq.n	800ab92 <_strtod_l+0x352>
 800ab44:	2a4e      	cmp	r2, #78	; 0x4e
 800ab46:	f47f aed3 	bne.w	800a8f0 <_strtod_l+0xb0>
 800ab4a:	499b      	ldr	r1, [pc, #620]	; (800adb8 <_strtod_l+0x578>)
 800ab4c:	a815      	add	r0, sp, #84	; 0x54
 800ab4e:	f002 fd09 	bl	800d564 <__match>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f43f aecc 	beq.w	800a8f0 <_strtod_l+0xb0>
 800ab58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b28      	cmp	r3, #40	; 0x28
 800ab5e:	d12f      	bne.n	800abc0 <_strtod_l+0x380>
 800ab60:	4996      	ldr	r1, [pc, #600]	; (800adbc <_strtod_l+0x57c>)
 800ab62:	aa18      	add	r2, sp, #96	; 0x60
 800ab64:	a815      	add	r0, sp, #84	; 0x54
 800ab66:	f002 fd11 	bl	800d58c <__hexnan>
 800ab6a:	2805      	cmp	r0, #5
 800ab6c:	d128      	bne.n	800abc0 <_strtod_l+0x380>
 800ab6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ab78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ab7c:	e69b      	b.n	800a8b6 <_strtod_l+0x76>
 800ab7e:	9f08      	ldr	r7, [sp, #32]
 800ab80:	210a      	movs	r1, #10
 800ab82:	fb01 2107 	mla	r1, r1, r7, r2
 800ab86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ab8a:	9208      	str	r2, [sp, #32]
 800ab8c:	e7b5      	b.n	800aafa <_strtod_l+0x2ba>
 800ab8e:	2a6e      	cmp	r2, #110	; 0x6e
 800ab90:	e7d9      	b.n	800ab46 <_strtod_l+0x306>
 800ab92:	498b      	ldr	r1, [pc, #556]	; (800adc0 <_strtod_l+0x580>)
 800ab94:	a815      	add	r0, sp, #84	; 0x54
 800ab96:	f002 fce5 	bl	800d564 <__match>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	f43f aea8 	beq.w	800a8f0 <_strtod_l+0xb0>
 800aba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aba2:	4988      	ldr	r1, [pc, #544]	; (800adc4 <_strtod_l+0x584>)
 800aba4:	3b01      	subs	r3, #1
 800aba6:	a815      	add	r0, sp, #84	; 0x54
 800aba8:	9315      	str	r3, [sp, #84]	; 0x54
 800abaa:	f002 fcdb 	bl	800d564 <__match>
 800abae:	b910      	cbnz	r0, 800abb6 <_strtod_l+0x376>
 800abb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb2:	3301      	adds	r3, #1
 800abb4:	9315      	str	r3, [sp, #84]	; 0x54
 800abb6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800add4 <_strtod_l+0x594>
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	e67a      	b.n	800a8b6 <_strtod_l+0x76>
 800abc0:	4881      	ldr	r0, [pc, #516]	; (800adc8 <_strtod_l+0x588>)
 800abc2:	f001 fb59 	bl	800c278 <nan>
 800abc6:	ec59 8b10 	vmov	r8, r9, d0
 800abca:	e674      	b.n	800a8b6 <_strtod_l+0x76>
 800abcc:	9b05      	ldr	r3, [sp, #20]
 800abce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd0:	1afb      	subs	r3, r7, r3
 800abd2:	f1bb 0f00 	cmp.w	fp, #0
 800abd6:	bf08      	it	eq
 800abd8:	46b3      	moveq	fp, r6
 800abda:	2e10      	cmp	r6, #16
 800abdc:	9308      	str	r3, [sp, #32]
 800abde:	4635      	mov	r5, r6
 800abe0:	bfa8      	it	ge
 800abe2:	2510      	movge	r5, #16
 800abe4:	f7f5 fca6 	bl	8000534 <__aeabi_ui2d>
 800abe8:	2e09      	cmp	r6, #9
 800abea:	4680      	mov	r8, r0
 800abec:	4689      	mov	r9, r1
 800abee:	dd13      	ble.n	800ac18 <_strtod_l+0x3d8>
 800abf0:	4b76      	ldr	r3, [pc, #472]	; (800adcc <_strtod_l+0x58c>)
 800abf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800abf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abfa:	f7f5 fd15 	bl	8000628 <__aeabi_dmul>
 800abfe:	4680      	mov	r8, r0
 800ac00:	4650      	mov	r0, sl
 800ac02:	4689      	mov	r9, r1
 800ac04:	f7f5 fc96 	bl	8000534 <__aeabi_ui2d>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 fb54 	bl	80002bc <__adddf3>
 800ac14:	4680      	mov	r8, r0
 800ac16:	4689      	mov	r9, r1
 800ac18:	2e0f      	cmp	r6, #15
 800ac1a:	dc38      	bgt.n	800ac8e <_strtod_l+0x44e>
 800ac1c:	9b08      	ldr	r3, [sp, #32]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f43f ae49 	beq.w	800a8b6 <_strtod_l+0x76>
 800ac24:	dd24      	ble.n	800ac70 <_strtod_l+0x430>
 800ac26:	2b16      	cmp	r3, #22
 800ac28:	dc0b      	bgt.n	800ac42 <_strtod_l+0x402>
 800ac2a:	4968      	ldr	r1, [pc, #416]	; (800adcc <_strtod_l+0x58c>)
 800ac2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	f7f5 fcf6 	bl	8000628 <__aeabi_dmul>
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	4689      	mov	r9, r1
 800ac40:	e639      	b.n	800a8b6 <_strtod_l+0x76>
 800ac42:	9a08      	ldr	r2, [sp, #32]
 800ac44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	db20      	blt.n	800ac8e <_strtod_l+0x44e>
 800ac4c:	4c5f      	ldr	r4, [pc, #380]	; (800adcc <_strtod_l+0x58c>)
 800ac4e:	f1c6 060f 	rsb	r6, r6, #15
 800ac52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ac56:	4642      	mov	r2, r8
 800ac58:	464b      	mov	r3, r9
 800ac5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac5e:	f7f5 fce3 	bl	8000628 <__aeabi_dmul>
 800ac62:	9b08      	ldr	r3, [sp, #32]
 800ac64:	1b9e      	subs	r6, r3, r6
 800ac66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ac6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac6e:	e7e3      	b.n	800ac38 <_strtod_l+0x3f8>
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	3316      	adds	r3, #22
 800ac74:	db0b      	blt.n	800ac8e <_strtod_l+0x44e>
 800ac76:	9b05      	ldr	r3, [sp, #20]
 800ac78:	1bdf      	subs	r7, r3, r7
 800ac7a:	4b54      	ldr	r3, [pc, #336]	; (800adcc <_strtod_l+0x58c>)
 800ac7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ac80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac84:	4640      	mov	r0, r8
 800ac86:	4649      	mov	r1, r9
 800ac88:	f7f5 fdf8 	bl	800087c <__aeabi_ddiv>
 800ac8c:	e7d6      	b.n	800ac3c <_strtod_l+0x3fc>
 800ac8e:	9b08      	ldr	r3, [sp, #32]
 800ac90:	1b75      	subs	r5, r6, r5
 800ac92:	441d      	add	r5, r3
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	dd70      	ble.n	800ad7a <_strtod_l+0x53a>
 800ac98:	f015 030f 	ands.w	r3, r5, #15
 800ac9c:	d00a      	beq.n	800acb4 <_strtod_l+0x474>
 800ac9e:	494b      	ldr	r1, [pc, #300]	; (800adcc <_strtod_l+0x58c>)
 800aca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aca4:	4642      	mov	r2, r8
 800aca6:	464b      	mov	r3, r9
 800aca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acac:	f7f5 fcbc 	bl	8000628 <__aeabi_dmul>
 800acb0:	4680      	mov	r8, r0
 800acb2:	4689      	mov	r9, r1
 800acb4:	f035 050f 	bics.w	r5, r5, #15
 800acb8:	d04d      	beq.n	800ad56 <_strtod_l+0x516>
 800acba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800acbe:	dd22      	ble.n	800ad06 <_strtod_l+0x4c6>
 800acc0:	2500      	movs	r5, #0
 800acc2:	46ab      	mov	fp, r5
 800acc4:	9509      	str	r5, [sp, #36]	; 0x24
 800acc6:	9505      	str	r5, [sp, #20]
 800acc8:	2322      	movs	r3, #34	; 0x22
 800acca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800add4 <_strtod_l+0x594>
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	f04f 0800 	mov.w	r8, #0
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f43f aded 	beq.w	800a8b6 <_strtod_l+0x76>
 800acdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acde:	4620      	mov	r0, r4
 800ace0:	f002 fdf6 	bl	800d8d0 <_Bfree>
 800ace4:	9905      	ldr	r1, [sp, #20]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f002 fdf2 	bl	800d8d0 <_Bfree>
 800acec:	4659      	mov	r1, fp
 800acee:	4620      	mov	r0, r4
 800acf0:	f002 fdee 	bl	800d8d0 <_Bfree>
 800acf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acf6:	4620      	mov	r0, r4
 800acf8:	f002 fdea 	bl	800d8d0 <_Bfree>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4620      	mov	r0, r4
 800ad00:	f002 fde6 	bl	800d8d0 <_Bfree>
 800ad04:	e5d7      	b.n	800a8b6 <_strtod_l+0x76>
 800ad06:	4b32      	ldr	r3, [pc, #200]	; (800add0 <_strtod_l+0x590>)
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	112d      	asrs	r5, r5, #4
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	469a      	mov	sl, r3
 800ad14:	2d01      	cmp	r5, #1
 800ad16:	dc21      	bgt.n	800ad5c <_strtod_l+0x51c>
 800ad18:	b10b      	cbz	r3, 800ad1e <_strtod_l+0x4de>
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	4689      	mov	r9, r1
 800ad1e:	492c      	ldr	r1, [pc, #176]	; (800add0 <_strtod_l+0x590>)
 800ad20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ad24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ad28:	4642      	mov	r2, r8
 800ad2a:	464b      	mov	r3, r9
 800ad2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad30:	f7f5 fc7a 	bl	8000628 <__aeabi_dmul>
 800ad34:	4b27      	ldr	r3, [pc, #156]	; (800add4 <_strtod_l+0x594>)
 800ad36:	460a      	mov	r2, r1
 800ad38:	400b      	ands	r3, r1
 800ad3a:	4927      	ldr	r1, [pc, #156]	; (800add8 <_strtod_l+0x598>)
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	4680      	mov	r8, r0
 800ad40:	d8be      	bhi.n	800acc0 <_strtod_l+0x480>
 800ad42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad46:	428b      	cmp	r3, r1
 800ad48:	bf86      	itte	hi
 800ad4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800addc <_strtod_l+0x59c>
 800ad4e:	f04f 38ff 	movhi.w	r8, #4294967295
 800ad52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ad56:	2300      	movs	r3, #0
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	e07b      	b.n	800ae54 <_strtod_l+0x614>
 800ad5c:	07ea      	lsls	r2, r5, #31
 800ad5e:	d505      	bpl.n	800ad6c <_strtod_l+0x52c>
 800ad60:	9b04      	ldr	r3, [sp, #16]
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fc5f 	bl	8000628 <__aeabi_dmul>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	9a04      	ldr	r2, [sp, #16]
 800ad6e:	3208      	adds	r2, #8
 800ad70:	f10a 0a01 	add.w	sl, sl, #1
 800ad74:	106d      	asrs	r5, r5, #1
 800ad76:	9204      	str	r2, [sp, #16]
 800ad78:	e7cc      	b.n	800ad14 <_strtod_l+0x4d4>
 800ad7a:	d0ec      	beq.n	800ad56 <_strtod_l+0x516>
 800ad7c:	426d      	negs	r5, r5
 800ad7e:	f015 020f 	ands.w	r2, r5, #15
 800ad82:	d00a      	beq.n	800ad9a <_strtod_l+0x55a>
 800ad84:	4b11      	ldr	r3, [pc, #68]	; (800adcc <_strtod_l+0x58c>)
 800ad86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 fd73 	bl	800087c <__aeabi_ddiv>
 800ad96:	4680      	mov	r8, r0
 800ad98:	4689      	mov	r9, r1
 800ad9a:	112d      	asrs	r5, r5, #4
 800ad9c:	d0db      	beq.n	800ad56 <_strtod_l+0x516>
 800ad9e:	2d1f      	cmp	r5, #31
 800ada0:	dd1e      	ble.n	800ade0 <_strtod_l+0x5a0>
 800ada2:	2500      	movs	r5, #0
 800ada4:	46ab      	mov	fp, r5
 800ada6:	9509      	str	r5, [sp, #36]	; 0x24
 800ada8:	9505      	str	r5, [sp, #20]
 800adaa:	2322      	movs	r3, #34	; 0x22
 800adac:	f04f 0800 	mov.w	r8, #0
 800adb0:	f04f 0900 	mov.w	r9, #0
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	e78d      	b.n	800acd4 <_strtod_l+0x494>
 800adb8:	08010e06 	.word	0x08010e06
 800adbc:	08010cb8 	.word	0x08010cb8
 800adc0:	08010dfe 	.word	0x08010dfe
 800adc4:	08010e38 	.word	0x08010e38
 800adc8:	080110c8 	.word	0x080110c8
 800adcc:	08010fa8 	.word	0x08010fa8
 800add0:	08010f80 	.word	0x08010f80
 800add4:	7ff00000 	.word	0x7ff00000
 800add8:	7ca00000 	.word	0x7ca00000
 800addc:	7fefffff 	.word	0x7fefffff
 800ade0:	f015 0310 	ands.w	r3, r5, #16
 800ade4:	bf18      	it	ne
 800ade6:	236a      	movne	r3, #106	; 0x6a
 800ade8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b18c <_strtod_l+0x94c>
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	4640      	mov	r0, r8
 800adf0:	4649      	mov	r1, r9
 800adf2:	2300      	movs	r3, #0
 800adf4:	07ea      	lsls	r2, r5, #31
 800adf6:	d504      	bpl.n	800ae02 <_strtod_l+0x5c2>
 800adf8:	e9da 2300 	ldrd	r2, r3, [sl]
 800adfc:	f7f5 fc14 	bl	8000628 <__aeabi_dmul>
 800ae00:	2301      	movs	r3, #1
 800ae02:	106d      	asrs	r5, r5, #1
 800ae04:	f10a 0a08 	add.w	sl, sl, #8
 800ae08:	d1f4      	bne.n	800adf4 <_strtod_l+0x5b4>
 800ae0a:	b10b      	cbz	r3, 800ae10 <_strtod_l+0x5d0>
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	4689      	mov	r9, r1
 800ae10:	9b04      	ldr	r3, [sp, #16]
 800ae12:	b1bb      	cbz	r3, 800ae44 <_strtod_l+0x604>
 800ae14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ae18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	4649      	mov	r1, r9
 800ae20:	dd10      	ble.n	800ae44 <_strtod_l+0x604>
 800ae22:	2b1f      	cmp	r3, #31
 800ae24:	f340 811e 	ble.w	800b064 <_strtod_l+0x824>
 800ae28:	2b34      	cmp	r3, #52	; 0x34
 800ae2a:	bfde      	ittt	le
 800ae2c:	f04f 33ff 	movle.w	r3, #4294967295
 800ae30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ae34:	4093      	lslle	r3, r2
 800ae36:	f04f 0800 	mov.w	r8, #0
 800ae3a:	bfcc      	ite	gt
 800ae3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ae40:	ea03 0901 	andle.w	r9, r3, r1
 800ae44:	2200      	movs	r2, #0
 800ae46:	2300      	movs	r3, #0
 800ae48:	4640      	mov	r0, r8
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	f7f5 fe54 	bl	8000af8 <__aeabi_dcmpeq>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1a6      	bne.n	800ada2 <_strtod_l+0x562>
 800ae54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae5a:	4633      	mov	r3, r6
 800ae5c:	465a      	mov	r2, fp
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f002 fd9e 	bl	800d9a0 <__s2b>
 800ae64:	9009      	str	r0, [sp, #36]	; 0x24
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f af2a 	beq.w	800acc0 <_strtod_l+0x480>
 800ae6c:	9a08      	ldr	r2, [sp, #32]
 800ae6e:	9b05      	ldr	r3, [sp, #20]
 800ae70:	2a00      	cmp	r2, #0
 800ae72:	eba3 0307 	sub.w	r3, r3, r7
 800ae76:	bfa8      	it	ge
 800ae78:	2300      	movge	r3, #0
 800ae7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae7c:	2500      	movs	r5, #0
 800ae7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae82:	9312      	str	r3, [sp, #72]	; 0x48
 800ae84:	46ab      	mov	fp, r5
 800ae86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae88:	4620      	mov	r0, r4
 800ae8a:	6859      	ldr	r1, [r3, #4]
 800ae8c:	f002 fce0 	bl	800d850 <_Balloc>
 800ae90:	9005      	str	r0, [sp, #20]
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f af18 	beq.w	800acc8 <_strtod_l+0x488>
 800ae98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9a:	691a      	ldr	r2, [r3, #16]
 800ae9c:	3202      	adds	r2, #2
 800ae9e:	f103 010c 	add.w	r1, r3, #12
 800aea2:	0092      	lsls	r2, r2, #2
 800aea4:	300c      	adds	r0, #12
 800aea6:	f001 f9d8 	bl	800c25a <memcpy>
 800aeaa:	ec49 8b10 	vmov	d0, r8, r9
 800aeae:	aa18      	add	r2, sp, #96	; 0x60
 800aeb0:	a917      	add	r1, sp, #92	; 0x5c
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f003 f8a8 	bl	800e008 <__d2b>
 800aeb8:	ec49 8b18 	vmov	d8, r8, r9
 800aebc:	9016      	str	r0, [sp, #88]	; 0x58
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f af02 	beq.w	800acc8 <_strtod_l+0x488>
 800aec4:	2101      	movs	r1, #1
 800aec6:	4620      	mov	r0, r4
 800aec8:	f002 fe02 	bl	800dad0 <__i2b>
 800aecc:	4683      	mov	fp, r0
 800aece:	2800      	cmp	r0, #0
 800aed0:	f43f aefa 	beq.w	800acc8 <_strtod_l+0x488>
 800aed4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aed6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	bfab      	itete	ge
 800aedc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aede:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aee0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aee2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aee6:	bfac      	ite	ge
 800aee8:	eb06 0a03 	addge.w	sl, r6, r3
 800aeec:	1b9f      	sublt	r7, r3, r6
 800aeee:	9b04      	ldr	r3, [sp, #16]
 800aef0:	1af6      	subs	r6, r6, r3
 800aef2:	4416      	add	r6, r2
 800aef4:	4ba0      	ldr	r3, [pc, #640]	; (800b178 <_strtod_l+0x938>)
 800aef6:	3e01      	subs	r6, #1
 800aef8:	429e      	cmp	r6, r3
 800aefa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aefe:	f280 80c4 	bge.w	800b08a <_strtod_l+0x84a>
 800af02:	1b9b      	subs	r3, r3, r6
 800af04:	2b1f      	cmp	r3, #31
 800af06:	eba2 0203 	sub.w	r2, r2, r3
 800af0a:	f04f 0101 	mov.w	r1, #1
 800af0e:	f300 80b0 	bgt.w	800b072 <_strtod_l+0x832>
 800af12:	fa01 f303 	lsl.w	r3, r1, r3
 800af16:	930e      	str	r3, [sp, #56]	; 0x38
 800af18:	2300      	movs	r3, #0
 800af1a:	930d      	str	r3, [sp, #52]	; 0x34
 800af1c:	eb0a 0602 	add.w	r6, sl, r2
 800af20:	9b04      	ldr	r3, [sp, #16]
 800af22:	45b2      	cmp	sl, r6
 800af24:	4417      	add	r7, r2
 800af26:	441f      	add	r7, r3
 800af28:	4653      	mov	r3, sl
 800af2a:	bfa8      	it	ge
 800af2c:	4633      	movge	r3, r6
 800af2e:	42bb      	cmp	r3, r7
 800af30:	bfa8      	it	ge
 800af32:	463b      	movge	r3, r7
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfc2      	ittt	gt
 800af38:	1af6      	subgt	r6, r6, r3
 800af3a:	1aff      	subgt	r7, r7, r3
 800af3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800af40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af42:	2b00      	cmp	r3, #0
 800af44:	dd17      	ble.n	800af76 <_strtod_l+0x736>
 800af46:	4659      	mov	r1, fp
 800af48:	461a      	mov	r2, r3
 800af4a:	4620      	mov	r0, r4
 800af4c:	f002 fe80 	bl	800dc50 <__pow5mult>
 800af50:	4683      	mov	fp, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	f43f aeb8 	beq.w	800acc8 <_strtod_l+0x488>
 800af58:	4601      	mov	r1, r0
 800af5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af5c:	4620      	mov	r0, r4
 800af5e:	f002 fdcd 	bl	800dafc <__multiply>
 800af62:	900b      	str	r0, [sp, #44]	; 0x2c
 800af64:	2800      	cmp	r0, #0
 800af66:	f43f aeaf 	beq.w	800acc8 <_strtod_l+0x488>
 800af6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af6c:	4620      	mov	r0, r4
 800af6e:	f002 fcaf 	bl	800d8d0 <_Bfree>
 800af72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af74:	9316      	str	r3, [sp, #88]	; 0x58
 800af76:	2e00      	cmp	r6, #0
 800af78:	f300 808c 	bgt.w	800b094 <_strtod_l+0x854>
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd08      	ble.n	800af94 <_strtod_l+0x754>
 800af82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af84:	9905      	ldr	r1, [sp, #20]
 800af86:	4620      	mov	r0, r4
 800af88:	f002 fe62 	bl	800dc50 <__pow5mult>
 800af8c:	9005      	str	r0, [sp, #20]
 800af8e:	2800      	cmp	r0, #0
 800af90:	f43f ae9a 	beq.w	800acc8 <_strtod_l+0x488>
 800af94:	2f00      	cmp	r7, #0
 800af96:	dd08      	ble.n	800afaa <_strtod_l+0x76a>
 800af98:	9905      	ldr	r1, [sp, #20]
 800af9a:	463a      	mov	r2, r7
 800af9c:	4620      	mov	r0, r4
 800af9e:	f002 feb1 	bl	800dd04 <__lshift>
 800afa2:	9005      	str	r0, [sp, #20]
 800afa4:	2800      	cmp	r0, #0
 800afa6:	f43f ae8f 	beq.w	800acc8 <_strtod_l+0x488>
 800afaa:	f1ba 0f00 	cmp.w	sl, #0
 800afae:	dd08      	ble.n	800afc2 <_strtod_l+0x782>
 800afb0:	4659      	mov	r1, fp
 800afb2:	4652      	mov	r2, sl
 800afb4:	4620      	mov	r0, r4
 800afb6:	f002 fea5 	bl	800dd04 <__lshift>
 800afba:	4683      	mov	fp, r0
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f43f ae83 	beq.w	800acc8 <_strtod_l+0x488>
 800afc2:	9a05      	ldr	r2, [sp, #20]
 800afc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afc6:	4620      	mov	r0, r4
 800afc8:	f002 ff24 	bl	800de14 <__mdiff>
 800afcc:	4605      	mov	r5, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	f43f ae7a 	beq.w	800acc8 <_strtod_l+0x488>
 800afd4:	68c3      	ldr	r3, [r0, #12]
 800afd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afd8:	2300      	movs	r3, #0
 800afda:	60c3      	str	r3, [r0, #12]
 800afdc:	4659      	mov	r1, fp
 800afde:	f002 fefd 	bl	800dddc <__mcmp>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	da60      	bge.n	800b0a8 <_strtod_l+0x868>
 800afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe8:	ea53 0308 	orrs.w	r3, r3, r8
 800afec:	f040 8084 	bne.w	800b0f8 <_strtod_l+0x8b8>
 800aff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d17f      	bne.n	800b0f8 <_strtod_l+0x8b8>
 800aff8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800affc:	0d1b      	lsrs	r3, r3, #20
 800affe:	051b      	lsls	r3, r3, #20
 800b000:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b004:	d978      	bls.n	800b0f8 <_strtod_l+0x8b8>
 800b006:	696b      	ldr	r3, [r5, #20]
 800b008:	b913      	cbnz	r3, 800b010 <_strtod_l+0x7d0>
 800b00a:	692b      	ldr	r3, [r5, #16]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	dd73      	ble.n	800b0f8 <_strtod_l+0x8b8>
 800b010:	4629      	mov	r1, r5
 800b012:	2201      	movs	r2, #1
 800b014:	4620      	mov	r0, r4
 800b016:	f002 fe75 	bl	800dd04 <__lshift>
 800b01a:	4659      	mov	r1, fp
 800b01c:	4605      	mov	r5, r0
 800b01e:	f002 fedd 	bl	800dddc <__mcmp>
 800b022:	2800      	cmp	r0, #0
 800b024:	dd68      	ble.n	800b0f8 <_strtod_l+0x8b8>
 800b026:	9904      	ldr	r1, [sp, #16]
 800b028:	4a54      	ldr	r2, [pc, #336]	; (800b17c <_strtod_l+0x93c>)
 800b02a:	464b      	mov	r3, r9
 800b02c:	2900      	cmp	r1, #0
 800b02e:	f000 8084 	beq.w	800b13a <_strtod_l+0x8fa>
 800b032:	ea02 0109 	and.w	r1, r2, r9
 800b036:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b03a:	dc7e      	bgt.n	800b13a <_strtod_l+0x8fa>
 800b03c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b040:	f77f aeb3 	ble.w	800adaa <_strtod_l+0x56a>
 800b044:	4b4e      	ldr	r3, [pc, #312]	; (800b180 <_strtod_l+0x940>)
 800b046:	4640      	mov	r0, r8
 800b048:	4649      	mov	r1, r9
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 faec 	bl	8000628 <__aeabi_dmul>
 800b050:	4b4a      	ldr	r3, [pc, #296]	; (800b17c <_strtod_l+0x93c>)
 800b052:	400b      	ands	r3, r1
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f47f ae3f 	bne.w	800acdc <_strtod_l+0x49c>
 800b05e:	2322      	movs	r3, #34	; 0x22
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	e63b      	b.n	800acdc <_strtod_l+0x49c>
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	fa02 f303 	lsl.w	r3, r2, r3
 800b06c:	ea03 0808 	and.w	r8, r3, r8
 800b070:	e6e8      	b.n	800ae44 <_strtod_l+0x604>
 800b072:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b076:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b07a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b07e:	36e2      	adds	r6, #226	; 0xe2
 800b080:	fa01 f306 	lsl.w	r3, r1, r6
 800b084:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b088:	e748      	b.n	800af1c <_strtod_l+0x6dc>
 800b08a:	2100      	movs	r1, #0
 800b08c:	2301      	movs	r3, #1
 800b08e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b092:	e743      	b.n	800af1c <_strtod_l+0x6dc>
 800b094:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b096:	4632      	mov	r2, r6
 800b098:	4620      	mov	r0, r4
 800b09a:	f002 fe33 	bl	800dd04 <__lshift>
 800b09e:	9016      	str	r0, [sp, #88]	; 0x58
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	f47f af6b 	bne.w	800af7c <_strtod_l+0x73c>
 800b0a6:	e60f      	b.n	800acc8 <_strtod_l+0x488>
 800b0a8:	46ca      	mov	sl, r9
 800b0aa:	d171      	bne.n	800b190 <_strtod_l+0x950>
 800b0ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0b2:	b352      	cbz	r2, 800b10a <_strtod_l+0x8ca>
 800b0b4:	4a33      	ldr	r2, [pc, #204]	; (800b184 <_strtod_l+0x944>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d12a      	bne.n	800b110 <_strtod_l+0x8d0>
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	4641      	mov	r1, r8
 800b0be:	b1fb      	cbz	r3, 800b100 <_strtod_l+0x8c0>
 800b0c0:	4b2e      	ldr	r3, [pc, #184]	; (800b17c <_strtod_l+0x93c>)
 800b0c2:	ea09 0303 	and.w	r3, r9, r3
 800b0c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ce:	d81a      	bhi.n	800b106 <_strtod_l+0x8c6>
 800b0d0:	0d1b      	lsrs	r3, r3, #20
 800b0d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	4299      	cmp	r1, r3
 800b0dc:	d118      	bne.n	800b110 <_strtod_l+0x8d0>
 800b0de:	4b2a      	ldr	r3, [pc, #168]	; (800b188 <_strtod_l+0x948>)
 800b0e0:	459a      	cmp	sl, r3
 800b0e2:	d102      	bne.n	800b0ea <_strtod_l+0x8aa>
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	f43f adef 	beq.w	800acc8 <_strtod_l+0x488>
 800b0ea:	4b24      	ldr	r3, [pc, #144]	; (800b17c <_strtod_l+0x93c>)
 800b0ec:	ea0a 0303 	and.w	r3, sl, r3
 800b0f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b0f4:	f04f 0800 	mov.w	r8, #0
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1a2      	bne.n	800b044 <_strtod_l+0x804>
 800b0fe:	e5ed      	b.n	800acdc <_strtod_l+0x49c>
 800b100:	f04f 33ff 	mov.w	r3, #4294967295
 800b104:	e7e9      	b.n	800b0da <_strtod_l+0x89a>
 800b106:	4613      	mov	r3, r2
 800b108:	e7e7      	b.n	800b0da <_strtod_l+0x89a>
 800b10a:	ea53 0308 	orrs.w	r3, r3, r8
 800b10e:	d08a      	beq.n	800b026 <_strtod_l+0x7e6>
 800b110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b112:	b1e3      	cbz	r3, 800b14e <_strtod_l+0x90e>
 800b114:	ea13 0f0a 	tst.w	r3, sl
 800b118:	d0ee      	beq.n	800b0f8 <_strtod_l+0x8b8>
 800b11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b11c:	9a04      	ldr	r2, [sp, #16]
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	b1c3      	cbz	r3, 800b156 <_strtod_l+0x916>
 800b124:	f7ff fb6d 	bl	800a802 <sulp>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	ec51 0b18 	vmov	r0, r1, d8
 800b130:	f7f5 f8c4 	bl	80002bc <__adddf3>
 800b134:	4680      	mov	r8, r0
 800b136:	4689      	mov	r9, r1
 800b138:	e7de      	b.n	800b0f8 <_strtod_l+0x8b8>
 800b13a:	4013      	ands	r3, r2
 800b13c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b140:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b144:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b148:	f04f 38ff 	mov.w	r8, #4294967295
 800b14c:	e7d4      	b.n	800b0f8 <_strtod_l+0x8b8>
 800b14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b150:	ea13 0f08 	tst.w	r3, r8
 800b154:	e7e0      	b.n	800b118 <_strtod_l+0x8d8>
 800b156:	f7ff fb54 	bl	800a802 <sulp>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	ec51 0b18 	vmov	r0, r1, d8
 800b162:	f7f5 f8a9 	bl	80002b8 <__aeabi_dsub>
 800b166:	2200      	movs	r2, #0
 800b168:	2300      	movs	r3, #0
 800b16a:	4680      	mov	r8, r0
 800b16c:	4689      	mov	r9, r1
 800b16e:	f7f5 fcc3 	bl	8000af8 <__aeabi_dcmpeq>
 800b172:	2800      	cmp	r0, #0
 800b174:	d0c0      	beq.n	800b0f8 <_strtod_l+0x8b8>
 800b176:	e618      	b.n	800adaa <_strtod_l+0x56a>
 800b178:	fffffc02 	.word	0xfffffc02
 800b17c:	7ff00000 	.word	0x7ff00000
 800b180:	39500000 	.word	0x39500000
 800b184:	000fffff 	.word	0x000fffff
 800b188:	7fefffff 	.word	0x7fefffff
 800b18c:	08010cd0 	.word	0x08010cd0
 800b190:	4659      	mov	r1, fp
 800b192:	4628      	mov	r0, r5
 800b194:	f002 ff92 	bl	800e0bc <__ratio>
 800b198:	ec57 6b10 	vmov	r6, r7, d0
 800b19c:	ee10 0a10 	vmov	r0, s0
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	f7f5 fcba 	bl	8000b20 <__aeabi_dcmple>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d071      	beq.n	800b294 <_strtod_l+0xa54>
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d17c      	bne.n	800b2b0 <_strtod_l+0xa70>
 800b1b6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ba:	d15a      	bne.n	800b272 <_strtod_l+0xa32>
 800b1bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d15d      	bne.n	800b280 <_strtod_l+0xa40>
 800b1c4:	4b90      	ldr	r3, [pc, #576]	; (800b408 <_strtod_l+0xbc8>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f7f5 fc9e 	bl	8000b0c <__aeabi_dcmplt>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d15c      	bne.n	800b28e <_strtod_l+0xa4e>
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	4b8c      	ldr	r3, [pc, #560]	; (800b40c <_strtod_l+0xbcc>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f7f5 fa24 	bl	8000628 <__aeabi_dmul>
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	460f      	mov	r7, r1
 800b1e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b1e8:	9606      	str	r6, [sp, #24]
 800b1ea:	9307      	str	r3, [sp, #28]
 800b1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1f4:	4b86      	ldr	r3, [pc, #536]	; (800b410 <_strtod_l+0xbd0>)
 800b1f6:	ea0a 0303 	and.w	r3, sl, r3
 800b1fa:	930d      	str	r3, [sp, #52]	; 0x34
 800b1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1fe:	4b85      	ldr	r3, [pc, #532]	; (800b414 <_strtod_l+0xbd4>)
 800b200:	429a      	cmp	r2, r3
 800b202:	f040 8090 	bne.w	800b326 <_strtod_l+0xae6>
 800b206:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b20a:	ec49 8b10 	vmov	d0, r8, r9
 800b20e:	f002 fe8b 	bl	800df28 <__ulp>
 800b212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b216:	ec51 0b10 	vmov	r0, r1, d0
 800b21a:	f7f5 fa05 	bl	8000628 <__aeabi_dmul>
 800b21e:	4642      	mov	r2, r8
 800b220:	464b      	mov	r3, r9
 800b222:	f7f5 f84b 	bl	80002bc <__adddf3>
 800b226:	460b      	mov	r3, r1
 800b228:	4979      	ldr	r1, [pc, #484]	; (800b410 <_strtod_l+0xbd0>)
 800b22a:	4a7b      	ldr	r2, [pc, #492]	; (800b418 <_strtod_l+0xbd8>)
 800b22c:	4019      	ands	r1, r3
 800b22e:	4291      	cmp	r1, r2
 800b230:	4680      	mov	r8, r0
 800b232:	d944      	bls.n	800b2be <_strtod_l+0xa7e>
 800b234:	ee18 2a90 	vmov	r2, s17
 800b238:	4b78      	ldr	r3, [pc, #480]	; (800b41c <_strtod_l+0xbdc>)
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d104      	bne.n	800b248 <_strtod_l+0xa08>
 800b23e:	ee18 3a10 	vmov	r3, s16
 800b242:	3301      	adds	r3, #1
 800b244:	f43f ad40 	beq.w	800acc8 <_strtod_l+0x488>
 800b248:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b41c <_strtod_l+0xbdc>
 800b24c:	f04f 38ff 	mov.w	r8, #4294967295
 800b250:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b252:	4620      	mov	r0, r4
 800b254:	f002 fb3c 	bl	800d8d0 <_Bfree>
 800b258:	9905      	ldr	r1, [sp, #20]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f002 fb38 	bl	800d8d0 <_Bfree>
 800b260:	4659      	mov	r1, fp
 800b262:	4620      	mov	r0, r4
 800b264:	f002 fb34 	bl	800d8d0 <_Bfree>
 800b268:	4629      	mov	r1, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	f002 fb30 	bl	800d8d0 <_Bfree>
 800b270:	e609      	b.n	800ae86 <_strtod_l+0x646>
 800b272:	f1b8 0f01 	cmp.w	r8, #1
 800b276:	d103      	bne.n	800b280 <_strtod_l+0xa40>
 800b278:	f1b9 0f00 	cmp.w	r9, #0
 800b27c:	f43f ad95 	beq.w	800adaa <_strtod_l+0x56a>
 800b280:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b3d8 <_strtod_l+0xb98>
 800b284:	4f60      	ldr	r7, [pc, #384]	; (800b408 <_strtod_l+0xbc8>)
 800b286:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b28a:	2600      	movs	r6, #0
 800b28c:	e7ae      	b.n	800b1ec <_strtod_l+0x9ac>
 800b28e:	4f5f      	ldr	r7, [pc, #380]	; (800b40c <_strtod_l+0xbcc>)
 800b290:	2600      	movs	r6, #0
 800b292:	e7a7      	b.n	800b1e4 <_strtod_l+0x9a4>
 800b294:	4b5d      	ldr	r3, [pc, #372]	; (800b40c <_strtod_l+0xbcc>)
 800b296:	4630      	mov	r0, r6
 800b298:	4639      	mov	r1, r7
 800b29a:	2200      	movs	r2, #0
 800b29c:	f7f5 f9c4 	bl	8000628 <__aeabi_dmul>
 800b2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d09c      	beq.n	800b1e4 <_strtod_l+0x9a4>
 800b2aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b2ae:	e79d      	b.n	800b1ec <_strtod_l+0x9ac>
 800b2b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b3e0 <_strtod_l+0xba0>
 800b2b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2b8:	ec57 6b17 	vmov	r6, r7, d7
 800b2bc:	e796      	b.n	800b1ec <_strtod_l+0x9ac>
 800b2be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	46ca      	mov	sl, r9
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1c2      	bne.n	800b250 <_strtod_l+0xa10>
 800b2ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2d0:	0d1b      	lsrs	r3, r3, #20
 800b2d2:	051b      	lsls	r3, r3, #20
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d1bb      	bne.n	800b250 <_strtod_l+0xa10>
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f5 fd04 	bl	8000ce8 <__aeabi_d2lz>
 800b2e0:	f7f5 f974 	bl	80005cc <__aeabi_l2d>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f4 ffe4 	bl	80002b8 <__aeabi_dsub>
 800b2f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2f6:	ea43 0308 	orr.w	r3, r3, r8
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	460f      	mov	r7, r1
 800b300:	d054      	beq.n	800b3ac <_strtod_l+0xb6c>
 800b302:	a339      	add	r3, pc, #228	; (adr r3, 800b3e8 <_strtod_l+0xba8>)
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	f7f5 fc00 	bl	8000b0c <__aeabi_dcmplt>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f47f ace5 	bne.w	800acdc <_strtod_l+0x49c>
 800b312:	a337      	add	r3, pc, #220	; (adr r3, 800b3f0 <_strtod_l+0xbb0>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	f7f5 fc14 	bl	8000b48 <__aeabi_dcmpgt>
 800b320:	2800      	cmp	r0, #0
 800b322:	d095      	beq.n	800b250 <_strtod_l+0xa10>
 800b324:	e4da      	b.n	800acdc <_strtod_l+0x49c>
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	b333      	cbz	r3, 800b378 <_strtod_l+0xb38>
 800b32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b32c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b330:	d822      	bhi.n	800b378 <_strtod_l+0xb38>
 800b332:	a331      	add	r3, pc, #196	; (adr r3, 800b3f8 <_strtod_l+0xbb8>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f5 fbf0 	bl	8000b20 <__aeabi_dcmple>
 800b340:	b1a0      	cbz	r0, 800b36c <_strtod_l+0xb2c>
 800b342:	4639      	mov	r1, r7
 800b344:	4630      	mov	r0, r6
 800b346:	f7f5 fc47 	bl	8000bd8 <__aeabi_d2uiz>
 800b34a:	2801      	cmp	r0, #1
 800b34c:	bf38      	it	cc
 800b34e:	2001      	movcc	r0, #1
 800b350:	f7f5 f8f0 	bl	8000534 <__aeabi_ui2d>
 800b354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b356:	4606      	mov	r6, r0
 800b358:	460f      	mov	r7, r1
 800b35a:	bb23      	cbnz	r3, 800b3a6 <_strtod_l+0xb66>
 800b35c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b360:	9010      	str	r0, [sp, #64]	; 0x40
 800b362:	9311      	str	r3, [sp, #68]	; 0x44
 800b364:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b368:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b36c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b370:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	930f      	str	r3, [sp, #60]	; 0x3c
 800b378:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b37c:	eeb0 0a48 	vmov.f32	s0, s16
 800b380:	eef0 0a68 	vmov.f32	s1, s17
 800b384:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b388:	f002 fdce 	bl	800df28 <__ulp>
 800b38c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b390:	ec53 2b10 	vmov	r2, r3, d0
 800b394:	f7f5 f948 	bl	8000628 <__aeabi_dmul>
 800b398:	ec53 2b18 	vmov	r2, r3, d8
 800b39c:	f7f4 ff8e 	bl	80002bc <__adddf3>
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4689      	mov	r9, r1
 800b3a4:	e78d      	b.n	800b2c2 <_strtod_l+0xa82>
 800b3a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b3aa:	e7db      	b.n	800b364 <_strtod_l+0xb24>
 800b3ac:	a314      	add	r3, pc, #80	; (adr r3, 800b400 <_strtod_l+0xbc0>)
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f7f5 fbab 	bl	8000b0c <__aeabi_dcmplt>
 800b3b6:	e7b3      	b.n	800b320 <_strtod_l+0xae0>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b3bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	f7ff ba7c 	b.w	800a8be <_strtod_l+0x7e>
 800b3c6:	2a65      	cmp	r2, #101	; 0x65
 800b3c8:	f43f ab75 	beq.w	800aab6 <_strtod_l+0x276>
 800b3cc:	2a45      	cmp	r2, #69	; 0x45
 800b3ce:	f43f ab72 	beq.w	800aab6 <_strtod_l+0x276>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	f7ff bbaa 	b.w	800ab2c <_strtod_l+0x2ec>
 800b3d8:	00000000 	.word	0x00000000
 800b3dc:	bff00000 	.word	0xbff00000
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	94a03595 	.word	0x94a03595
 800b3ec:	3fdfffff 	.word	0x3fdfffff
 800b3f0:	35afe535 	.word	0x35afe535
 800b3f4:	3fe00000 	.word	0x3fe00000
 800b3f8:	ffc00000 	.word	0xffc00000
 800b3fc:	41dfffff 	.word	0x41dfffff
 800b400:	94a03595 	.word	0x94a03595
 800b404:	3fcfffff 	.word	0x3fcfffff
 800b408:	3ff00000 	.word	0x3ff00000
 800b40c:	3fe00000 	.word	0x3fe00000
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	7fe00000 	.word	0x7fe00000
 800b418:	7c9fffff 	.word	0x7c9fffff
 800b41c:	7fefffff 	.word	0x7fefffff

0800b420 <strtod>:
 800b420:	460a      	mov	r2, r1
 800b422:	4601      	mov	r1, r0
 800b424:	4802      	ldr	r0, [pc, #8]	; (800b430 <strtod+0x10>)
 800b426:	4b03      	ldr	r3, [pc, #12]	; (800b434 <strtod+0x14>)
 800b428:	6800      	ldr	r0, [r0, #0]
 800b42a:	f7ff ba09 	b.w	800a840 <_strtod_l>
 800b42e:	bf00      	nop
 800b430:	200001ec 	.word	0x200001ec
 800b434:	20000034 	.word	0x20000034

0800b438 <_strtol_l.constprop.0>:
 800b438:	2b01      	cmp	r3, #1
 800b43a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b43e:	d001      	beq.n	800b444 <_strtol_l.constprop.0+0xc>
 800b440:	2b24      	cmp	r3, #36	; 0x24
 800b442:	d906      	bls.n	800b452 <_strtol_l.constprop.0+0x1a>
 800b444:	f000 fedc 	bl	800c200 <__errno>
 800b448:	2316      	movs	r3, #22
 800b44a:	6003      	str	r3, [r0, #0]
 800b44c:	2000      	movs	r0, #0
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b538 <_strtol_l.constprop.0+0x100>
 800b456:	460d      	mov	r5, r1
 800b458:	462e      	mov	r6, r5
 800b45a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b45e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b462:	f017 0708 	ands.w	r7, r7, #8
 800b466:	d1f7      	bne.n	800b458 <_strtol_l.constprop.0+0x20>
 800b468:	2c2d      	cmp	r4, #45	; 0x2d
 800b46a:	d132      	bne.n	800b4d2 <_strtol_l.constprop.0+0x9a>
 800b46c:	782c      	ldrb	r4, [r5, #0]
 800b46e:	2701      	movs	r7, #1
 800b470:	1cb5      	adds	r5, r6, #2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d05b      	beq.n	800b52e <_strtol_l.constprop.0+0xf6>
 800b476:	2b10      	cmp	r3, #16
 800b478:	d109      	bne.n	800b48e <_strtol_l.constprop.0+0x56>
 800b47a:	2c30      	cmp	r4, #48	; 0x30
 800b47c:	d107      	bne.n	800b48e <_strtol_l.constprop.0+0x56>
 800b47e:	782c      	ldrb	r4, [r5, #0]
 800b480:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b484:	2c58      	cmp	r4, #88	; 0x58
 800b486:	d14d      	bne.n	800b524 <_strtol_l.constprop.0+0xec>
 800b488:	786c      	ldrb	r4, [r5, #1]
 800b48a:	2310      	movs	r3, #16
 800b48c:	3502      	adds	r5, #2
 800b48e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b492:	f108 38ff 	add.w	r8, r8, #4294967295
 800b496:	f04f 0e00 	mov.w	lr, #0
 800b49a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b49e:	4676      	mov	r6, lr
 800b4a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b4a8:	f1bc 0f09 	cmp.w	ip, #9
 800b4ac:	d816      	bhi.n	800b4dc <_strtol_l.constprop.0+0xa4>
 800b4ae:	4664      	mov	r4, ip
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	dd24      	ble.n	800b4fe <_strtol_l.constprop.0+0xc6>
 800b4b4:	f1be 3fff 	cmp.w	lr, #4294967295
 800b4b8:	d008      	beq.n	800b4cc <_strtol_l.constprop.0+0x94>
 800b4ba:	45b1      	cmp	r9, r6
 800b4bc:	d31c      	bcc.n	800b4f8 <_strtol_l.constprop.0+0xc0>
 800b4be:	d101      	bne.n	800b4c4 <_strtol_l.constprop.0+0x8c>
 800b4c0:	45a2      	cmp	sl, r4
 800b4c2:	db19      	blt.n	800b4f8 <_strtol_l.constprop.0+0xc0>
 800b4c4:	fb06 4603 	mla	r6, r6, r3, r4
 800b4c8:	f04f 0e01 	mov.w	lr, #1
 800b4cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4d0:	e7e8      	b.n	800b4a4 <_strtol_l.constprop.0+0x6c>
 800b4d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4d4:	bf04      	itt	eq
 800b4d6:	782c      	ldrbeq	r4, [r5, #0]
 800b4d8:	1cb5      	addeq	r5, r6, #2
 800b4da:	e7ca      	b.n	800b472 <_strtol_l.constprop.0+0x3a>
 800b4dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b4e0:	f1bc 0f19 	cmp.w	ip, #25
 800b4e4:	d801      	bhi.n	800b4ea <_strtol_l.constprop.0+0xb2>
 800b4e6:	3c37      	subs	r4, #55	; 0x37
 800b4e8:	e7e2      	b.n	800b4b0 <_strtol_l.constprop.0+0x78>
 800b4ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4ee:	f1bc 0f19 	cmp.w	ip, #25
 800b4f2:	d804      	bhi.n	800b4fe <_strtol_l.constprop.0+0xc6>
 800b4f4:	3c57      	subs	r4, #87	; 0x57
 800b4f6:	e7db      	b.n	800b4b0 <_strtol_l.constprop.0+0x78>
 800b4f8:	f04f 3eff 	mov.w	lr, #4294967295
 800b4fc:	e7e6      	b.n	800b4cc <_strtol_l.constprop.0+0x94>
 800b4fe:	f1be 3fff 	cmp.w	lr, #4294967295
 800b502:	d105      	bne.n	800b510 <_strtol_l.constprop.0+0xd8>
 800b504:	2322      	movs	r3, #34	; 0x22
 800b506:	6003      	str	r3, [r0, #0]
 800b508:	4646      	mov	r6, r8
 800b50a:	b942      	cbnz	r2, 800b51e <_strtol_l.constprop.0+0xe6>
 800b50c:	4630      	mov	r0, r6
 800b50e:	e79e      	b.n	800b44e <_strtol_l.constprop.0+0x16>
 800b510:	b107      	cbz	r7, 800b514 <_strtol_l.constprop.0+0xdc>
 800b512:	4276      	negs	r6, r6
 800b514:	2a00      	cmp	r2, #0
 800b516:	d0f9      	beq.n	800b50c <_strtol_l.constprop.0+0xd4>
 800b518:	f1be 0f00 	cmp.w	lr, #0
 800b51c:	d000      	beq.n	800b520 <_strtol_l.constprop.0+0xe8>
 800b51e:	1e69      	subs	r1, r5, #1
 800b520:	6011      	str	r1, [r2, #0]
 800b522:	e7f3      	b.n	800b50c <_strtol_l.constprop.0+0xd4>
 800b524:	2430      	movs	r4, #48	; 0x30
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1b1      	bne.n	800b48e <_strtol_l.constprop.0+0x56>
 800b52a:	2308      	movs	r3, #8
 800b52c:	e7af      	b.n	800b48e <_strtol_l.constprop.0+0x56>
 800b52e:	2c30      	cmp	r4, #48	; 0x30
 800b530:	d0a5      	beq.n	800b47e <_strtol_l.constprop.0+0x46>
 800b532:	230a      	movs	r3, #10
 800b534:	e7ab      	b.n	800b48e <_strtol_l.constprop.0+0x56>
 800b536:	bf00      	nop
 800b538:	08010cf9 	.word	0x08010cf9

0800b53c <strtol>:
 800b53c:	4613      	mov	r3, r2
 800b53e:	460a      	mov	r2, r1
 800b540:	4601      	mov	r1, r0
 800b542:	4802      	ldr	r0, [pc, #8]	; (800b54c <strtol+0x10>)
 800b544:	6800      	ldr	r0, [r0, #0]
 800b546:	f7ff bf77 	b.w	800b438 <_strtol_l.constprop.0>
 800b54a:	bf00      	nop
 800b54c:	200001ec 	.word	0x200001ec

0800b550 <__cvt>:
 800b550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b554:	ec55 4b10 	vmov	r4, r5, d0
 800b558:	2d00      	cmp	r5, #0
 800b55a:	460e      	mov	r6, r1
 800b55c:	4619      	mov	r1, r3
 800b55e:	462b      	mov	r3, r5
 800b560:	bfbb      	ittet	lt
 800b562:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b566:	461d      	movlt	r5, r3
 800b568:	2300      	movge	r3, #0
 800b56a:	232d      	movlt	r3, #45	; 0x2d
 800b56c:	700b      	strb	r3, [r1, #0]
 800b56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b570:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b574:	4691      	mov	r9, r2
 800b576:	f023 0820 	bic.w	r8, r3, #32
 800b57a:	bfbc      	itt	lt
 800b57c:	4622      	movlt	r2, r4
 800b57e:	4614      	movlt	r4, r2
 800b580:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b584:	d005      	beq.n	800b592 <__cvt+0x42>
 800b586:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b58a:	d100      	bne.n	800b58e <__cvt+0x3e>
 800b58c:	3601      	adds	r6, #1
 800b58e:	2102      	movs	r1, #2
 800b590:	e000      	b.n	800b594 <__cvt+0x44>
 800b592:	2103      	movs	r1, #3
 800b594:	ab03      	add	r3, sp, #12
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	ab02      	add	r3, sp, #8
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	ec45 4b10 	vmov	d0, r4, r5
 800b5a0:	4653      	mov	r3, sl
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	f000 fef8 	bl	800c398 <_dtoa_r>
 800b5a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	d102      	bne.n	800b5b6 <__cvt+0x66>
 800b5b0:	f019 0f01 	tst.w	r9, #1
 800b5b4:	d022      	beq.n	800b5fc <__cvt+0xac>
 800b5b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5ba:	eb07 0906 	add.w	r9, r7, r6
 800b5be:	d110      	bne.n	800b5e2 <__cvt+0x92>
 800b5c0:	783b      	ldrb	r3, [r7, #0]
 800b5c2:	2b30      	cmp	r3, #48	; 0x30
 800b5c4:	d10a      	bne.n	800b5dc <__cvt+0x8c>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7f5 fa93 	bl	8000af8 <__aeabi_dcmpeq>
 800b5d2:	b918      	cbnz	r0, 800b5dc <__cvt+0x8c>
 800b5d4:	f1c6 0601 	rsb	r6, r6, #1
 800b5d8:	f8ca 6000 	str.w	r6, [sl]
 800b5dc:	f8da 3000 	ldr.w	r3, [sl]
 800b5e0:	4499      	add	r9, r3
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f5 fa85 	bl	8000af8 <__aeabi_dcmpeq>
 800b5ee:	b108      	cbz	r0, 800b5f4 <__cvt+0xa4>
 800b5f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5f4:	2230      	movs	r2, #48	; 0x30
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	454b      	cmp	r3, r9
 800b5fa:	d307      	bcc.n	800b60c <__cvt+0xbc>
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b600:	1bdb      	subs	r3, r3, r7
 800b602:	4638      	mov	r0, r7
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	b004      	add	sp, #16
 800b608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60c:	1c59      	adds	r1, r3, #1
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	e7f0      	b.n	800b5f6 <__cvt+0xa6>

0800b614 <__exponent>:
 800b614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b616:	4603      	mov	r3, r0
 800b618:	2900      	cmp	r1, #0
 800b61a:	bfb8      	it	lt
 800b61c:	4249      	neglt	r1, r1
 800b61e:	f803 2b02 	strb.w	r2, [r3], #2
 800b622:	bfb4      	ite	lt
 800b624:	222d      	movlt	r2, #45	; 0x2d
 800b626:	222b      	movge	r2, #43	; 0x2b
 800b628:	2909      	cmp	r1, #9
 800b62a:	7042      	strb	r2, [r0, #1]
 800b62c:	dd2a      	ble.n	800b684 <__exponent+0x70>
 800b62e:	f10d 0207 	add.w	r2, sp, #7
 800b632:	4617      	mov	r7, r2
 800b634:	260a      	movs	r6, #10
 800b636:	4694      	mov	ip, r2
 800b638:	fb91 f5f6 	sdiv	r5, r1, r6
 800b63c:	fb06 1415 	mls	r4, r6, r5, r1
 800b640:	3430      	adds	r4, #48	; 0x30
 800b642:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b646:	460c      	mov	r4, r1
 800b648:	2c63      	cmp	r4, #99	; 0x63
 800b64a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b64e:	4629      	mov	r1, r5
 800b650:	dcf1      	bgt.n	800b636 <__exponent+0x22>
 800b652:	3130      	adds	r1, #48	; 0x30
 800b654:	f1ac 0402 	sub.w	r4, ip, #2
 800b658:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b65c:	1c41      	adds	r1, r0, #1
 800b65e:	4622      	mov	r2, r4
 800b660:	42ba      	cmp	r2, r7
 800b662:	d30a      	bcc.n	800b67a <__exponent+0x66>
 800b664:	f10d 0209 	add.w	r2, sp, #9
 800b668:	eba2 020c 	sub.w	r2, r2, ip
 800b66c:	42bc      	cmp	r4, r7
 800b66e:	bf88      	it	hi
 800b670:	2200      	movhi	r2, #0
 800b672:	4413      	add	r3, r2
 800b674:	1a18      	subs	r0, r3, r0
 800b676:	b003      	add	sp, #12
 800b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b67a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b67e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b682:	e7ed      	b.n	800b660 <__exponent+0x4c>
 800b684:	2330      	movs	r3, #48	; 0x30
 800b686:	3130      	adds	r1, #48	; 0x30
 800b688:	7083      	strb	r3, [r0, #2]
 800b68a:	70c1      	strb	r1, [r0, #3]
 800b68c:	1d03      	adds	r3, r0, #4
 800b68e:	e7f1      	b.n	800b674 <__exponent+0x60>

0800b690 <_printf_float>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	ed2d 8b02 	vpush	{d8}
 800b698:	b08d      	sub	sp, #52	; 0x34
 800b69a:	460c      	mov	r4, r1
 800b69c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b6a0:	4616      	mov	r6, r2
 800b6a2:	461f      	mov	r7, r3
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	f000 fd61 	bl	800c16c <_localeconv_r>
 800b6aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	f7f4 fdf6 	bl	80002a0 <strlen>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b6c4:	3307      	adds	r3, #7
 800b6c6:	f023 0307 	bic.w	r3, r3, #7
 800b6ca:	f103 0208 	add.w	r2, r3, #8
 800b6ce:	f8c8 2000 	str.w	r2, [r8]
 800b6d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6da:	9307      	str	r3, [sp, #28]
 800b6dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6e0:	ee08 0a10 	vmov	s16, r0
 800b6e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b6e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6ec:	4b9e      	ldr	r3, [pc, #632]	; (800b968 <_printf_float+0x2d8>)
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	f7f5 fa33 	bl	8000b5c <__aeabi_dcmpun>
 800b6f6:	bb88      	cbnz	r0, 800b75c <_printf_float+0xcc>
 800b6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6fc:	4b9a      	ldr	r3, [pc, #616]	; (800b968 <_printf_float+0x2d8>)
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	f7f5 fa0d 	bl	8000b20 <__aeabi_dcmple>
 800b706:	bb48      	cbnz	r0, 800b75c <_printf_float+0xcc>
 800b708:	2200      	movs	r2, #0
 800b70a:	2300      	movs	r3, #0
 800b70c:	4640      	mov	r0, r8
 800b70e:	4649      	mov	r1, r9
 800b710:	f7f5 f9fc 	bl	8000b0c <__aeabi_dcmplt>
 800b714:	b110      	cbz	r0, 800b71c <_printf_float+0x8c>
 800b716:	232d      	movs	r3, #45	; 0x2d
 800b718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b71c:	4a93      	ldr	r2, [pc, #588]	; (800b96c <_printf_float+0x2dc>)
 800b71e:	4b94      	ldr	r3, [pc, #592]	; (800b970 <_printf_float+0x2e0>)
 800b720:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b724:	bf94      	ite	ls
 800b726:	4690      	movls	r8, r2
 800b728:	4698      	movhi	r8, r3
 800b72a:	2303      	movs	r3, #3
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	9b05      	ldr	r3, [sp, #20]
 800b730:	f023 0304 	bic.w	r3, r3, #4
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	f04f 0900 	mov.w	r9, #0
 800b73a:	9700      	str	r7, [sp, #0]
 800b73c:	4633      	mov	r3, r6
 800b73e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b740:	4621      	mov	r1, r4
 800b742:	4628      	mov	r0, r5
 800b744:	f000 f9da 	bl	800bafc <_printf_common>
 800b748:	3001      	adds	r0, #1
 800b74a:	f040 8090 	bne.w	800b86e <_printf_float+0x1de>
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	b00d      	add	sp, #52	; 0x34
 800b754:	ecbd 8b02 	vpop	{d8}
 800b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75c:	4642      	mov	r2, r8
 800b75e:	464b      	mov	r3, r9
 800b760:	4640      	mov	r0, r8
 800b762:	4649      	mov	r1, r9
 800b764:	f7f5 f9fa 	bl	8000b5c <__aeabi_dcmpun>
 800b768:	b140      	cbz	r0, 800b77c <_printf_float+0xec>
 800b76a:	464b      	mov	r3, r9
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bfbc      	itt	lt
 800b770:	232d      	movlt	r3, #45	; 0x2d
 800b772:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b776:	4a7f      	ldr	r2, [pc, #508]	; (800b974 <_printf_float+0x2e4>)
 800b778:	4b7f      	ldr	r3, [pc, #508]	; (800b978 <_printf_float+0x2e8>)
 800b77a:	e7d1      	b.n	800b720 <_printf_float+0x90>
 800b77c:	6863      	ldr	r3, [r4, #4]
 800b77e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b782:	9206      	str	r2, [sp, #24]
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	d13f      	bne.n	800b808 <_printf_float+0x178>
 800b788:	2306      	movs	r3, #6
 800b78a:	6063      	str	r3, [r4, #4]
 800b78c:	9b05      	ldr	r3, [sp, #20]
 800b78e:	6861      	ldr	r1, [r4, #4]
 800b790:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b794:	2300      	movs	r3, #0
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	ab0a      	add	r3, sp, #40	; 0x28
 800b79a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b79e:	ab09      	add	r3, sp, #36	; 0x24
 800b7a0:	ec49 8b10 	vmov	d0, r8, r9
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	6022      	str	r2, [r4, #0]
 800b7a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f7ff fecf 	bl	800b550 <__cvt>
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b6:	2b47      	cmp	r3, #71	; 0x47
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	d108      	bne.n	800b7ce <_printf_float+0x13e>
 800b7bc:	1cc8      	adds	r0, r1, #3
 800b7be:	db02      	blt.n	800b7c6 <_printf_float+0x136>
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	dd41      	ble.n	800b84a <_printf_float+0x1ba>
 800b7c6:	f1ab 0302 	sub.w	r3, fp, #2
 800b7ca:	fa5f fb83 	uxtb.w	fp, r3
 800b7ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7d2:	d820      	bhi.n	800b816 <_printf_float+0x186>
 800b7d4:	3901      	subs	r1, #1
 800b7d6:	465a      	mov	r2, fp
 800b7d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7dc:	9109      	str	r1, [sp, #36]	; 0x24
 800b7de:	f7ff ff19 	bl	800b614 <__exponent>
 800b7e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7e4:	1813      	adds	r3, r2, r0
 800b7e6:	2a01      	cmp	r2, #1
 800b7e8:	4681      	mov	r9, r0
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	dc02      	bgt.n	800b7f4 <_printf_float+0x164>
 800b7ee:	6822      	ldr	r2, [r4, #0]
 800b7f0:	07d2      	lsls	r2, r2, #31
 800b7f2:	d501      	bpl.n	800b7f8 <_printf_float+0x168>
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	6123      	str	r3, [r4, #16]
 800b7f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d09c      	beq.n	800b73a <_printf_float+0xaa>
 800b800:	232d      	movs	r3, #45	; 0x2d
 800b802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b806:	e798      	b.n	800b73a <_printf_float+0xaa>
 800b808:	9a06      	ldr	r2, [sp, #24]
 800b80a:	2a47      	cmp	r2, #71	; 0x47
 800b80c:	d1be      	bne.n	800b78c <_printf_float+0xfc>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1bc      	bne.n	800b78c <_printf_float+0xfc>
 800b812:	2301      	movs	r3, #1
 800b814:	e7b9      	b.n	800b78a <_printf_float+0xfa>
 800b816:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b81a:	d118      	bne.n	800b84e <_printf_float+0x1be>
 800b81c:	2900      	cmp	r1, #0
 800b81e:	6863      	ldr	r3, [r4, #4]
 800b820:	dd0b      	ble.n	800b83a <_printf_float+0x1aa>
 800b822:	6121      	str	r1, [r4, #16]
 800b824:	b913      	cbnz	r3, 800b82c <_printf_float+0x19c>
 800b826:	6822      	ldr	r2, [r4, #0]
 800b828:	07d0      	lsls	r0, r2, #31
 800b82a:	d502      	bpl.n	800b832 <_printf_float+0x1a2>
 800b82c:	3301      	adds	r3, #1
 800b82e:	440b      	add	r3, r1
 800b830:	6123      	str	r3, [r4, #16]
 800b832:	65a1      	str	r1, [r4, #88]	; 0x58
 800b834:	f04f 0900 	mov.w	r9, #0
 800b838:	e7de      	b.n	800b7f8 <_printf_float+0x168>
 800b83a:	b913      	cbnz	r3, 800b842 <_printf_float+0x1b2>
 800b83c:	6822      	ldr	r2, [r4, #0]
 800b83e:	07d2      	lsls	r2, r2, #31
 800b840:	d501      	bpl.n	800b846 <_printf_float+0x1b6>
 800b842:	3302      	adds	r3, #2
 800b844:	e7f4      	b.n	800b830 <_printf_float+0x1a0>
 800b846:	2301      	movs	r3, #1
 800b848:	e7f2      	b.n	800b830 <_printf_float+0x1a0>
 800b84a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b850:	4299      	cmp	r1, r3
 800b852:	db05      	blt.n	800b860 <_printf_float+0x1d0>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	6121      	str	r1, [r4, #16]
 800b858:	07d8      	lsls	r0, r3, #31
 800b85a:	d5ea      	bpl.n	800b832 <_printf_float+0x1a2>
 800b85c:	1c4b      	adds	r3, r1, #1
 800b85e:	e7e7      	b.n	800b830 <_printf_float+0x1a0>
 800b860:	2900      	cmp	r1, #0
 800b862:	bfd4      	ite	le
 800b864:	f1c1 0202 	rsble	r2, r1, #2
 800b868:	2201      	movgt	r2, #1
 800b86a:	4413      	add	r3, r2
 800b86c:	e7e0      	b.n	800b830 <_printf_float+0x1a0>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	055a      	lsls	r2, r3, #21
 800b872:	d407      	bmi.n	800b884 <_printf_float+0x1f4>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	4642      	mov	r2, r8
 800b878:	4631      	mov	r1, r6
 800b87a:	4628      	mov	r0, r5
 800b87c:	47b8      	blx	r7
 800b87e:	3001      	adds	r0, #1
 800b880:	d12c      	bne.n	800b8dc <_printf_float+0x24c>
 800b882:	e764      	b.n	800b74e <_printf_float+0xbe>
 800b884:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b888:	f240 80e0 	bls.w	800ba4c <_printf_float+0x3bc>
 800b88c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b890:	2200      	movs	r2, #0
 800b892:	2300      	movs	r3, #0
 800b894:	f7f5 f930 	bl	8000af8 <__aeabi_dcmpeq>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d034      	beq.n	800b906 <_printf_float+0x276>
 800b89c:	4a37      	ldr	r2, [pc, #220]	; (800b97c <_printf_float+0x2ec>)
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	47b8      	blx	r7
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f43f af51 	beq.w	800b74e <_printf_float+0xbe>
 800b8ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	db02      	blt.n	800b8ba <_printf_float+0x22a>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	07d8      	lsls	r0, r3, #31
 800b8b8:	d510      	bpl.n	800b8dc <_printf_float+0x24c>
 800b8ba:	ee18 3a10 	vmov	r3, s16
 800b8be:	4652      	mov	r2, sl
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	47b8      	blx	r7
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	f43f af41 	beq.w	800b74e <_printf_float+0xbe>
 800b8cc:	f04f 0800 	mov.w	r8, #0
 800b8d0:	f104 091a 	add.w	r9, r4, #26
 800b8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	4543      	cmp	r3, r8
 800b8da:	dc09      	bgt.n	800b8f0 <_printf_float+0x260>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	079b      	lsls	r3, r3, #30
 800b8e0:	f100 8107 	bmi.w	800baf2 <_printf_float+0x462>
 800b8e4:	68e0      	ldr	r0, [r4, #12]
 800b8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e8:	4298      	cmp	r0, r3
 800b8ea:	bfb8      	it	lt
 800b8ec:	4618      	movlt	r0, r3
 800b8ee:	e730      	b.n	800b752 <_printf_float+0xc2>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	464a      	mov	r2, r9
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b8      	blx	r7
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	f43f af27 	beq.w	800b74e <_printf_float+0xbe>
 800b900:	f108 0801 	add.w	r8, r8, #1
 800b904:	e7e6      	b.n	800b8d4 <_printf_float+0x244>
 800b906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dc39      	bgt.n	800b980 <_printf_float+0x2f0>
 800b90c:	4a1b      	ldr	r2, [pc, #108]	; (800b97c <_printf_float+0x2ec>)
 800b90e:	2301      	movs	r3, #1
 800b910:	4631      	mov	r1, r6
 800b912:	4628      	mov	r0, r5
 800b914:	47b8      	blx	r7
 800b916:	3001      	adds	r0, #1
 800b918:	f43f af19 	beq.w	800b74e <_printf_float+0xbe>
 800b91c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b920:	4313      	orrs	r3, r2
 800b922:	d102      	bne.n	800b92a <_printf_float+0x29a>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	07d9      	lsls	r1, r3, #31
 800b928:	d5d8      	bpl.n	800b8dc <_printf_float+0x24c>
 800b92a:	ee18 3a10 	vmov	r3, s16
 800b92e:	4652      	mov	r2, sl
 800b930:	4631      	mov	r1, r6
 800b932:	4628      	mov	r0, r5
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	f43f af09 	beq.w	800b74e <_printf_float+0xbe>
 800b93c:	f04f 0900 	mov.w	r9, #0
 800b940:	f104 0a1a 	add.w	sl, r4, #26
 800b944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b946:	425b      	negs	r3, r3
 800b948:	454b      	cmp	r3, r9
 800b94a:	dc01      	bgt.n	800b950 <_printf_float+0x2c0>
 800b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94e:	e792      	b.n	800b876 <_printf_float+0x1e6>
 800b950:	2301      	movs	r3, #1
 800b952:	4652      	mov	r2, sl
 800b954:	4631      	mov	r1, r6
 800b956:	4628      	mov	r0, r5
 800b958:	47b8      	blx	r7
 800b95a:	3001      	adds	r0, #1
 800b95c:	f43f aef7 	beq.w	800b74e <_printf_float+0xbe>
 800b960:	f109 0901 	add.w	r9, r9, #1
 800b964:	e7ee      	b.n	800b944 <_printf_float+0x2b4>
 800b966:	bf00      	nop
 800b968:	7fefffff 	.word	0x7fefffff
 800b96c:	08010df9 	.word	0x08010df9
 800b970:	08010dfd 	.word	0x08010dfd
 800b974:	08010e01 	.word	0x08010e01
 800b978:	08010e05 	.word	0x08010e05
 800b97c:	08010e09 	.word	0x08010e09
 800b980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b984:	429a      	cmp	r2, r3
 800b986:	bfa8      	it	ge
 800b988:	461a      	movge	r2, r3
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	4691      	mov	r9, r2
 800b98e:	dc37      	bgt.n	800ba00 <_printf_float+0x370>
 800b990:	f04f 0b00 	mov.w	fp, #0
 800b994:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b998:	f104 021a 	add.w	r2, r4, #26
 800b99c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b99e:	9305      	str	r3, [sp, #20]
 800b9a0:	eba3 0309 	sub.w	r3, r3, r9
 800b9a4:	455b      	cmp	r3, fp
 800b9a6:	dc33      	bgt.n	800ba10 <_printf_float+0x380>
 800b9a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	db3b      	blt.n	800ba28 <_printf_float+0x398>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	07da      	lsls	r2, r3, #31
 800b9b4:	d438      	bmi.n	800ba28 <_printf_float+0x398>
 800b9b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b9ba:	eba2 0903 	sub.w	r9, r2, r3
 800b9be:	9b05      	ldr	r3, [sp, #20]
 800b9c0:	1ad2      	subs	r2, r2, r3
 800b9c2:	4591      	cmp	r9, r2
 800b9c4:	bfa8      	it	ge
 800b9c6:	4691      	movge	r9, r2
 800b9c8:	f1b9 0f00 	cmp.w	r9, #0
 800b9cc:	dc35      	bgt.n	800ba3a <_printf_float+0x3aa>
 800b9ce:	f04f 0800 	mov.w	r8, #0
 800b9d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9d6:	f104 0a1a 	add.w	sl, r4, #26
 800b9da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9de:	1a9b      	subs	r3, r3, r2
 800b9e0:	eba3 0309 	sub.w	r3, r3, r9
 800b9e4:	4543      	cmp	r3, r8
 800b9e6:	f77f af79 	ble.w	800b8dc <_printf_float+0x24c>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4652      	mov	r2, sl
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b8      	blx	r7
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	f43f aeaa 	beq.w	800b74e <_printf_float+0xbe>
 800b9fa:	f108 0801 	add.w	r8, r8, #1
 800b9fe:	e7ec      	b.n	800b9da <_printf_float+0x34a>
 800ba00:	4613      	mov	r3, r2
 800ba02:	4631      	mov	r1, r6
 800ba04:	4642      	mov	r2, r8
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	d1c0      	bne.n	800b990 <_printf_float+0x300>
 800ba0e:	e69e      	b.n	800b74e <_printf_float+0xbe>
 800ba10:	2301      	movs	r3, #1
 800ba12:	4631      	mov	r1, r6
 800ba14:	4628      	mov	r0, r5
 800ba16:	9205      	str	r2, [sp, #20]
 800ba18:	47b8      	blx	r7
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	f43f ae97 	beq.w	800b74e <_printf_float+0xbe>
 800ba20:	9a05      	ldr	r2, [sp, #20]
 800ba22:	f10b 0b01 	add.w	fp, fp, #1
 800ba26:	e7b9      	b.n	800b99c <_printf_float+0x30c>
 800ba28:	ee18 3a10 	vmov	r3, s16
 800ba2c:	4652      	mov	r2, sl
 800ba2e:	4631      	mov	r1, r6
 800ba30:	4628      	mov	r0, r5
 800ba32:	47b8      	blx	r7
 800ba34:	3001      	adds	r0, #1
 800ba36:	d1be      	bne.n	800b9b6 <_printf_float+0x326>
 800ba38:	e689      	b.n	800b74e <_printf_float+0xbe>
 800ba3a:	9a05      	ldr	r2, [sp, #20]
 800ba3c:	464b      	mov	r3, r9
 800ba3e:	4442      	add	r2, r8
 800ba40:	4631      	mov	r1, r6
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	d1c1      	bne.n	800b9ce <_printf_float+0x33e>
 800ba4a:	e680      	b.n	800b74e <_printf_float+0xbe>
 800ba4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba4e:	2a01      	cmp	r2, #1
 800ba50:	dc01      	bgt.n	800ba56 <_printf_float+0x3c6>
 800ba52:	07db      	lsls	r3, r3, #31
 800ba54:	d53a      	bpl.n	800bacc <_printf_float+0x43c>
 800ba56:	2301      	movs	r3, #1
 800ba58:	4642      	mov	r2, r8
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b8      	blx	r7
 800ba60:	3001      	adds	r0, #1
 800ba62:	f43f ae74 	beq.w	800b74e <_printf_float+0xbe>
 800ba66:	ee18 3a10 	vmov	r3, s16
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f ae6b 	beq.w	800b74e <_printf_float+0xbe>
 800ba78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ba84:	f7f5 f838 	bl	8000af8 <__aeabi_dcmpeq>
 800ba88:	b9d8      	cbnz	r0, 800bac2 <_printf_float+0x432>
 800ba8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ba8e:	f108 0201 	add.w	r2, r8, #1
 800ba92:	4631      	mov	r1, r6
 800ba94:	4628      	mov	r0, r5
 800ba96:	47b8      	blx	r7
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d10e      	bne.n	800baba <_printf_float+0x42a>
 800ba9c:	e657      	b.n	800b74e <_printf_float+0xbe>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4652      	mov	r2, sl
 800baa2:	4631      	mov	r1, r6
 800baa4:	4628      	mov	r0, r5
 800baa6:	47b8      	blx	r7
 800baa8:	3001      	adds	r0, #1
 800baaa:	f43f ae50 	beq.w	800b74e <_printf_float+0xbe>
 800baae:	f108 0801 	add.w	r8, r8, #1
 800bab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab4:	3b01      	subs	r3, #1
 800bab6:	4543      	cmp	r3, r8
 800bab8:	dcf1      	bgt.n	800ba9e <_printf_float+0x40e>
 800baba:	464b      	mov	r3, r9
 800babc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bac0:	e6da      	b.n	800b878 <_printf_float+0x1e8>
 800bac2:	f04f 0800 	mov.w	r8, #0
 800bac6:	f104 0a1a 	add.w	sl, r4, #26
 800baca:	e7f2      	b.n	800bab2 <_printf_float+0x422>
 800bacc:	2301      	movs	r3, #1
 800bace:	4642      	mov	r2, r8
 800bad0:	e7df      	b.n	800ba92 <_printf_float+0x402>
 800bad2:	2301      	movs	r3, #1
 800bad4:	464a      	mov	r2, r9
 800bad6:	4631      	mov	r1, r6
 800bad8:	4628      	mov	r0, r5
 800bada:	47b8      	blx	r7
 800badc:	3001      	adds	r0, #1
 800bade:	f43f ae36 	beq.w	800b74e <_printf_float+0xbe>
 800bae2:	f108 0801 	add.w	r8, r8, #1
 800bae6:	68e3      	ldr	r3, [r4, #12]
 800bae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baea:	1a5b      	subs	r3, r3, r1
 800baec:	4543      	cmp	r3, r8
 800baee:	dcf0      	bgt.n	800bad2 <_printf_float+0x442>
 800baf0:	e6f8      	b.n	800b8e4 <_printf_float+0x254>
 800baf2:	f04f 0800 	mov.w	r8, #0
 800baf6:	f104 0919 	add.w	r9, r4, #25
 800bafa:	e7f4      	b.n	800bae6 <_printf_float+0x456>

0800bafc <_printf_common>:
 800bafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb00:	4616      	mov	r6, r2
 800bb02:	4699      	mov	r9, r3
 800bb04:	688a      	ldr	r2, [r1, #8]
 800bb06:	690b      	ldr	r3, [r1, #16]
 800bb08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	bfb8      	it	lt
 800bb10:	4613      	movlt	r3, r2
 800bb12:	6033      	str	r3, [r6, #0]
 800bb14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb18:	4607      	mov	r7, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	b10a      	cbz	r2, 800bb22 <_printf_common+0x26>
 800bb1e:	3301      	adds	r3, #1
 800bb20:	6033      	str	r3, [r6, #0]
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	0699      	lsls	r1, r3, #26
 800bb26:	bf42      	ittt	mi
 800bb28:	6833      	ldrmi	r3, [r6, #0]
 800bb2a:	3302      	addmi	r3, #2
 800bb2c:	6033      	strmi	r3, [r6, #0]
 800bb2e:	6825      	ldr	r5, [r4, #0]
 800bb30:	f015 0506 	ands.w	r5, r5, #6
 800bb34:	d106      	bne.n	800bb44 <_printf_common+0x48>
 800bb36:	f104 0a19 	add.w	sl, r4, #25
 800bb3a:	68e3      	ldr	r3, [r4, #12]
 800bb3c:	6832      	ldr	r2, [r6, #0]
 800bb3e:	1a9b      	subs	r3, r3, r2
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	dc26      	bgt.n	800bb92 <_printf_common+0x96>
 800bb44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb48:	1e13      	subs	r3, r2, #0
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	bf18      	it	ne
 800bb4e:	2301      	movne	r3, #1
 800bb50:	0692      	lsls	r2, r2, #26
 800bb52:	d42b      	bmi.n	800bbac <_printf_common+0xb0>
 800bb54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb58:	4649      	mov	r1, r9
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	47c0      	blx	r8
 800bb5e:	3001      	adds	r0, #1
 800bb60:	d01e      	beq.n	800bba0 <_printf_common+0xa4>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	6922      	ldr	r2, [r4, #16]
 800bb66:	f003 0306 	and.w	r3, r3, #6
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	bf02      	ittt	eq
 800bb6e:	68e5      	ldreq	r5, [r4, #12]
 800bb70:	6833      	ldreq	r3, [r6, #0]
 800bb72:	1aed      	subeq	r5, r5, r3
 800bb74:	68a3      	ldr	r3, [r4, #8]
 800bb76:	bf0c      	ite	eq
 800bb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb7c:	2500      	movne	r5, #0
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	bfc4      	itt	gt
 800bb82:	1a9b      	subgt	r3, r3, r2
 800bb84:	18ed      	addgt	r5, r5, r3
 800bb86:	2600      	movs	r6, #0
 800bb88:	341a      	adds	r4, #26
 800bb8a:	42b5      	cmp	r5, r6
 800bb8c:	d11a      	bne.n	800bbc4 <_printf_common+0xc8>
 800bb8e:	2000      	movs	r0, #0
 800bb90:	e008      	b.n	800bba4 <_printf_common+0xa8>
 800bb92:	2301      	movs	r3, #1
 800bb94:	4652      	mov	r2, sl
 800bb96:	4649      	mov	r1, r9
 800bb98:	4638      	mov	r0, r7
 800bb9a:	47c0      	blx	r8
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d103      	bne.n	800bba8 <_printf_common+0xac>
 800bba0:	f04f 30ff 	mov.w	r0, #4294967295
 800bba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba8:	3501      	adds	r5, #1
 800bbaa:	e7c6      	b.n	800bb3a <_printf_common+0x3e>
 800bbac:	18e1      	adds	r1, r4, r3
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	2030      	movs	r0, #48	; 0x30
 800bbb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbb6:	4422      	add	r2, r4
 800bbb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbc0:	3302      	adds	r3, #2
 800bbc2:	e7c7      	b.n	800bb54 <_printf_common+0x58>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	4622      	mov	r2, r4
 800bbc8:	4649      	mov	r1, r9
 800bbca:	4638      	mov	r0, r7
 800bbcc:	47c0      	blx	r8
 800bbce:	3001      	adds	r0, #1
 800bbd0:	d0e6      	beq.n	800bba0 <_printf_common+0xa4>
 800bbd2:	3601      	adds	r6, #1
 800bbd4:	e7d9      	b.n	800bb8a <_printf_common+0x8e>
	...

0800bbd8 <_printf_i>:
 800bbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbdc:	7e0f      	ldrb	r7, [r1, #24]
 800bbde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbe0:	2f78      	cmp	r7, #120	; 0x78
 800bbe2:	4691      	mov	r9, r2
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	469a      	mov	sl, r3
 800bbea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbee:	d807      	bhi.n	800bc00 <_printf_i+0x28>
 800bbf0:	2f62      	cmp	r7, #98	; 0x62
 800bbf2:	d80a      	bhi.n	800bc0a <_printf_i+0x32>
 800bbf4:	2f00      	cmp	r7, #0
 800bbf6:	f000 80d4 	beq.w	800bda2 <_printf_i+0x1ca>
 800bbfa:	2f58      	cmp	r7, #88	; 0x58
 800bbfc:	f000 80c0 	beq.w	800bd80 <_printf_i+0x1a8>
 800bc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc08:	e03a      	b.n	800bc80 <_printf_i+0xa8>
 800bc0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc0e:	2b15      	cmp	r3, #21
 800bc10:	d8f6      	bhi.n	800bc00 <_printf_i+0x28>
 800bc12:	a101      	add	r1, pc, #4	; (adr r1, 800bc18 <_printf_i+0x40>)
 800bc14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc18:	0800bc71 	.word	0x0800bc71
 800bc1c:	0800bc85 	.word	0x0800bc85
 800bc20:	0800bc01 	.word	0x0800bc01
 800bc24:	0800bc01 	.word	0x0800bc01
 800bc28:	0800bc01 	.word	0x0800bc01
 800bc2c:	0800bc01 	.word	0x0800bc01
 800bc30:	0800bc85 	.word	0x0800bc85
 800bc34:	0800bc01 	.word	0x0800bc01
 800bc38:	0800bc01 	.word	0x0800bc01
 800bc3c:	0800bc01 	.word	0x0800bc01
 800bc40:	0800bc01 	.word	0x0800bc01
 800bc44:	0800bd89 	.word	0x0800bd89
 800bc48:	0800bcb1 	.word	0x0800bcb1
 800bc4c:	0800bd43 	.word	0x0800bd43
 800bc50:	0800bc01 	.word	0x0800bc01
 800bc54:	0800bc01 	.word	0x0800bc01
 800bc58:	0800bdab 	.word	0x0800bdab
 800bc5c:	0800bc01 	.word	0x0800bc01
 800bc60:	0800bcb1 	.word	0x0800bcb1
 800bc64:	0800bc01 	.word	0x0800bc01
 800bc68:	0800bc01 	.word	0x0800bc01
 800bc6c:	0800bd4b 	.word	0x0800bd4b
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	1d1a      	adds	r2, r3, #4
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	602a      	str	r2, [r5, #0]
 800bc78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc80:	2301      	movs	r3, #1
 800bc82:	e09f      	b.n	800bdc4 <_printf_i+0x1ec>
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	0607      	lsls	r7, r0, #24
 800bc8a:	f103 0104 	add.w	r1, r3, #4
 800bc8e:	6029      	str	r1, [r5, #0]
 800bc90:	d501      	bpl.n	800bc96 <_printf_i+0xbe>
 800bc92:	681e      	ldr	r6, [r3, #0]
 800bc94:	e003      	b.n	800bc9e <_printf_i+0xc6>
 800bc96:	0646      	lsls	r6, r0, #25
 800bc98:	d5fb      	bpl.n	800bc92 <_printf_i+0xba>
 800bc9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	da03      	bge.n	800bcaa <_printf_i+0xd2>
 800bca2:	232d      	movs	r3, #45	; 0x2d
 800bca4:	4276      	negs	r6, r6
 800bca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcaa:	485a      	ldr	r0, [pc, #360]	; (800be14 <_printf_i+0x23c>)
 800bcac:	230a      	movs	r3, #10
 800bcae:	e012      	b.n	800bcd6 <_printf_i+0xfe>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	6820      	ldr	r0, [r4, #0]
 800bcb4:	1d19      	adds	r1, r3, #4
 800bcb6:	6029      	str	r1, [r5, #0]
 800bcb8:	0605      	lsls	r5, r0, #24
 800bcba:	d501      	bpl.n	800bcc0 <_printf_i+0xe8>
 800bcbc:	681e      	ldr	r6, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <_printf_i+0xee>
 800bcc0:	0641      	lsls	r1, r0, #25
 800bcc2:	d5fb      	bpl.n	800bcbc <_printf_i+0xe4>
 800bcc4:	881e      	ldrh	r6, [r3, #0]
 800bcc6:	4853      	ldr	r0, [pc, #332]	; (800be14 <_printf_i+0x23c>)
 800bcc8:	2f6f      	cmp	r7, #111	; 0x6f
 800bcca:	bf0c      	ite	eq
 800bccc:	2308      	moveq	r3, #8
 800bcce:	230a      	movne	r3, #10
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcd6:	6865      	ldr	r5, [r4, #4]
 800bcd8:	60a5      	str	r5, [r4, #8]
 800bcda:	2d00      	cmp	r5, #0
 800bcdc:	bfa2      	ittt	ge
 800bcde:	6821      	ldrge	r1, [r4, #0]
 800bce0:	f021 0104 	bicge.w	r1, r1, #4
 800bce4:	6021      	strge	r1, [r4, #0]
 800bce6:	b90e      	cbnz	r6, 800bcec <_printf_i+0x114>
 800bce8:	2d00      	cmp	r5, #0
 800bcea:	d04b      	beq.n	800bd84 <_printf_i+0x1ac>
 800bcec:	4615      	mov	r5, r2
 800bcee:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcf2:	fb03 6711 	mls	r7, r3, r1, r6
 800bcf6:	5dc7      	ldrb	r7, [r0, r7]
 800bcf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcfc:	4637      	mov	r7, r6
 800bcfe:	42bb      	cmp	r3, r7
 800bd00:	460e      	mov	r6, r1
 800bd02:	d9f4      	bls.n	800bcee <_printf_i+0x116>
 800bd04:	2b08      	cmp	r3, #8
 800bd06:	d10b      	bne.n	800bd20 <_printf_i+0x148>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	07de      	lsls	r6, r3, #31
 800bd0c:	d508      	bpl.n	800bd20 <_printf_i+0x148>
 800bd0e:	6923      	ldr	r3, [r4, #16]
 800bd10:	6861      	ldr	r1, [r4, #4]
 800bd12:	4299      	cmp	r1, r3
 800bd14:	bfde      	ittt	le
 800bd16:	2330      	movle	r3, #48	; 0x30
 800bd18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd20:	1b52      	subs	r2, r2, r5
 800bd22:	6122      	str	r2, [r4, #16]
 800bd24:	f8cd a000 	str.w	sl, [sp]
 800bd28:	464b      	mov	r3, r9
 800bd2a:	aa03      	add	r2, sp, #12
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	4640      	mov	r0, r8
 800bd30:	f7ff fee4 	bl	800bafc <_printf_common>
 800bd34:	3001      	adds	r0, #1
 800bd36:	d14a      	bne.n	800bdce <_printf_i+0x1f6>
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3c:	b004      	add	sp, #16
 800bd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	f043 0320 	orr.w	r3, r3, #32
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	4833      	ldr	r0, [pc, #204]	; (800be18 <_printf_i+0x240>)
 800bd4c:	2778      	movs	r7, #120	; 0x78
 800bd4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	6829      	ldr	r1, [r5, #0]
 800bd56:	061f      	lsls	r7, r3, #24
 800bd58:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd5c:	d402      	bmi.n	800bd64 <_printf_i+0x18c>
 800bd5e:	065f      	lsls	r7, r3, #25
 800bd60:	bf48      	it	mi
 800bd62:	b2b6      	uxthmi	r6, r6
 800bd64:	07df      	lsls	r7, r3, #31
 800bd66:	bf48      	it	mi
 800bd68:	f043 0320 	orrmi.w	r3, r3, #32
 800bd6c:	6029      	str	r1, [r5, #0]
 800bd6e:	bf48      	it	mi
 800bd70:	6023      	strmi	r3, [r4, #0]
 800bd72:	b91e      	cbnz	r6, 800bd7c <_printf_i+0x1a4>
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	f023 0320 	bic.w	r3, r3, #32
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	2310      	movs	r3, #16
 800bd7e:	e7a7      	b.n	800bcd0 <_printf_i+0xf8>
 800bd80:	4824      	ldr	r0, [pc, #144]	; (800be14 <_printf_i+0x23c>)
 800bd82:	e7e4      	b.n	800bd4e <_printf_i+0x176>
 800bd84:	4615      	mov	r5, r2
 800bd86:	e7bd      	b.n	800bd04 <_printf_i+0x12c>
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	6826      	ldr	r6, [r4, #0]
 800bd8c:	6961      	ldr	r1, [r4, #20]
 800bd8e:	1d18      	adds	r0, r3, #4
 800bd90:	6028      	str	r0, [r5, #0]
 800bd92:	0635      	lsls	r5, r6, #24
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	d501      	bpl.n	800bd9c <_printf_i+0x1c4>
 800bd98:	6019      	str	r1, [r3, #0]
 800bd9a:	e002      	b.n	800bda2 <_printf_i+0x1ca>
 800bd9c:	0670      	lsls	r0, r6, #25
 800bd9e:	d5fb      	bpl.n	800bd98 <_printf_i+0x1c0>
 800bda0:	8019      	strh	r1, [r3, #0]
 800bda2:	2300      	movs	r3, #0
 800bda4:	6123      	str	r3, [r4, #16]
 800bda6:	4615      	mov	r5, r2
 800bda8:	e7bc      	b.n	800bd24 <_printf_i+0x14c>
 800bdaa:	682b      	ldr	r3, [r5, #0]
 800bdac:	1d1a      	adds	r2, r3, #4
 800bdae:	602a      	str	r2, [r5, #0]
 800bdb0:	681d      	ldr	r5, [r3, #0]
 800bdb2:	6862      	ldr	r2, [r4, #4]
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f7f4 fa22 	bl	8000200 <memchr>
 800bdbc:	b108      	cbz	r0, 800bdc2 <_printf_i+0x1ea>
 800bdbe:	1b40      	subs	r0, r0, r5
 800bdc0:	6060      	str	r0, [r4, #4]
 800bdc2:	6863      	ldr	r3, [r4, #4]
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdcc:	e7aa      	b.n	800bd24 <_printf_i+0x14c>
 800bdce:	6923      	ldr	r3, [r4, #16]
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	47d0      	blx	sl
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d0ad      	beq.n	800bd38 <_printf_i+0x160>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	079b      	lsls	r3, r3, #30
 800bde0:	d413      	bmi.n	800be0a <_printf_i+0x232>
 800bde2:	68e0      	ldr	r0, [r4, #12]
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	4298      	cmp	r0, r3
 800bde8:	bfb8      	it	lt
 800bdea:	4618      	movlt	r0, r3
 800bdec:	e7a6      	b.n	800bd3c <_printf_i+0x164>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	47d0      	blx	sl
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d09d      	beq.n	800bd38 <_printf_i+0x160>
 800bdfc:	3501      	adds	r5, #1
 800bdfe:	68e3      	ldr	r3, [r4, #12]
 800be00:	9903      	ldr	r1, [sp, #12]
 800be02:	1a5b      	subs	r3, r3, r1
 800be04:	42ab      	cmp	r3, r5
 800be06:	dcf2      	bgt.n	800bdee <_printf_i+0x216>
 800be08:	e7eb      	b.n	800bde2 <_printf_i+0x20a>
 800be0a:	2500      	movs	r5, #0
 800be0c:	f104 0619 	add.w	r6, r4, #25
 800be10:	e7f5      	b.n	800bdfe <_printf_i+0x226>
 800be12:	bf00      	nop
 800be14:	08010e0b 	.word	0x08010e0b
 800be18:	08010e1c 	.word	0x08010e1c

0800be1c <std>:
 800be1c:	2300      	movs	r3, #0
 800be1e:	b510      	push	{r4, lr}
 800be20:	4604      	mov	r4, r0
 800be22:	e9c0 3300 	strd	r3, r3, [r0]
 800be26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be2a:	6083      	str	r3, [r0, #8]
 800be2c:	8181      	strh	r1, [r0, #12]
 800be2e:	6643      	str	r3, [r0, #100]	; 0x64
 800be30:	81c2      	strh	r2, [r0, #14]
 800be32:	6183      	str	r3, [r0, #24]
 800be34:	4619      	mov	r1, r3
 800be36:	2208      	movs	r2, #8
 800be38:	305c      	adds	r0, #92	; 0x5c
 800be3a:	f000 f962 	bl	800c102 <memset>
 800be3e:	4b0d      	ldr	r3, [pc, #52]	; (800be74 <std+0x58>)
 800be40:	6263      	str	r3, [r4, #36]	; 0x24
 800be42:	4b0d      	ldr	r3, [pc, #52]	; (800be78 <std+0x5c>)
 800be44:	62a3      	str	r3, [r4, #40]	; 0x28
 800be46:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <std+0x60>)
 800be48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be4a:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <std+0x64>)
 800be4c:	6323      	str	r3, [r4, #48]	; 0x30
 800be4e:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <std+0x68>)
 800be50:	6224      	str	r4, [r4, #32]
 800be52:	429c      	cmp	r4, r3
 800be54:	d006      	beq.n	800be64 <std+0x48>
 800be56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800be5a:	4294      	cmp	r4, r2
 800be5c:	d002      	beq.n	800be64 <std+0x48>
 800be5e:	33d0      	adds	r3, #208	; 0xd0
 800be60:	429c      	cmp	r4, r3
 800be62:	d105      	bne.n	800be70 <std+0x54>
 800be64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be6c:	f000 b9f2 	b.w	800c254 <__retarget_lock_init_recursive>
 800be70:	bd10      	pop	{r4, pc}
 800be72:	bf00      	nop
 800be74:	0800c049 	.word	0x0800c049
 800be78:	0800c06b 	.word	0x0800c06b
 800be7c:	0800c0a3 	.word	0x0800c0a3
 800be80:	0800c0c7 	.word	0x0800c0c7
 800be84:	20000bb8 	.word	0x20000bb8

0800be88 <stdio_exit_handler>:
 800be88:	4a02      	ldr	r2, [pc, #8]	; (800be94 <stdio_exit_handler+0xc>)
 800be8a:	4903      	ldr	r1, [pc, #12]	; (800be98 <stdio_exit_handler+0x10>)
 800be8c:	4803      	ldr	r0, [pc, #12]	; (800be9c <stdio_exit_handler+0x14>)
 800be8e:	f000 b869 	b.w	800bf64 <_fwalk_sglue>
 800be92:	bf00      	nop
 800be94:	20000028 	.word	0x20000028
 800be98:	0800e581 	.word	0x0800e581
 800be9c:	200001a0 	.word	0x200001a0

0800bea0 <cleanup_stdio>:
 800bea0:	6841      	ldr	r1, [r0, #4]
 800bea2:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <cleanup_stdio+0x34>)
 800bea4:	4299      	cmp	r1, r3
 800bea6:	b510      	push	{r4, lr}
 800bea8:	4604      	mov	r4, r0
 800beaa:	d001      	beq.n	800beb0 <cleanup_stdio+0x10>
 800beac:	f002 fb68 	bl	800e580 <_fflush_r>
 800beb0:	68a1      	ldr	r1, [r4, #8]
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <cleanup_stdio+0x38>)
 800beb4:	4299      	cmp	r1, r3
 800beb6:	d002      	beq.n	800bebe <cleanup_stdio+0x1e>
 800beb8:	4620      	mov	r0, r4
 800beba:	f002 fb61 	bl	800e580 <_fflush_r>
 800bebe:	68e1      	ldr	r1, [r4, #12]
 800bec0:	4b06      	ldr	r3, [pc, #24]	; (800bedc <cleanup_stdio+0x3c>)
 800bec2:	4299      	cmp	r1, r3
 800bec4:	d004      	beq.n	800bed0 <cleanup_stdio+0x30>
 800bec6:	4620      	mov	r0, r4
 800bec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800becc:	f002 bb58 	b.w	800e580 <_fflush_r>
 800bed0:	bd10      	pop	{r4, pc}
 800bed2:	bf00      	nop
 800bed4:	20000bb8 	.word	0x20000bb8
 800bed8:	20000c20 	.word	0x20000c20
 800bedc:	20000c88 	.word	0x20000c88

0800bee0 <global_stdio_init.part.0>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <global_stdio_init.part.0+0x30>)
 800bee4:	4c0b      	ldr	r4, [pc, #44]	; (800bf14 <global_stdio_init.part.0+0x34>)
 800bee6:	4a0c      	ldr	r2, [pc, #48]	; (800bf18 <global_stdio_init.part.0+0x38>)
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	4620      	mov	r0, r4
 800beec:	2200      	movs	r2, #0
 800beee:	2104      	movs	r1, #4
 800bef0:	f7ff ff94 	bl	800be1c <std>
 800bef4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bef8:	2201      	movs	r2, #1
 800befa:	2109      	movs	r1, #9
 800befc:	f7ff ff8e 	bl	800be1c <std>
 800bf00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf04:	2202      	movs	r2, #2
 800bf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf0a:	2112      	movs	r1, #18
 800bf0c:	f7ff bf86 	b.w	800be1c <std>
 800bf10:	20000cf0 	.word	0x20000cf0
 800bf14:	20000bb8 	.word	0x20000bb8
 800bf18:	0800be89 	.word	0x0800be89

0800bf1c <__sfp_lock_acquire>:
 800bf1c:	4801      	ldr	r0, [pc, #4]	; (800bf24 <__sfp_lock_acquire+0x8>)
 800bf1e:	f000 b99a 	b.w	800c256 <__retarget_lock_acquire_recursive>
 800bf22:	bf00      	nop
 800bf24:	20000cf9 	.word	0x20000cf9

0800bf28 <__sfp_lock_release>:
 800bf28:	4801      	ldr	r0, [pc, #4]	; (800bf30 <__sfp_lock_release+0x8>)
 800bf2a:	f000 b995 	b.w	800c258 <__retarget_lock_release_recursive>
 800bf2e:	bf00      	nop
 800bf30:	20000cf9 	.word	0x20000cf9

0800bf34 <__sinit>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	4604      	mov	r4, r0
 800bf38:	f7ff fff0 	bl	800bf1c <__sfp_lock_acquire>
 800bf3c:	6a23      	ldr	r3, [r4, #32]
 800bf3e:	b11b      	cbz	r3, 800bf48 <__sinit+0x14>
 800bf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf44:	f7ff bff0 	b.w	800bf28 <__sfp_lock_release>
 800bf48:	4b04      	ldr	r3, [pc, #16]	; (800bf5c <__sinit+0x28>)
 800bf4a:	6223      	str	r3, [r4, #32]
 800bf4c:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <__sinit+0x2c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1f5      	bne.n	800bf40 <__sinit+0xc>
 800bf54:	f7ff ffc4 	bl	800bee0 <global_stdio_init.part.0>
 800bf58:	e7f2      	b.n	800bf40 <__sinit+0xc>
 800bf5a:	bf00      	nop
 800bf5c:	0800bea1 	.word	0x0800bea1
 800bf60:	20000cf0 	.word	0x20000cf0

0800bf64 <_fwalk_sglue>:
 800bf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf68:	4607      	mov	r7, r0
 800bf6a:	4688      	mov	r8, r1
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	2600      	movs	r6, #0
 800bf70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf74:	f1b9 0901 	subs.w	r9, r9, #1
 800bf78:	d505      	bpl.n	800bf86 <_fwalk_sglue+0x22>
 800bf7a:	6824      	ldr	r4, [r4, #0]
 800bf7c:	2c00      	cmp	r4, #0
 800bf7e:	d1f7      	bne.n	800bf70 <_fwalk_sglue+0xc>
 800bf80:	4630      	mov	r0, r6
 800bf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d907      	bls.n	800bf9c <_fwalk_sglue+0x38>
 800bf8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf90:	3301      	adds	r3, #1
 800bf92:	d003      	beq.n	800bf9c <_fwalk_sglue+0x38>
 800bf94:	4629      	mov	r1, r5
 800bf96:	4638      	mov	r0, r7
 800bf98:	47c0      	blx	r8
 800bf9a:	4306      	orrs	r6, r0
 800bf9c:	3568      	adds	r5, #104	; 0x68
 800bf9e:	e7e9      	b.n	800bf74 <_fwalk_sglue+0x10>

0800bfa0 <sniprintf>:
 800bfa0:	b40c      	push	{r2, r3}
 800bfa2:	b530      	push	{r4, r5, lr}
 800bfa4:	4b17      	ldr	r3, [pc, #92]	; (800c004 <sniprintf+0x64>)
 800bfa6:	1e0c      	subs	r4, r1, #0
 800bfa8:	681d      	ldr	r5, [r3, #0]
 800bfaa:	b09d      	sub	sp, #116	; 0x74
 800bfac:	da08      	bge.n	800bfc0 <sniprintf+0x20>
 800bfae:	238b      	movs	r3, #139	; 0x8b
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	b01d      	add	sp, #116	; 0x74
 800bfb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfbc:	b002      	add	sp, #8
 800bfbe:	4770      	bx	lr
 800bfc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bfc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfc8:	bf14      	ite	ne
 800bfca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfce:	4623      	moveq	r3, r4
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfd8:	9002      	str	r0, [sp, #8]
 800bfda:	9006      	str	r0, [sp, #24]
 800bfdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfe0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfe2:	ab21      	add	r3, sp, #132	; 0x84
 800bfe4:	a902      	add	r1, sp, #8
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	f002 f945 	bl	800e278 <_svfiprintf_r>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	bfbc      	itt	lt
 800bff2:	238b      	movlt	r3, #139	; 0x8b
 800bff4:	602b      	strlt	r3, [r5, #0]
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	d0dd      	beq.n	800bfb6 <sniprintf+0x16>
 800bffa:	9b02      	ldr	r3, [sp, #8]
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	e7d9      	b.n	800bfb6 <sniprintf+0x16>
 800c002:	bf00      	nop
 800c004:	200001ec 	.word	0x200001ec

0800c008 <siprintf>:
 800c008:	b40e      	push	{r1, r2, r3}
 800c00a:	b500      	push	{lr}
 800c00c:	b09c      	sub	sp, #112	; 0x70
 800c00e:	ab1d      	add	r3, sp, #116	; 0x74
 800c010:	9002      	str	r0, [sp, #8]
 800c012:	9006      	str	r0, [sp, #24]
 800c014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c018:	4809      	ldr	r0, [pc, #36]	; (800c040 <siprintf+0x38>)
 800c01a:	9107      	str	r1, [sp, #28]
 800c01c:	9104      	str	r1, [sp, #16]
 800c01e:	4909      	ldr	r1, [pc, #36]	; (800c044 <siprintf+0x3c>)
 800c020:	f853 2b04 	ldr.w	r2, [r3], #4
 800c024:	9105      	str	r1, [sp, #20]
 800c026:	6800      	ldr	r0, [r0, #0]
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	a902      	add	r1, sp, #8
 800c02c:	f002 f924 	bl	800e278 <_svfiprintf_r>
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	b01c      	add	sp, #112	; 0x70
 800c038:	f85d eb04 	ldr.w	lr, [sp], #4
 800c03c:	b003      	add	sp, #12
 800c03e:	4770      	bx	lr
 800c040:	200001ec 	.word	0x200001ec
 800c044:	ffff0208 	.word	0xffff0208

0800c048 <__sread>:
 800c048:	b510      	push	{r4, lr}
 800c04a:	460c      	mov	r4, r1
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	f000 f8b2 	bl	800c1b8 <_read_r>
 800c054:	2800      	cmp	r0, #0
 800c056:	bfab      	itete	ge
 800c058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c05a:	89a3      	ldrhlt	r3, [r4, #12]
 800c05c:	181b      	addge	r3, r3, r0
 800c05e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c062:	bfac      	ite	ge
 800c064:	6563      	strge	r3, [r4, #84]	; 0x54
 800c066:	81a3      	strhlt	r3, [r4, #12]
 800c068:	bd10      	pop	{r4, pc}

0800c06a <__swrite>:
 800c06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	461f      	mov	r7, r3
 800c070:	898b      	ldrh	r3, [r1, #12]
 800c072:	05db      	lsls	r3, r3, #23
 800c074:	4605      	mov	r5, r0
 800c076:	460c      	mov	r4, r1
 800c078:	4616      	mov	r6, r2
 800c07a:	d505      	bpl.n	800c088 <__swrite+0x1e>
 800c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c080:	2302      	movs	r3, #2
 800c082:	2200      	movs	r2, #0
 800c084:	f000 f886 	bl	800c194 <_lseek_r>
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c092:	81a3      	strh	r3, [r4, #12]
 800c094:	4632      	mov	r2, r6
 800c096:	463b      	mov	r3, r7
 800c098:	4628      	mov	r0, r5
 800c09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	f000 b89d 	b.w	800c1dc <_write_r>

0800c0a2 <__sseek>:
 800c0a2:	b510      	push	{r4, lr}
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0aa:	f000 f873 	bl	800c194 <_lseek_r>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	bf15      	itete	ne
 800c0b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0be:	81a3      	strheq	r3, [r4, #12]
 800c0c0:	bf18      	it	ne
 800c0c2:	81a3      	strhne	r3, [r4, #12]
 800c0c4:	bd10      	pop	{r4, pc}

0800c0c6 <__sclose>:
 800c0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ca:	f000 b853 	b.w	800c174 <_close_r>

0800c0ce <memmove>:
 800c0ce:	4288      	cmp	r0, r1
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	eb01 0402 	add.w	r4, r1, r2
 800c0d6:	d902      	bls.n	800c0de <memmove+0x10>
 800c0d8:	4284      	cmp	r4, r0
 800c0da:	4623      	mov	r3, r4
 800c0dc:	d807      	bhi.n	800c0ee <memmove+0x20>
 800c0de:	1e43      	subs	r3, r0, #1
 800c0e0:	42a1      	cmp	r1, r4
 800c0e2:	d008      	beq.n	800c0f6 <memmove+0x28>
 800c0e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0ec:	e7f8      	b.n	800c0e0 <memmove+0x12>
 800c0ee:	4402      	add	r2, r0
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	428a      	cmp	r2, r1
 800c0f4:	d100      	bne.n	800c0f8 <memmove+0x2a>
 800c0f6:	bd10      	pop	{r4, pc}
 800c0f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c100:	e7f7      	b.n	800c0f2 <memmove+0x24>

0800c102 <memset>:
 800c102:	4402      	add	r2, r0
 800c104:	4603      	mov	r3, r0
 800c106:	4293      	cmp	r3, r2
 800c108:	d100      	bne.n	800c10c <memset+0xa>
 800c10a:	4770      	bx	lr
 800c10c:	f803 1b01 	strb.w	r1, [r3], #1
 800c110:	e7f9      	b.n	800c106 <memset+0x4>

0800c112 <strncmp>:
 800c112:	b510      	push	{r4, lr}
 800c114:	b16a      	cbz	r2, 800c132 <strncmp+0x20>
 800c116:	3901      	subs	r1, #1
 800c118:	1884      	adds	r4, r0, r2
 800c11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c11e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c122:	429a      	cmp	r2, r3
 800c124:	d103      	bne.n	800c12e <strncmp+0x1c>
 800c126:	42a0      	cmp	r0, r4
 800c128:	d001      	beq.n	800c12e <strncmp+0x1c>
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	d1f5      	bne.n	800c11a <strncmp+0x8>
 800c12e:	1ad0      	subs	r0, r2, r3
 800c130:	bd10      	pop	{r4, pc}
 800c132:	4610      	mov	r0, r2
 800c134:	e7fc      	b.n	800c130 <strncmp+0x1e>

0800c136 <strpbrk>:
 800c136:	b570      	push	{r4, r5, r6, lr}
 800c138:	7803      	ldrb	r3, [r0, #0]
 800c13a:	b1a3      	cbz	r3, 800c166 <strpbrk+0x30>
 800c13c:	4603      	mov	r3, r0
 800c13e:	460c      	mov	r4, r1
 800c140:	4618      	mov	r0, r3
 800c142:	f813 5b01 	ldrb.w	r5, [r3], #1
 800c146:	b14d      	cbz	r5, 800c15c <strpbrk+0x26>
 800c148:	460a      	mov	r2, r1
 800c14a:	e001      	b.n	800c150 <strpbrk+0x1a>
 800c14c:	42ae      	cmp	r6, r5
 800c14e:	d009      	beq.n	800c164 <strpbrk+0x2e>
 800c150:	4614      	mov	r4, r2
 800c152:	f812 6b01 	ldrb.w	r6, [r2], #1
 800c156:	2e00      	cmp	r6, #0
 800c158:	d1f8      	bne.n	800c14c <strpbrk+0x16>
 800c15a:	e7f1      	b.n	800c140 <strpbrk+0xa>
 800c15c:	7823      	ldrb	r3, [r4, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bf08      	it	eq
 800c162:	2000      	moveq	r0, #0
 800c164:	bd70      	pop	{r4, r5, r6, pc}
 800c166:	4618      	mov	r0, r3
 800c168:	e7fc      	b.n	800c164 <strpbrk+0x2e>
	...

0800c16c <_localeconv_r>:
 800c16c:	4800      	ldr	r0, [pc, #0]	; (800c170 <_localeconv_r+0x4>)
 800c16e:	4770      	bx	lr
 800c170:	20000124 	.word	0x20000124

0800c174 <_close_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d06      	ldr	r5, [pc, #24]	; (800c190 <_close_r+0x1c>)
 800c178:	2300      	movs	r3, #0
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	f7f8 fe5b 	bl	8004e3a <_close>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_close_r+0x1a>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_close_r+0x1a>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	20000cf4 	.word	0x20000cf4

0800c194 <_lseek_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	; (800c1b4 <_lseek_r+0x20>)
 800c198:	4604      	mov	r4, r0
 800c19a:	4608      	mov	r0, r1
 800c19c:	4611      	mov	r1, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	602a      	str	r2, [r5, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f7f8 fe70 	bl	8004e88 <_lseek>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_lseek_r+0x1e>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_lseek_r+0x1e>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20000cf4 	.word	0x20000cf4

0800c1b8 <_read_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d07      	ldr	r5, [pc, #28]	; (800c1d8 <_read_r+0x20>)
 800c1bc:	4604      	mov	r4, r0
 800c1be:	4608      	mov	r0, r1
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	602a      	str	r2, [r5, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f7f8 fdfe 	bl	8004dc8 <_read>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_read_r+0x1e>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_read_r+0x1e>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20000cf4 	.word	0x20000cf4

0800c1dc <_write_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d07      	ldr	r5, [pc, #28]	; (800c1fc <_write_r+0x20>)
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	602a      	str	r2, [r5, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f7f8 fe09 	bl	8004e02 <_write>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_write_r+0x1e>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_write_r+0x1e>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	20000cf4 	.word	0x20000cf4

0800c200 <__errno>:
 800c200:	4b01      	ldr	r3, [pc, #4]	; (800c208 <__errno+0x8>)
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	200001ec 	.word	0x200001ec

0800c20c <__libc_init_array>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	4d0d      	ldr	r5, [pc, #52]	; (800c244 <__libc_init_array+0x38>)
 800c210:	4c0d      	ldr	r4, [pc, #52]	; (800c248 <__libc_init_array+0x3c>)
 800c212:	1b64      	subs	r4, r4, r5
 800c214:	10a4      	asrs	r4, r4, #2
 800c216:	2600      	movs	r6, #0
 800c218:	42a6      	cmp	r6, r4
 800c21a:	d109      	bne.n	800c230 <__libc_init_array+0x24>
 800c21c:	4d0b      	ldr	r5, [pc, #44]	; (800c24c <__libc_init_array+0x40>)
 800c21e:	4c0c      	ldr	r4, [pc, #48]	; (800c250 <__libc_init_array+0x44>)
 800c220:	f002 ff08 	bl	800f034 <_init>
 800c224:	1b64      	subs	r4, r4, r5
 800c226:	10a4      	asrs	r4, r4, #2
 800c228:	2600      	movs	r6, #0
 800c22a:	42a6      	cmp	r6, r4
 800c22c:	d105      	bne.n	800c23a <__libc_init_array+0x2e>
 800c22e:	bd70      	pop	{r4, r5, r6, pc}
 800c230:	f855 3b04 	ldr.w	r3, [r5], #4
 800c234:	4798      	blx	r3
 800c236:	3601      	adds	r6, #1
 800c238:	e7ee      	b.n	800c218 <__libc_init_array+0xc>
 800c23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c23e:	4798      	blx	r3
 800c240:	3601      	adds	r6, #1
 800c242:	e7f2      	b.n	800c22a <__libc_init_array+0x1e>
 800c244:	080110d4 	.word	0x080110d4
 800c248:	080110d4 	.word	0x080110d4
 800c24c:	080110d4 	.word	0x080110d4
 800c250:	080110d8 	.word	0x080110d8

0800c254 <__retarget_lock_init_recursive>:
 800c254:	4770      	bx	lr

0800c256 <__retarget_lock_acquire_recursive>:
 800c256:	4770      	bx	lr

0800c258 <__retarget_lock_release_recursive>:
 800c258:	4770      	bx	lr

0800c25a <memcpy>:
 800c25a:	440a      	add	r2, r1
 800c25c:	4291      	cmp	r1, r2
 800c25e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c262:	d100      	bne.n	800c266 <memcpy+0xc>
 800c264:	4770      	bx	lr
 800c266:	b510      	push	{r4, lr}
 800c268:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c270:	4291      	cmp	r1, r2
 800c272:	d1f9      	bne.n	800c268 <memcpy+0xe>
 800c274:	bd10      	pop	{r4, pc}
	...

0800c278 <nan>:
 800c278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c280 <nan+0x8>
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	00000000 	.word	0x00000000
 800c284:	7ff80000 	.word	0x7ff80000

0800c288 <quorem>:
 800c288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	6903      	ldr	r3, [r0, #16]
 800c28e:	690c      	ldr	r4, [r1, #16]
 800c290:	42a3      	cmp	r3, r4
 800c292:	4607      	mov	r7, r0
 800c294:	db7e      	blt.n	800c394 <quorem+0x10c>
 800c296:	3c01      	subs	r4, #1
 800c298:	f101 0814 	add.w	r8, r1, #20
 800c29c:	f100 0514 	add.w	r5, r0, #20
 800c2a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2be:	d331      	bcc.n	800c324 <quorem+0x9c>
 800c2c0:	f04f 0e00 	mov.w	lr, #0
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	46ac      	mov	ip, r5
 800c2c8:	46f2      	mov	sl, lr
 800c2ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2ce:	b293      	uxth	r3, r2
 800c2d0:	fb06 e303 	mla	r3, r6, r3, lr
 800c2d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2d8:	0c1a      	lsrs	r2, r3, #16
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	ebaa 0303 	sub.w	r3, sl, r3
 800c2e0:	f8dc a000 	ldr.w	sl, [ip]
 800c2e4:	fa13 f38a 	uxtah	r3, r3, sl
 800c2e8:	fb06 220e 	mla	r2, r6, lr, r2
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2f4:	b292      	uxth	r2, r2
 800c2f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800c302:	4581      	cmp	r9, r0
 800c304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c308:	f84c 3b04 	str.w	r3, [ip], #4
 800c30c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c310:	d2db      	bcs.n	800c2ca <quorem+0x42>
 800c312:	f855 300b 	ldr.w	r3, [r5, fp]
 800c316:	b92b      	cbnz	r3, 800c324 <quorem+0x9c>
 800c318:	9b01      	ldr	r3, [sp, #4]
 800c31a:	3b04      	subs	r3, #4
 800c31c:	429d      	cmp	r5, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	d32c      	bcc.n	800c37c <quorem+0xf4>
 800c322:	613c      	str	r4, [r7, #16]
 800c324:	4638      	mov	r0, r7
 800c326:	f001 fd59 	bl	800dddc <__mcmp>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	db22      	blt.n	800c374 <quorem+0xec>
 800c32e:	3601      	adds	r6, #1
 800c330:	4629      	mov	r1, r5
 800c332:	2000      	movs	r0, #0
 800c334:	f858 2b04 	ldr.w	r2, [r8], #4
 800c338:	f8d1 c000 	ldr.w	ip, [r1]
 800c33c:	b293      	uxth	r3, r2
 800c33e:	1ac3      	subs	r3, r0, r3
 800c340:	0c12      	lsrs	r2, r2, #16
 800c342:	fa13 f38c 	uxtah	r3, r3, ip
 800c346:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c34a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c34e:	b29b      	uxth	r3, r3
 800c350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c354:	45c1      	cmp	r9, r8
 800c356:	f841 3b04 	str.w	r3, [r1], #4
 800c35a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c35e:	d2e9      	bcs.n	800c334 <quorem+0xac>
 800c360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c368:	b922      	cbnz	r2, 800c374 <quorem+0xec>
 800c36a:	3b04      	subs	r3, #4
 800c36c:	429d      	cmp	r5, r3
 800c36e:	461a      	mov	r2, r3
 800c370:	d30a      	bcc.n	800c388 <quorem+0x100>
 800c372:	613c      	str	r4, [r7, #16]
 800c374:	4630      	mov	r0, r6
 800c376:	b003      	add	sp, #12
 800c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37c:	6812      	ldr	r2, [r2, #0]
 800c37e:	3b04      	subs	r3, #4
 800c380:	2a00      	cmp	r2, #0
 800c382:	d1ce      	bne.n	800c322 <quorem+0x9a>
 800c384:	3c01      	subs	r4, #1
 800c386:	e7c9      	b.n	800c31c <quorem+0x94>
 800c388:	6812      	ldr	r2, [r2, #0]
 800c38a:	3b04      	subs	r3, #4
 800c38c:	2a00      	cmp	r2, #0
 800c38e:	d1f0      	bne.n	800c372 <quorem+0xea>
 800c390:	3c01      	subs	r4, #1
 800c392:	e7eb      	b.n	800c36c <quorem+0xe4>
 800c394:	2000      	movs	r0, #0
 800c396:	e7ee      	b.n	800c376 <quorem+0xee>

0800c398 <_dtoa_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	ed2d 8b04 	vpush	{d8-d9}
 800c3a0:	69c5      	ldr	r5, [r0, #28]
 800c3a2:	b093      	sub	sp, #76	; 0x4c
 800c3a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3a8:	ec57 6b10 	vmov	r6, r7, d0
 800c3ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3b0:	9107      	str	r1, [sp, #28]
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3b6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3b8:	b975      	cbnz	r5, 800c3d8 <_dtoa_r+0x40>
 800c3ba:	2010      	movs	r0, #16
 800c3bc:	f001 f982 	bl	800d6c4 <malloc>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	61e0      	str	r0, [r4, #28]
 800c3c4:	b920      	cbnz	r0, 800c3d0 <_dtoa_r+0x38>
 800c3c6:	4bae      	ldr	r3, [pc, #696]	; (800c680 <_dtoa_r+0x2e8>)
 800c3c8:	21ef      	movs	r1, #239	; 0xef
 800c3ca:	48ae      	ldr	r0, [pc, #696]	; (800c684 <_dtoa_r+0x2ec>)
 800c3cc:	f002 f910 	bl	800e5f0 <__assert_func>
 800c3d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3d4:	6005      	str	r5, [r0, #0]
 800c3d6:	60c5      	str	r5, [r0, #12]
 800c3d8:	69e3      	ldr	r3, [r4, #28]
 800c3da:	6819      	ldr	r1, [r3, #0]
 800c3dc:	b151      	cbz	r1, 800c3f4 <_dtoa_r+0x5c>
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	604a      	str	r2, [r1, #4]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4093      	lsls	r3, r2
 800c3e6:	608b      	str	r3, [r1, #8]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f001 fa71 	bl	800d8d0 <_Bfree>
 800c3ee:	69e3      	ldr	r3, [r4, #28]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	1e3b      	subs	r3, r7, #0
 800c3f6:	bfbb      	ittet	lt
 800c3f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3fc:	9303      	strlt	r3, [sp, #12]
 800c3fe:	2300      	movge	r3, #0
 800c400:	2201      	movlt	r2, #1
 800c402:	bfac      	ite	ge
 800c404:	f8c8 3000 	strge.w	r3, [r8]
 800c408:	f8c8 2000 	strlt.w	r2, [r8]
 800c40c:	4b9e      	ldr	r3, [pc, #632]	; (800c688 <_dtoa_r+0x2f0>)
 800c40e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c412:	ea33 0308 	bics.w	r3, r3, r8
 800c416:	d11b      	bne.n	800c450 <_dtoa_r+0xb8>
 800c418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c41a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c424:	4333      	orrs	r3, r6
 800c426:	f000 8593 	beq.w	800cf50 <_dtoa_r+0xbb8>
 800c42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c42c:	b963      	cbnz	r3, 800c448 <_dtoa_r+0xb0>
 800c42e:	4b97      	ldr	r3, [pc, #604]	; (800c68c <_dtoa_r+0x2f4>)
 800c430:	e027      	b.n	800c482 <_dtoa_r+0xea>
 800c432:	4b97      	ldr	r3, [pc, #604]	; (800c690 <_dtoa_r+0x2f8>)
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	3308      	adds	r3, #8
 800c438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	9800      	ldr	r0, [sp, #0]
 800c43e:	b013      	add	sp, #76	; 0x4c
 800c440:	ecbd 8b04 	vpop	{d8-d9}
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	4b90      	ldr	r3, [pc, #576]	; (800c68c <_dtoa_r+0x2f4>)
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	3303      	adds	r3, #3
 800c44e:	e7f3      	b.n	800c438 <_dtoa_r+0xa0>
 800c450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c454:	2200      	movs	r2, #0
 800c456:	ec51 0b17 	vmov	r0, r1, d7
 800c45a:	eeb0 8a47 	vmov.f32	s16, s14
 800c45e:	eef0 8a67 	vmov.f32	s17, s15
 800c462:	2300      	movs	r3, #0
 800c464:	f7f4 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 800c468:	4681      	mov	r9, r0
 800c46a:	b160      	cbz	r0, 800c486 <_dtoa_r+0xee>
 800c46c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c46e:	2301      	movs	r3, #1
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 8568 	beq.w	800cf4a <_dtoa_r+0xbb2>
 800c47a:	4b86      	ldr	r3, [pc, #536]	; (800c694 <_dtoa_r+0x2fc>)
 800c47c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	3b01      	subs	r3, #1
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	e7da      	b.n	800c43c <_dtoa_r+0xa4>
 800c486:	aa10      	add	r2, sp, #64	; 0x40
 800c488:	a911      	add	r1, sp, #68	; 0x44
 800c48a:	4620      	mov	r0, r4
 800c48c:	eeb0 0a48 	vmov.f32	s0, s16
 800c490:	eef0 0a68 	vmov.f32	s1, s17
 800c494:	f001 fdb8 	bl	800e008 <__d2b>
 800c498:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c49c:	4682      	mov	sl, r0
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	d07f      	beq.n	800c5a2 <_dtoa_r+0x20a>
 800c4a2:	ee18 3a90 	vmov	r3, s17
 800c4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4ae:	ec51 0b18 	vmov	r0, r1, d8
 800c4b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4be:	4619      	mov	r1, r3
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4b75      	ldr	r3, [pc, #468]	; (800c698 <_dtoa_r+0x300>)
 800c4c4:	f7f3 fef8 	bl	80002b8 <__aeabi_dsub>
 800c4c8:	a367      	add	r3, pc, #412	; (adr r3, 800c668 <_dtoa_r+0x2d0>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f8ab 	bl	8000628 <__aeabi_dmul>
 800c4d2:	a367      	add	r3, pc, #412	; (adr r3, 800c670 <_dtoa_r+0x2d8>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7f3 fef0 	bl	80002bc <__adddf3>
 800c4dc:	4606      	mov	r6, r0
 800c4de:	4628      	mov	r0, r5
 800c4e0:	460f      	mov	r7, r1
 800c4e2:	f7f4 f837 	bl	8000554 <__aeabi_i2d>
 800c4e6:	a364      	add	r3, pc, #400	; (adr r3, 800c678 <_dtoa_r+0x2e0>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f4 f89c 	bl	8000628 <__aeabi_dmul>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	f7f3 fee0 	bl	80002bc <__adddf3>
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	460f      	mov	r7, r1
 800c500:	f7f4 fb42 	bl	8000b88 <__aeabi_d2iz>
 800c504:	2200      	movs	r2, #0
 800c506:	4683      	mov	fp, r0
 800c508:	2300      	movs	r3, #0
 800c50a:	4630      	mov	r0, r6
 800c50c:	4639      	mov	r1, r7
 800c50e:	f7f4 fafd 	bl	8000b0c <__aeabi_dcmplt>
 800c512:	b148      	cbz	r0, 800c528 <_dtoa_r+0x190>
 800c514:	4658      	mov	r0, fp
 800c516:	f7f4 f81d 	bl	8000554 <__aeabi_i2d>
 800c51a:	4632      	mov	r2, r6
 800c51c:	463b      	mov	r3, r7
 800c51e:	f7f4 faeb 	bl	8000af8 <__aeabi_dcmpeq>
 800c522:	b908      	cbnz	r0, 800c528 <_dtoa_r+0x190>
 800c524:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c528:	f1bb 0f16 	cmp.w	fp, #22
 800c52c:	d857      	bhi.n	800c5de <_dtoa_r+0x246>
 800c52e:	4b5b      	ldr	r3, [pc, #364]	; (800c69c <_dtoa_r+0x304>)
 800c530:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	ec51 0b18 	vmov	r0, r1, d8
 800c53c:	f7f4 fae6 	bl	8000b0c <__aeabi_dcmplt>
 800c540:	2800      	cmp	r0, #0
 800c542:	d04e      	beq.n	800c5e2 <_dtoa_r+0x24a>
 800c544:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c548:	2300      	movs	r3, #0
 800c54a:	930c      	str	r3, [sp, #48]	; 0x30
 800c54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c54e:	1b5b      	subs	r3, r3, r5
 800c550:	1e5a      	subs	r2, r3, #1
 800c552:	bf45      	ittet	mi
 800c554:	f1c3 0301 	rsbmi	r3, r3, #1
 800c558:	9305      	strmi	r3, [sp, #20]
 800c55a:	2300      	movpl	r3, #0
 800c55c:	2300      	movmi	r3, #0
 800c55e:	9206      	str	r2, [sp, #24]
 800c560:	bf54      	ite	pl
 800c562:	9305      	strpl	r3, [sp, #20]
 800c564:	9306      	strmi	r3, [sp, #24]
 800c566:	f1bb 0f00 	cmp.w	fp, #0
 800c56a:	db3c      	blt.n	800c5e6 <_dtoa_r+0x24e>
 800c56c:	9b06      	ldr	r3, [sp, #24]
 800c56e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c572:	445b      	add	r3, fp
 800c574:	9306      	str	r3, [sp, #24]
 800c576:	2300      	movs	r3, #0
 800c578:	9308      	str	r3, [sp, #32]
 800c57a:	9b07      	ldr	r3, [sp, #28]
 800c57c:	2b09      	cmp	r3, #9
 800c57e:	d868      	bhi.n	800c652 <_dtoa_r+0x2ba>
 800c580:	2b05      	cmp	r3, #5
 800c582:	bfc4      	itt	gt
 800c584:	3b04      	subgt	r3, #4
 800c586:	9307      	strgt	r3, [sp, #28]
 800c588:	9b07      	ldr	r3, [sp, #28]
 800c58a:	f1a3 0302 	sub.w	r3, r3, #2
 800c58e:	bfcc      	ite	gt
 800c590:	2500      	movgt	r5, #0
 800c592:	2501      	movle	r5, #1
 800c594:	2b03      	cmp	r3, #3
 800c596:	f200 8085 	bhi.w	800c6a4 <_dtoa_r+0x30c>
 800c59a:	e8df f003 	tbb	[pc, r3]
 800c59e:	3b2e      	.short	0x3b2e
 800c5a0:	5839      	.short	0x5839
 800c5a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5a6:	441d      	add	r5, r3
 800c5a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	bfc1      	itttt	gt
 800c5b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c5c0:	bfd6      	itet	le
 800c5c2:	f1c3 0320 	rsble	r3, r3, #32
 800c5c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c5ca:	fa06 f003 	lslle.w	r0, r6, r3
 800c5ce:	f7f3 ffb1 	bl	8000534 <__aeabi_ui2d>
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c5d8:	3d01      	subs	r5, #1
 800c5da:	920e      	str	r2, [sp, #56]	; 0x38
 800c5dc:	e76f      	b.n	800c4be <_dtoa_r+0x126>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e7b3      	b.n	800c54a <_dtoa_r+0x1b2>
 800c5e2:	900c      	str	r0, [sp, #48]	; 0x30
 800c5e4:	e7b2      	b.n	800c54c <_dtoa_r+0x1b4>
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	eba3 030b 	sub.w	r3, r3, fp
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	f1cb 0300 	rsb	r3, fp, #0
 800c5f2:	9308      	str	r3, [sp, #32]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5f8:	e7bf      	b.n	800c57a <_dtoa_r+0x1e2>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c600:	2b00      	cmp	r3, #0
 800c602:	dc52      	bgt.n	800c6aa <_dtoa_r+0x312>
 800c604:	2301      	movs	r3, #1
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	461a      	mov	r2, r3
 800c60c:	920a      	str	r2, [sp, #40]	; 0x28
 800c60e:	e00b      	b.n	800c628 <_dtoa_r+0x290>
 800c610:	2301      	movs	r3, #1
 800c612:	e7f3      	b.n	800c5fc <_dtoa_r+0x264>
 800c614:	2300      	movs	r3, #0
 800c616:	9309      	str	r3, [sp, #36]	; 0x24
 800c618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c61a:	445b      	add	r3, fp
 800c61c:	9301      	str	r3, [sp, #4]
 800c61e:	3301      	adds	r3, #1
 800c620:	2b01      	cmp	r3, #1
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	bfb8      	it	lt
 800c626:	2301      	movlt	r3, #1
 800c628:	69e0      	ldr	r0, [r4, #28]
 800c62a:	2100      	movs	r1, #0
 800c62c:	2204      	movs	r2, #4
 800c62e:	f102 0614 	add.w	r6, r2, #20
 800c632:	429e      	cmp	r6, r3
 800c634:	d93d      	bls.n	800c6b2 <_dtoa_r+0x31a>
 800c636:	6041      	str	r1, [r0, #4]
 800c638:	4620      	mov	r0, r4
 800c63a:	f001 f909 	bl	800d850 <_Balloc>
 800c63e:	9000      	str	r0, [sp, #0]
 800c640:	2800      	cmp	r0, #0
 800c642:	d139      	bne.n	800c6b8 <_dtoa_r+0x320>
 800c644:	4b16      	ldr	r3, [pc, #88]	; (800c6a0 <_dtoa_r+0x308>)
 800c646:	4602      	mov	r2, r0
 800c648:	f240 11af 	movw	r1, #431	; 0x1af
 800c64c:	e6bd      	b.n	800c3ca <_dtoa_r+0x32>
 800c64e:	2301      	movs	r3, #1
 800c650:	e7e1      	b.n	800c616 <_dtoa_r+0x27e>
 800c652:	2501      	movs	r5, #1
 800c654:	2300      	movs	r3, #0
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	9509      	str	r5, [sp, #36]	; 0x24
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	2200      	movs	r2, #0
 800c664:	2312      	movs	r3, #18
 800c666:	e7d1      	b.n	800c60c <_dtoa_r+0x274>
 800c668:	636f4361 	.word	0x636f4361
 800c66c:	3fd287a7 	.word	0x3fd287a7
 800c670:	8b60c8b3 	.word	0x8b60c8b3
 800c674:	3fc68a28 	.word	0x3fc68a28
 800c678:	509f79fb 	.word	0x509f79fb
 800c67c:	3fd34413 	.word	0x3fd34413
 800c680:	08010e42 	.word	0x08010e42
 800c684:	08010e59 	.word	0x08010e59
 800c688:	7ff00000 	.word	0x7ff00000
 800c68c:	08010e3e 	.word	0x08010e3e
 800c690:	08010e35 	.word	0x08010e35
 800c694:	08010e0a 	.word	0x08010e0a
 800c698:	3ff80000 	.word	0x3ff80000
 800c69c:	08010fa8 	.word	0x08010fa8
 800c6a0:	08010eb1 	.word	0x08010eb1
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	e7d7      	b.n	800c65a <_dtoa_r+0x2c2>
 800c6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	e7ba      	b.n	800c628 <_dtoa_r+0x290>
 800c6b2:	3101      	adds	r1, #1
 800c6b4:	0052      	lsls	r2, r2, #1
 800c6b6:	e7ba      	b.n	800c62e <_dtoa_r+0x296>
 800c6b8:	69e3      	ldr	r3, [r4, #28]
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	9b04      	ldr	r3, [sp, #16]
 800c6c0:	2b0e      	cmp	r3, #14
 800c6c2:	f200 80a8 	bhi.w	800c816 <_dtoa_r+0x47e>
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	f000 80a5 	beq.w	800c816 <_dtoa_r+0x47e>
 800c6cc:	f1bb 0f00 	cmp.w	fp, #0
 800c6d0:	dd38      	ble.n	800c744 <_dtoa_r+0x3ac>
 800c6d2:	4bc0      	ldr	r3, [pc, #768]	; (800c9d4 <_dtoa_r+0x63c>)
 800c6d4:	f00b 020f 	and.w	r2, fp, #15
 800c6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c6e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c6e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c6e8:	d019      	beq.n	800c71e <_dtoa_r+0x386>
 800c6ea:	4bbb      	ldr	r3, [pc, #748]	; (800c9d8 <_dtoa_r+0x640>)
 800c6ec:	ec51 0b18 	vmov	r0, r1, d8
 800c6f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6f4:	f7f4 f8c2 	bl	800087c <__aeabi_ddiv>
 800c6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6fc:	f008 080f 	and.w	r8, r8, #15
 800c700:	2503      	movs	r5, #3
 800c702:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c9d8 <_dtoa_r+0x640>
 800c706:	f1b8 0f00 	cmp.w	r8, #0
 800c70a:	d10a      	bne.n	800c722 <_dtoa_r+0x38a>
 800c70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c710:	4632      	mov	r2, r6
 800c712:	463b      	mov	r3, r7
 800c714:	f7f4 f8b2 	bl	800087c <__aeabi_ddiv>
 800c718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c71c:	e02b      	b.n	800c776 <_dtoa_r+0x3de>
 800c71e:	2502      	movs	r5, #2
 800c720:	e7ef      	b.n	800c702 <_dtoa_r+0x36a>
 800c722:	f018 0f01 	tst.w	r8, #1
 800c726:	d008      	beq.n	800c73a <_dtoa_r+0x3a2>
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c730:	f7f3 ff7a 	bl	8000628 <__aeabi_dmul>
 800c734:	3501      	adds	r5, #1
 800c736:	4606      	mov	r6, r0
 800c738:	460f      	mov	r7, r1
 800c73a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c73e:	f109 0908 	add.w	r9, r9, #8
 800c742:	e7e0      	b.n	800c706 <_dtoa_r+0x36e>
 800c744:	f000 809f 	beq.w	800c886 <_dtoa_r+0x4ee>
 800c748:	f1cb 0600 	rsb	r6, fp, #0
 800c74c:	4ba1      	ldr	r3, [pc, #644]	; (800c9d4 <_dtoa_r+0x63c>)
 800c74e:	4fa2      	ldr	r7, [pc, #648]	; (800c9d8 <_dtoa_r+0x640>)
 800c750:	f006 020f 	and.w	r2, r6, #15
 800c754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	ec51 0b18 	vmov	r0, r1, d8
 800c760:	f7f3 ff62 	bl	8000628 <__aeabi_dmul>
 800c764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c768:	1136      	asrs	r6, r6, #4
 800c76a:	2300      	movs	r3, #0
 800c76c:	2502      	movs	r5, #2
 800c76e:	2e00      	cmp	r6, #0
 800c770:	d17e      	bne.n	800c870 <_dtoa_r+0x4d8>
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1d0      	bne.n	800c718 <_dtoa_r+0x380>
 800c776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c778:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f000 8084 	beq.w	800c88a <_dtoa_r+0x4f2>
 800c782:	4b96      	ldr	r3, [pc, #600]	; (800c9dc <_dtoa_r+0x644>)
 800c784:	2200      	movs	r2, #0
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f4 f9bf 	bl	8000b0c <__aeabi_dcmplt>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d07b      	beq.n	800c88a <_dtoa_r+0x4f2>
 800c792:	9b04      	ldr	r3, [sp, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d078      	beq.n	800c88a <_dtoa_r+0x4f2>
 800c798:	9b01      	ldr	r3, [sp, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd39      	ble.n	800c812 <_dtoa_r+0x47a>
 800c79e:	4b90      	ldr	r3, [pc, #576]	; (800c9e0 <_dtoa_r+0x648>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	f7f3 ff3f 	bl	8000628 <__aeabi_dmul>
 800c7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7ae:	9e01      	ldr	r6, [sp, #4]
 800c7b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f7f3 feca 	bl	8000554 <__aeabi_i2d>
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	f7f3 ff30 	bl	8000628 <__aeabi_dmul>
 800c7c8:	4b86      	ldr	r3, [pc, #536]	; (800c9e4 <_dtoa_r+0x64c>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f7f3 fd76 	bl	80002bc <__adddf3>
 800c7d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7d8:	9303      	str	r3, [sp, #12]
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	d158      	bne.n	800c890 <_dtoa_r+0x4f8>
 800c7de:	4b82      	ldr	r3, [pc, #520]	; (800c9e8 <_dtoa_r+0x650>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	f7f3 fd67 	bl	80002b8 <__aeabi_dsub>
 800c7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4689      	mov	r9, r1
 800c7f2:	f7f4 f9a9 	bl	8000b48 <__aeabi_dcmpgt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f040 8296 	bne.w	800cd28 <_dtoa_r+0x990>
 800c7fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c800:	4640      	mov	r0, r8
 800c802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c806:	4649      	mov	r1, r9
 800c808:	f7f4 f980 	bl	8000b0c <__aeabi_dcmplt>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f040 8289 	bne.w	800cd24 <_dtoa_r+0x98c>
 800c812:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f2c0 814e 	blt.w	800caba <_dtoa_r+0x722>
 800c81e:	f1bb 0f0e 	cmp.w	fp, #14
 800c822:	f300 814a 	bgt.w	800caba <_dtoa_r+0x722>
 800c826:	4b6b      	ldr	r3, [pc, #428]	; (800c9d4 <_dtoa_r+0x63c>)
 800c828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c832:	2b00      	cmp	r3, #0
 800c834:	f280 80dc 	bge.w	800c9f0 <_dtoa_r+0x658>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f300 80d8 	bgt.w	800c9f0 <_dtoa_r+0x658>
 800c840:	f040 826f 	bne.w	800cd22 <_dtoa_r+0x98a>
 800c844:	4b68      	ldr	r3, [pc, #416]	; (800c9e8 <_dtoa_r+0x650>)
 800c846:	2200      	movs	r2, #0
 800c848:	4640      	mov	r0, r8
 800c84a:	4649      	mov	r1, r9
 800c84c:	f7f3 feec 	bl	8000628 <__aeabi_dmul>
 800c850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c854:	f7f4 f96e 	bl	8000b34 <__aeabi_dcmpge>
 800c858:	9e04      	ldr	r6, [sp, #16]
 800c85a:	4637      	mov	r7, r6
 800c85c:	2800      	cmp	r0, #0
 800c85e:	f040 8245 	bne.w	800ccec <_dtoa_r+0x954>
 800c862:	9d00      	ldr	r5, [sp, #0]
 800c864:	2331      	movs	r3, #49	; 0x31
 800c866:	f805 3b01 	strb.w	r3, [r5], #1
 800c86a:	f10b 0b01 	add.w	fp, fp, #1
 800c86e:	e241      	b.n	800ccf4 <_dtoa_r+0x95c>
 800c870:	07f2      	lsls	r2, r6, #31
 800c872:	d505      	bpl.n	800c880 <_dtoa_r+0x4e8>
 800c874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c878:	f7f3 fed6 	bl	8000628 <__aeabi_dmul>
 800c87c:	3501      	adds	r5, #1
 800c87e:	2301      	movs	r3, #1
 800c880:	1076      	asrs	r6, r6, #1
 800c882:	3708      	adds	r7, #8
 800c884:	e773      	b.n	800c76e <_dtoa_r+0x3d6>
 800c886:	2502      	movs	r5, #2
 800c888:	e775      	b.n	800c776 <_dtoa_r+0x3de>
 800c88a:	9e04      	ldr	r6, [sp, #16]
 800c88c:	465f      	mov	r7, fp
 800c88e:	e792      	b.n	800c7b6 <_dtoa_r+0x41e>
 800c890:	9900      	ldr	r1, [sp, #0]
 800c892:	4b50      	ldr	r3, [pc, #320]	; (800c9d4 <_dtoa_r+0x63c>)
 800c894:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c898:	4431      	add	r1, r6
 800c89a:	9102      	str	r1, [sp, #8]
 800c89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c89e:	eeb0 9a47 	vmov.f32	s18, s14
 800c8a2:	eef0 9a67 	vmov.f32	s19, s15
 800c8a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8ae:	2900      	cmp	r1, #0
 800c8b0:	d044      	beq.n	800c93c <_dtoa_r+0x5a4>
 800c8b2:	494e      	ldr	r1, [pc, #312]	; (800c9ec <_dtoa_r+0x654>)
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	f7f3 ffe1 	bl	800087c <__aeabi_ddiv>
 800c8ba:	ec53 2b19 	vmov	r2, r3, d9
 800c8be:	f7f3 fcfb 	bl	80002b8 <__aeabi_dsub>
 800c8c2:	9d00      	ldr	r5, [sp, #0]
 800c8c4:	ec41 0b19 	vmov	d9, r0, r1
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	4640      	mov	r0, r8
 800c8cc:	f7f4 f95c 	bl	8000b88 <__aeabi_d2iz>
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	f7f3 fe3f 	bl	8000554 <__aeabi_i2d>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f3 fceb 	bl	80002b8 <__aeabi_dsub>
 800c8e2:	3630      	adds	r6, #48	; 0x30
 800c8e4:	f805 6b01 	strb.w	r6, [r5], #1
 800c8e8:	ec53 2b19 	vmov	r2, r3, d9
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	4689      	mov	r9, r1
 800c8f0:	f7f4 f90c 	bl	8000b0c <__aeabi_dcmplt>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d164      	bne.n	800c9c2 <_dtoa_r+0x62a>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	4937      	ldr	r1, [pc, #220]	; (800c9dc <_dtoa_r+0x644>)
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7f3 fcda 	bl	80002b8 <__aeabi_dsub>
 800c904:	ec53 2b19 	vmov	r2, r3, d9
 800c908:	f7f4 f900 	bl	8000b0c <__aeabi_dcmplt>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	f040 80b6 	bne.w	800ca7e <_dtoa_r+0x6e6>
 800c912:	9b02      	ldr	r3, [sp, #8]
 800c914:	429d      	cmp	r5, r3
 800c916:	f43f af7c 	beq.w	800c812 <_dtoa_r+0x47a>
 800c91a:	4b31      	ldr	r3, [pc, #196]	; (800c9e0 <_dtoa_r+0x648>)
 800c91c:	ec51 0b19 	vmov	r0, r1, d9
 800c920:	2200      	movs	r2, #0
 800c922:	f7f3 fe81 	bl	8000628 <__aeabi_dmul>
 800c926:	4b2e      	ldr	r3, [pc, #184]	; (800c9e0 <_dtoa_r+0x648>)
 800c928:	ec41 0b19 	vmov	d9, r0, r1
 800c92c:	2200      	movs	r2, #0
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f3 fe79 	bl	8000628 <__aeabi_dmul>
 800c936:	4680      	mov	r8, r0
 800c938:	4689      	mov	r9, r1
 800c93a:	e7c5      	b.n	800c8c8 <_dtoa_r+0x530>
 800c93c:	ec51 0b17 	vmov	r0, r1, d7
 800c940:	f7f3 fe72 	bl	8000628 <__aeabi_dmul>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	9d00      	ldr	r5, [sp, #0]
 800c948:	930f      	str	r3, [sp, #60]	; 0x3c
 800c94a:	ec41 0b19 	vmov	d9, r0, r1
 800c94e:	4649      	mov	r1, r9
 800c950:	4640      	mov	r0, r8
 800c952:	f7f4 f919 	bl	8000b88 <__aeabi_d2iz>
 800c956:	4606      	mov	r6, r0
 800c958:	f7f3 fdfc 	bl	8000554 <__aeabi_i2d>
 800c95c:	3630      	adds	r6, #48	; 0x30
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f3 fca7 	bl	80002b8 <__aeabi_dsub>
 800c96a:	f805 6b01 	strb.w	r6, [r5], #1
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	429d      	cmp	r5, r3
 800c972:	4680      	mov	r8, r0
 800c974:	4689      	mov	r9, r1
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	d124      	bne.n	800c9c6 <_dtoa_r+0x62e>
 800c97c:	4b1b      	ldr	r3, [pc, #108]	; (800c9ec <_dtoa_r+0x654>)
 800c97e:	ec51 0b19 	vmov	r0, r1, d9
 800c982:	f7f3 fc9b 	bl	80002bc <__adddf3>
 800c986:	4602      	mov	r2, r0
 800c988:	460b      	mov	r3, r1
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f4 f8db 	bl	8000b48 <__aeabi_dcmpgt>
 800c992:	2800      	cmp	r0, #0
 800c994:	d173      	bne.n	800ca7e <_dtoa_r+0x6e6>
 800c996:	ec53 2b19 	vmov	r2, r3, d9
 800c99a:	4914      	ldr	r1, [pc, #80]	; (800c9ec <_dtoa_r+0x654>)
 800c99c:	2000      	movs	r0, #0
 800c99e:	f7f3 fc8b 	bl	80002b8 <__aeabi_dsub>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f4 f8af 	bl	8000b0c <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f af2f 	beq.w	800c812 <_dtoa_r+0x47a>
 800c9b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9b6:	1e6b      	subs	r3, r5, #1
 800c9b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9be:	2b30      	cmp	r3, #48	; 0x30
 800c9c0:	d0f8      	beq.n	800c9b4 <_dtoa_r+0x61c>
 800c9c2:	46bb      	mov	fp, r7
 800c9c4:	e04a      	b.n	800ca5c <_dtoa_r+0x6c4>
 800c9c6:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <_dtoa_r+0x648>)
 800c9c8:	f7f3 fe2e 	bl	8000628 <__aeabi_dmul>
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	e7bd      	b.n	800c94e <_dtoa_r+0x5b6>
 800c9d2:	bf00      	nop
 800c9d4:	08010fa8 	.word	0x08010fa8
 800c9d8:	08010f80 	.word	0x08010f80
 800c9dc:	3ff00000 	.word	0x3ff00000
 800c9e0:	40240000 	.word	0x40240000
 800c9e4:	401c0000 	.word	0x401c0000
 800c9e8:	40140000 	.word	0x40140000
 800c9ec:	3fe00000 	.word	0x3fe00000
 800c9f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c9f4:	9d00      	ldr	r5, [sp, #0]
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	f7f3 ff3d 	bl	800087c <__aeabi_ddiv>
 800ca02:	f7f4 f8c1 	bl	8000b88 <__aeabi_d2iz>
 800ca06:	9001      	str	r0, [sp, #4]
 800ca08:	f7f3 fda4 	bl	8000554 <__aeabi_i2d>
 800ca0c:	4642      	mov	r2, r8
 800ca0e:	464b      	mov	r3, r9
 800ca10:	f7f3 fe0a 	bl	8000628 <__aeabi_dmul>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4630      	mov	r0, r6
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	f7f3 fc4c 	bl	80002b8 <__aeabi_dsub>
 800ca20:	9e01      	ldr	r6, [sp, #4]
 800ca22:	9f04      	ldr	r7, [sp, #16]
 800ca24:	3630      	adds	r6, #48	; 0x30
 800ca26:	f805 6b01 	strb.w	r6, [r5], #1
 800ca2a:	9e00      	ldr	r6, [sp, #0]
 800ca2c:	1bae      	subs	r6, r5, r6
 800ca2e:	42b7      	cmp	r7, r6
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	d134      	bne.n	800caa0 <_dtoa_r+0x708>
 800ca36:	f7f3 fc41 	bl	80002bc <__adddf3>
 800ca3a:	4642      	mov	r2, r8
 800ca3c:	464b      	mov	r3, r9
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460f      	mov	r7, r1
 800ca42:	f7f4 f881 	bl	8000b48 <__aeabi_dcmpgt>
 800ca46:	b9c8      	cbnz	r0, 800ca7c <_dtoa_r+0x6e4>
 800ca48:	4642      	mov	r2, r8
 800ca4a:	464b      	mov	r3, r9
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f7f4 f852 	bl	8000af8 <__aeabi_dcmpeq>
 800ca54:	b110      	cbz	r0, 800ca5c <_dtoa_r+0x6c4>
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	07db      	lsls	r3, r3, #31
 800ca5a:	d40f      	bmi.n	800ca7c <_dtoa_r+0x6e4>
 800ca5c:	4651      	mov	r1, sl
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 ff36 	bl	800d8d0 <_Bfree>
 800ca64:	2300      	movs	r3, #0
 800ca66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca68:	702b      	strb	r3, [r5, #0]
 800ca6a:	f10b 0301 	add.w	r3, fp, #1
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f43f ace2 	beq.w	800c43c <_dtoa_r+0xa4>
 800ca78:	601d      	str	r5, [r3, #0]
 800ca7a:	e4df      	b.n	800c43c <_dtoa_r+0xa4>
 800ca7c:	465f      	mov	r7, fp
 800ca7e:	462b      	mov	r3, r5
 800ca80:	461d      	mov	r5, r3
 800ca82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca86:	2a39      	cmp	r2, #57	; 0x39
 800ca88:	d106      	bne.n	800ca98 <_dtoa_r+0x700>
 800ca8a:	9a00      	ldr	r2, [sp, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d1f7      	bne.n	800ca80 <_dtoa_r+0x6e8>
 800ca90:	9900      	ldr	r1, [sp, #0]
 800ca92:	2230      	movs	r2, #48	; 0x30
 800ca94:	3701      	adds	r7, #1
 800ca96:	700a      	strb	r2, [r1, #0]
 800ca98:	781a      	ldrb	r2, [r3, #0]
 800ca9a:	3201      	adds	r2, #1
 800ca9c:	701a      	strb	r2, [r3, #0]
 800ca9e:	e790      	b.n	800c9c2 <_dtoa_r+0x62a>
 800caa0:	4ba3      	ldr	r3, [pc, #652]	; (800cd30 <_dtoa_r+0x998>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	f7f3 fdc0 	bl	8000628 <__aeabi_dmul>
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	4606      	mov	r6, r0
 800caae:	460f      	mov	r7, r1
 800cab0:	f7f4 f822 	bl	8000af8 <__aeabi_dcmpeq>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d09e      	beq.n	800c9f6 <_dtoa_r+0x65e>
 800cab8:	e7d0      	b.n	800ca5c <_dtoa_r+0x6c4>
 800caba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	f000 80ca 	beq.w	800cc56 <_dtoa_r+0x8be>
 800cac2:	9a07      	ldr	r2, [sp, #28]
 800cac4:	2a01      	cmp	r2, #1
 800cac6:	f300 80ad 	bgt.w	800cc24 <_dtoa_r+0x88c>
 800caca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cacc:	2a00      	cmp	r2, #0
 800cace:	f000 80a5 	beq.w	800cc1c <_dtoa_r+0x884>
 800cad2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cad6:	9e08      	ldr	r6, [sp, #32]
 800cad8:	9d05      	ldr	r5, [sp, #20]
 800cada:	9a05      	ldr	r2, [sp, #20]
 800cadc:	441a      	add	r2, r3
 800cade:	9205      	str	r2, [sp, #20]
 800cae0:	9a06      	ldr	r2, [sp, #24]
 800cae2:	2101      	movs	r1, #1
 800cae4:	441a      	add	r2, r3
 800cae6:	4620      	mov	r0, r4
 800cae8:	9206      	str	r2, [sp, #24]
 800caea:	f000 fff1 	bl	800dad0 <__i2b>
 800caee:	4607      	mov	r7, r0
 800caf0:	b165      	cbz	r5, 800cb0c <_dtoa_r+0x774>
 800caf2:	9b06      	ldr	r3, [sp, #24]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dd09      	ble.n	800cb0c <_dtoa_r+0x774>
 800caf8:	42ab      	cmp	r3, r5
 800cafa:	9a05      	ldr	r2, [sp, #20]
 800cafc:	bfa8      	it	ge
 800cafe:	462b      	movge	r3, r5
 800cb00:	1ad2      	subs	r2, r2, r3
 800cb02:	9205      	str	r2, [sp, #20]
 800cb04:	9a06      	ldr	r2, [sp, #24]
 800cb06:	1aed      	subs	r5, r5, r3
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	9306      	str	r3, [sp, #24]
 800cb0c:	9b08      	ldr	r3, [sp, #32]
 800cb0e:	b1f3      	cbz	r3, 800cb4e <_dtoa_r+0x7b6>
 800cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 80a3 	beq.w	800cc5e <_dtoa_r+0x8c6>
 800cb18:	2e00      	cmp	r6, #0
 800cb1a:	dd10      	ble.n	800cb3e <_dtoa_r+0x7a6>
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	4632      	mov	r2, r6
 800cb20:	4620      	mov	r0, r4
 800cb22:	f001 f895 	bl	800dc50 <__pow5mult>
 800cb26:	4652      	mov	r2, sl
 800cb28:	4601      	mov	r1, r0
 800cb2a:	4607      	mov	r7, r0
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 ffe5 	bl	800dafc <__multiply>
 800cb32:	4651      	mov	r1, sl
 800cb34:	4680      	mov	r8, r0
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 feca 	bl	800d8d0 <_Bfree>
 800cb3c:	46c2      	mov	sl, r8
 800cb3e:	9b08      	ldr	r3, [sp, #32]
 800cb40:	1b9a      	subs	r2, r3, r6
 800cb42:	d004      	beq.n	800cb4e <_dtoa_r+0x7b6>
 800cb44:	4651      	mov	r1, sl
 800cb46:	4620      	mov	r0, r4
 800cb48:	f001 f882 	bl	800dc50 <__pow5mult>
 800cb4c:	4682      	mov	sl, r0
 800cb4e:	2101      	movs	r1, #1
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 ffbd 	bl	800dad0 <__i2b>
 800cb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	f340 8081 	ble.w	800cc62 <_dtoa_r+0x8ca>
 800cb60:	461a      	mov	r2, r3
 800cb62:	4601      	mov	r1, r0
 800cb64:	4620      	mov	r0, r4
 800cb66:	f001 f873 	bl	800dc50 <__pow5mult>
 800cb6a:	9b07      	ldr	r3, [sp, #28]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	4606      	mov	r6, r0
 800cb70:	dd7a      	ble.n	800cc68 <_dtoa_r+0x8d0>
 800cb72:	f04f 0800 	mov.w	r8, #0
 800cb76:	6933      	ldr	r3, [r6, #16]
 800cb78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb7c:	6918      	ldr	r0, [r3, #16]
 800cb7e:	f000 ff59 	bl	800da34 <__hi0bits>
 800cb82:	f1c0 0020 	rsb	r0, r0, #32
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	4418      	add	r0, r3
 800cb8a:	f010 001f 	ands.w	r0, r0, #31
 800cb8e:	f000 8094 	beq.w	800ccba <_dtoa_r+0x922>
 800cb92:	f1c0 0320 	rsb	r3, r0, #32
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	f340 8085 	ble.w	800cca6 <_dtoa_r+0x90e>
 800cb9c:	9b05      	ldr	r3, [sp, #20]
 800cb9e:	f1c0 001c 	rsb	r0, r0, #28
 800cba2:	4403      	add	r3, r0
 800cba4:	9305      	str	r3, [sp, #20]
 800cba6:	9b06      	ldr	r3, [sp, #24]
 800cba8:	4403      	add	r3, r0
 800cbaa:	4405      	add	r5, r0
 800cbac:	9306      	str	r3, [sp, #24]
 800cbae:	9b05      	ldr	r3, [sp, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	dd05      	ble.n	800cbc0 <_dtoa_r+0x828>
 800cbb4:	4651      	mov	r1, sl
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f001 f8a3 	bl	800dd04 <__lshift>
 800cbbe:	4682      	mov	sl, r0
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	dd05      	ble.n	800cbd2 <_dtoa_r+0x83a>
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f001 f89a 	bl	800dd04 <__lshift>
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d072      	beq.n	800ccbe <_dtoa_r+0x926>
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f001 f8fe 	bl	800dddc <__mcmp>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	da6c      	bge.n	800ccbe <_dtoa_r+0x926>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4651      	mov	r1, sl
 800cbe8:	220a      	movs	r2, #10
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 fe92 	bl	800d914 <__multadd>
 800cbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 81b0 	beq.w	800cf5e <_dtoa_r+0xbc6>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4639      	mov	r1, r7
 800cc02:	220a      	movs	r2, #10
 800cc04:	4620      	mov	r0, r4
 800cc06:	f000 fe85 	bl	800d914 <__multadd>
 800cc0a:	9b01      	ldr	r3, [sp, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	4607      	mov	r7, r0
 800cc10:	f300 8096 	bgt.w	800cd40 <_dtoa_r+0x9a8>
 800cc14:	9b07      	ldr	r3, [sp, #28]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	dc59      	bgt.n	800ccce <_dtoa_r+0x936>
 800cc1a:	e091      	b.n	800cd40 <_dtoa_r+0x9a8>
 800cc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc22:	e758      	b.n	800cad6 <_dtoa_r+0x73e>
 800cc24:	9b04      	ldr	r3, [sp, #16]
 800cc26:	1e5e      	subs	r6, r3, #1
 800cc28:	9b08      	ldr	r3, [sp, #32]
 800cc2a:	42b3      	cmp	r3, r6
 800cc2c:	bfbf      	itttt	lt
 800cc2e:	9b08      	ldrlt	r3, [sp, #32]
 800cc30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc32:	9608      	strlt	r6, [sp, #32]
 800cc34:	1af3      	sublt	r3, r6, r3
 800cc36:	bfb4      	ite	lt
 800cc38:	18d2      	addlt	r2, r2, r3
 800cc3a:	1b9e      	subge	r6, r3, r6
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	bfbc      	itt	lt
 800cc40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc42:	2600      	movlt	r6, #0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bfb7      	itett	lt
 800cc48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc50:	1a9d      	sublt	r5, r3, r2
 800cc52:	2300      	movlt	r3, #0
 800cc54:	e741      	b.n	800cada <_dtoa_r+0x742>
 800cc56:	9e08      	ldr	r6, [sp, #32]
 800cc58:	9d05      	ldr	r5, [sp, #20]
 800cc5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc5c:	e748      	b.n	800caf0 <_dtoa_r+0x758>
 800cc5e:	9a08      	ldr	r2, [sp, #32]
 800cc60:	e770      	b.n	800cb44 <_dtoa_r+0x7ac>
 800cc62:	9b07      	ldr	r3, [sp, #28]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	dc19      	bgt.n	800cc9c <_dtoa_r+0x904>
 800cc68:	9b02      	ldr	r3, [sp, #8]
 800cc6a:	b9bb      	cbnz	r3, 800cc9c <_dtoa_r+0x904>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc72:	b99b      	cbnz	r3, 800cc9c <_dtoa_r+0x904>
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc7a:	0d1b      	lsrs	r3, r3, #20
 800cc7c:	051b      	lsls	r3, r3, #20
 800cc7e:	b183      	cbz	r3, 800cca2 <_dtoa_r+0x90a>
 800cc80:	9b05      	ldr	r3, [sp, #20]
 800cc82:	3301      	adds	r3, #1
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	9b06      	ldr	r3, [sp, #24]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	9306      	str	r3, [sp, #24]
 800cc8c:	f04f 0801 	mov.w	r8, #1
 800cc90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f47f af6f 	bne.w	800cb76 <_dtoa_r+0x7de>
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e774      	b.n	800cb86 <_dtoa_r+0x7ee>
 800cc9c:	f04f 0800 	mov.w	r8, #0
 800cca0:	e7f6      	b.n	800cc90 <_dtoa_r+0x8f8>
 800cca2:	4698      	mov	r8, r3
 800cca4:	e7f4      	b.n	800cc90 <_dtoa_r+0x8f8>
 800cca6:	d082      	beq.n	800cbae <_dtoa_r+0x816>
 800cca8:	9a05      	ldr	r2, [sp, #20]
 800ccaa:	331c      	adds	r3, #28
 800ccac:	441a      	add	r2, r3
 800ccae:	9205      	str	r2, [sp, #20]
 800ccb0:	9a06      	ldr	r2, [sp, #24]
 800ccb2:	441a      	add	r2, r3
 800ccb4:	441d      	add	r5, r3
 800ccb6:	9206      	str	r2, [sp, #24]
 800ccb8:	e779      	b.n	800cbae <_dtoa_r+0x816>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	e7f4      	b.n	800cca8 <_dtoa_r+0x910>
 800ccbe:	9b04      	ldr	r3, [sp, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	dc37      	bgt.n	800cd34 <_dtoa_r+0x99c>
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	dd34      	ble.n	800cd34 <_dtoa_r+0x99c>
 800ccca:	9b04      	ldr	r3, [sp, #16]
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	b963      	cbnz	r3, 800ccec <_dtoa_r+0x954>
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	2205      	movs	r2, #5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f000 fe1c 	bl	800d914 <__multadd>
 800ccdc:	4601      	mov	r1, r0
 800ccde:	4606      	mov	r6, r0
 800cce0:	4650      	mov	r0, sl
 800cce2:	f001 f87b 	bl	800dddc <__mcmp>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	f73f adbb 	bgt.w	800c862 <_dtoa_r+0x4ca>
 800ccec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccee:	9d00      	ldr	r5, [sp, #0]
 800ccf0:	ea6f 0b03 	mvn.w	fp, r3
 800ccf4:	f04f 0800 	mov.w	r8, #0
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fde8 	bl	800d8d0 <_Bfree>
 800cd00:	2f00      	cmp	r7, #0
 800cd02:	f43f aeab 	beq.w	800ca5c <_dtoa_r+0x6c4>
 800cd06:	f1b8 0f00 	cmp.w	r8, #0
 800cd0a:	d005      	beq.n	800cd18 <_dtoa_r+0x980>
 800cd0c:	45b8      	cmp	r8, r7
 800cd0e:	d003      	beq.n	800cd18 <_dtoa_r+0x980>
 800cd10:	4641      	mov	r1, r8
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fddc 	bl	800d8d0 <_Bfree>
 800cd18:	4639      	mov	r1, r7
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f000 fdd8 	bl	800d8d0 <_Bfree>
 800cd20:	e69c      	b.n	800ca5c <_dtoa_r+0x6c4>
 800cd22:	2600      	movs	r6, #0
 800cd24:	4637      	mov	r7, r6
 800cd26:	e7e1      	b.n	800ccec <_dtoa_r+0x954>
 800cd28:	46bb      	mov	fp, r7
 800cd2a:	4637      	mov	r7, r6
 800cd2c:	e599      	b.n	800c862 <_dtoa_r+0x4ca>
 800cd2e:	bf00      	nop
 800cd30:	40240000 	.word	0x40240000
 800cd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 80c8 	beq.w	800cecc <_dtoa_r+0xb34>
 800cd3c:	9b04      	ldr	r3, [sp, #16]
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	2d00      	cmp	r5, #0
 800cd42:	dd05      	ble.n	800cd50 <_dtoa_r+0x9b8>
 800cd44:	4639      	mov	r1, r7
 800cd46:	462a      	mov	r2, r5
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f000 ffdb 	bl	800dd04 <__lshift>
 800cd4e:	4607      	mov	r7, r0
 800cd50:	f1b8 0f00 	cmp.w	r8, #0
 800cd54:	d05b      	beq.n	800ce0e <_dtoa_r+0xa76>
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 fd79 	bl	800d850 <_Balloc>
 800cd5e:	4605      	mov	r5, r0
 800cd60:	b928      	cbnz	r0, 800cd6e <_dtoa_r+0x9d6>
 800cd62:	4b83      	ldr	r3, [pc, #524]	; (800cf70 <_dtoa_r+0xbd8>)
 800cd64:	4602      	mov	r2, r0
 800cd66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cd6a:	f7ff bb2e 	b.w	800c3ca <_dtoa_r+0x32>
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	3202      	adds	r2, #2
 800cd72:	0092      	lsls	r2, r2, #2
 800cd74:	f107 010c 	add.w	r1, r7, #12
 800cd78:	300c      	adds	r0, #12
 800cd7a:	f7ff fa6e 	bl	800c25a <memcpy>
 800cd7e:	2201      	movs	r2, #1
 800cd80:	4629      	mov	r1, r5
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 ffbe 	bl	800dd04 <__lshift>
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd92:	4413      	add	r3, r2
 800cd94:	9308      	str	r3, [sp, #32]
 800cd96:	9b02      	ldr	r3, [sp, #8]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	46b8      	mov	r8, r7
 800cd9e:	9306      	str	r3, [sp, #24]
 800cda0:	4607      	mov	r7, r0
 800cda2:	9b04      	ldr	r3, [sp, #16]
 800cda4:	4631      	mov	r1, r6
 800cda6:	3b01      	subs	r3, #1
 800cda8:	4650      	mov	r0, sl
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	f7ff fa6c 	bl	800c288 <quorem>
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	9002      	str	r0, [sp, #8]
 800cdb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdb8:	4650      	mov	r0, sl
 800cdba:	f001 f80f 	bl	800dddc <__mcmp>
 800cdbe:	463a      	mov	r2, r7
 800cdc0:	9005      	str	r0, [sp, #20]
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f001 f825 	bl	800de14 <__mdiff>
 800cdca:	68c2      	ldr	r2, [r0, #12]
 800cdcc:	4605      	mov	r5, r0
 800cdce:	bb02      	cbnz	r2, 800ce12 <_dtoa_r+0xa7a>
 800cdd0:	4601      	mov	r1, r0
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	f001 f802 	bl	800dddc <__mcmp>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	4629      	mov	r1, r5
 800cddc:	4620      	mov	r0, r4
 800cdde:	9209      	str	r2, [sp, #36]	; 0x24
 800cde0:	f000 fd76 	bl	800d8d0 <_Bfree>
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cde8:	9d04      	ldr	r5, [sp, #16]
 800cdea:	ea43 0102 	orr.w	r1, r3, r2
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	4319      	orrs	r1, r3
 800cdf2:	d110      	bne.n	800ce16 <_dtoa_r+0xa7e>
 800cdf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdf8:	d029      	beq.n	800ce4e <_dtoa_r+0xab6>
 800cdfa:	9b05      	ldr	r3, [sp, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dd02      	ble.n	800ce06 <_dtoa_r+0xa6e>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	f883 9000 	strb.w	r9, [r3]
 800ce0c:	e774      	b.n	800ccf8 <_dtoa_r+0x960>
 800ce0e:	4638      	mov	r0, r7
 800ce10:	e7ba      	b.n	800cd88 <_dtoa_r+0x9f0>
 800ce12:	2201      	movs	r2, #1
 800ce14:	e7e1      	b.n	800cdda <_dtoa_r+0xa42>
 800ce16:	9b05      	ldr	r3, [sp, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	db04      	blt.n	800ce26 <_dtoa_r+0xa8e>
 800ce1c:	9907      	ldr	r1, [sp, #28]
 800ce1e:	430b      	orrs	r3, r1
 800ce20:	9906      	ldr	r1, [sp, #24]
 800ce22:	430b      	orrs	r3, r1
 800ce24:	d120      	bne.n	800ce68 <_dtoa_r+0xad0>
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	dded      	ble.n	800ce06 <_dtoa_r+0xa6e>
 800ce2a:	4651      	mov	r1, sl
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 ff68 	bl	800dd04 <__lshift>
 800ce34:	4631      	mov	r1, r6
 800ce36:	4682      	mov	sl, r0
 800ce38:	f000 ffd0 	bl	800dddc <__mcmp>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	dc03      	bgt.n	800ce48 <_dtoa_r+0xab0>
 800ce40:	d1e1      	bne.n	800ce06 <_dtoa_r+0xa6e>
 800ce42:	f019 0f01 	tst.w	r9, #1
 800ce46:	d0de      	beq.n	800ce06 <_dtoa_r+0xa6e>
 800ce48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce4c:	d1d8      	bne.n	800ce00 <_dtoa_r+0xa68>
 800ce4e:	9a01      	ldr	r2, [sp, #4]
 800ce50:	2339      	movs	r3, #57	; 0x39
 800ce52:	7013      	strb	r3, [r2, #0]
 800ce54:	462b      	mov	r3, r5
 800ce56:	461d      	mov	r5, r3
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce5e:	2a39      	cmp	r2, #57	; 0x39
 800ce60:	d06c      	beq.n	800cf3c <_dtoa_r+0xba4>
 800ce62:	3201      	adds	r2, #1
 800ce64:	701a      	strb	r2, [r3, #0]
 800ce66:	e747      	b.n	800ccf8 <_dtoa_r+0x960>
 800ce68:	2a00      	cmp	r2, #0
 800ce6a:	dd07      	ble.n	800ce7c <_dtoa_r+0xae4>
 800ce6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce70:	d0ed      	beq.n	800ce4e <_dtoa_r+0xab6>
 800ce72:	9a01      	ldr	r2, [sp, #4]
 800ce74:	f109 0301 	add.w	r3, r9, #1
 800ce78:	7013      	strb	r3, [r2, #0]
 800ce7a:	e73d      	b.n	800ccf8 <_dtoa_r+0x960>
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	9a08      	ldr	r2, [sp, #32]
 800ce80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d043      	beq.n	800cf10 <_dtoa_r+0xb78>
 800ce88:	4651      	mov	r1, sl
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fd40 	bl	800d914 <__multadd>
 800ce94:	45b8      	cmp	r8, r7
 800ce96:	4682      	mov	sl, r0
 800ce98:	f04f 0300 	mov.w	r3, #0
 800ce9c:	f04f 020a 	mov.w	r2, #10
 800cea0:	4641      	mov	r1, r8
 800cea2:	4620      	mov	r0, r4
 800cea4:	d107      	bne.n	800ceb6 <_dtoa_r+0xb1e>
 800cea6:	f000 fd35 	bl	800d914 <__multadd>
 800ceaa:	4680      	mov	r8, r0
 800ceac:	4607      	mov	r7, r0
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	e775      	b.n	800cda2 <_dtoa_r+0xa0a>
 800ceb6:	f000 fd2d 	bl	800d914 <__multadd>
 800ceba:	4639      	mov	r1, r7
 800cebc:	4680      	mov	r8, r0
 800cebe:	2300      	movs	r3, #0
 800cec0:	220a      	movs	r2, #10
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 fd26 	bl	800d914 <__multadd>
 800cec8:	4607      	mov	r7, r0
 800ceca:	e7f0      	b.n	800ceae <_dtoa_r+0xb16>
 800cecc:	9b04      	ldr	r3, [sp, #16]
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	9d00      	ldr	r5, [sp, #0]
 800ced2:	4631      	mov	r1, r6
 800ced4:	4650      	mov	r0, sl
 800ced6:	f7ff f9d7 	bl	800c288 <quorem>
 800ceda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	f805 9b01 	strb.w	r9, [r5], #1
 800cee4:	1aea      	subs	r2, r5, r3
 800cee6:	9b01      	ldr	r3, [sp, #4]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	dd07      	ble.n	800cefc <_dtoa_r+0xb64>
 800ceec:	4651      	mov	r1, sl
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 fd0e 	bl	800d914 <__multadd>
 800cef8:	4682      	mov	sl, r0
 800cefa:	e7ea      	b.n	800ced2 <_dtoa_r+0xb3a>
 800cefc:	9b01      	ldr	r3, [sp, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	bfc8      	it	gt
 800cf02:	461d      	movgt	r5, r3
 800cf04:	9b00      	ldr	r3, [sp, #0]
 800cf06:	bfd8      	it	le
 800cf08:	2501      	movle	r5, #1
 800cf0a:	441d      	add	r5, r3
 800cf0c:	f04f 0800 	mov.w	r8, #0
 800cf10:	4651      	mov	r1, sl
 800cf12:	2201      	movs	r2, #1
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 fef5 	bl	800dd04 <__lshift>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4682      	mov	sl, r0
 800cf1e:	f000 ff5d 	bl	800dddc <__mcmp>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dc96      	bgt.n	800ce54 <_dtoa_r+0xabc>
 800cf26:	d102      	bne.n	800cf2e <_dtoa_r+0xb96>
 800cf28:	f019 0f01 	tst.w	r9, #1
 800cf2c:	d192      	bne.n	800ce54 <_dtoa_r+0xabc>
 800cf2e:	462b      	mov	r3, r5
 800cf30:	461d      	mov	r5, r3
 800cf32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf36:	2a30      	cmp	r2, #48	; 0x30
 800cf38:	d0fa      	beq.n	800cf30 <_dtoa_r+0xb98>
 800cf3a:	e6dd      	b.n	800ccf8 <_dtoa_r+0x960>
 800cf3c:	9a00      	ldr	r2, [sp, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d189      	bne.n	800ce56 <_dtoa_r+0xabe>
 800cf42:	f10b 0b01 	add.w	fp, fp, #1
 800cf46:	2331      	movs	r3, #49	; 0x31
 800cf48:	e796      	b.n	800ce78 <_dtoa_r+0xae0>
 800cf4a:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <_dtoa_r+0xbdc>)
 800cf4c:	f7ff ba99 	b.w	800c482 <_dtoa_r+0xea>
 800cf50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f47f aa6d 	bne.w	800c432 <_dtoa_r+0x9a>
 800cf58:	4b07      	ldr	r3, [pc, #28]	; (800cf78 <_dtoa_r+0xbe0>)
 800cf5a:	f7ff ba92 	b.w	800c482 <_dtoa_r+0xea>
 800cf5e:	9b01      	ldr	r3, [sp, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dcb5      	bgt.n	800ced0 <_dtoa_r+0xb38>
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	f73f aeb1 	bgt.w	800ccce <_dtoa_r+0x936>
 800cf6c:	e7b0      	b.n	800ced0 <_dtoa_r+0xb38>
 800cf6e:	bf00      	nop
 800cf70:	08010eb1 	.word	0x08010eb1
 800cf74:	08010e09 	.word	0x08010e09
 800cf78:	08010e35 	.word	0x08010e35

0800cf7c <_free_r>:
 800cf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	d044      	beq.n	800d00c <_free_r+0x90>
 800cf82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf86:	9001      	str	r0, [sp, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf8e:	bfb8      	it	lt
 800cf90:	18e4      	addlt	r4, r4, r3
 800cf92:	f000 fc51 	bl	800d838 <__malloc_lock>
 800cf96:	4a1e      	ldr	r2, [pc, #120]	; (800d010 <_free_r+0x94>)
 800cf98:	9801      	ldr	r0, [sp, #4]
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	b933      	cbnz	r3, 800cfac <_free_r+0x30>
 800cf9e:	6063      	str	r3, [r4, #4]
 800cfa0:	6014      	str	r4, [r2, #0]
 800cfa2:	b003      	add	sp, #12
 800cfa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfa8:	f000 bc4c 	b.w	800d844 <__malloc_unlock>
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	d908      	bls.n	800cfc2 <_free_r+0x46>
 800cfb0:	6825      	ldr	r5, [r4, #0]
 800cfb2:	1961      	adds	r1, r4, r5
 800cfb4:	428b      	cmp	r3, r1
 800cfb6:	bf01      	itttt	eq
 800cfb8:	6819      	ldreq	r1, [r3, #0]
 800cfba:	685b      	ldreq	r3, [r3, #4]
 800cfbc:	1949      	addeq	r1, r1, r5
 800cfbe:	6021      	streq	r1, [r4, #0]
 800cfc0:	e7ed      	b.n	800cf9e <_free_r+0x22>
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	b10b      	cbz	r3, 800cfcc <_free_r+0x50>
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	d9fa      	bls.n	800cfc2 <_free_r+0x46>
 800cfcc:	6811      	ldr	r1, [r2, #0]
 800cfce:	1855      	adds	r5, r2, r1
 800cfd0:	42a5      	cmp	r5, r4
 800cfd2:	d10b      	bne.n	800cfec <_free_r+0x70>
 800cfd4:	6824      	ldr	r4, [r4, #0]
 800cfd6:	4421      	add	r1, r4
 800cfd8:	1854      	adds	r4, r2, r1
 800cfda:	42a3      	cmp	r3, r4
 800cfdc:	6011      	str	r1, [r2, #0]
 800cfde:	d1e0      	bne.n	800cfa2 <_free_r+0x26>
 800cfe0:	681c      	ldr	r4, [r3, #0]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	6053      	str	r3, [r2, #4]
 800cfe6:	440c      	add	r4, r1
 800cfe8:	6014      	str	r4, [r2, #0]
 800cfea:	e7da      	b.n	800cfa2 <_free_r+0x26>
 800cfec:	d902      	bls.n	800cff4 <_free_r+0x78>
 800cfee:	230c      	movs	r3, #12
 800cff0:	6003      	str	r3, [r0, #0]
 800cff2:	e7d6      	b.n	800cfa2 <_free_r+0x26>
 800cff4:	6825      	ldr	r5, [r4, #0]
 800cff6:	1961      	adds	r1, r4, r5
 800cff8:	428b      	cmp	r3, r1
 800cffa:	bf04      	itt	eq
 800cffc:	6819      	ldreq	r1, [r3, #0]
 800cffe:	685b      	ldreq	r3, [r3, #4]
 800d000:	6063      	str	r3, [r4, #4]
 800d002:	bf04      	itt	eq
 800d004:	1949      	addeq	r1, r1, r5
 800d006:	6021      	streq	r1, [r4, #0]
 800d008:	6054      	str	r4, [r2, #4]
 800d00a:	e7ca      	b.n	800cfa2 <_free_r+0x26>
 800d00c:	b003      	add	sp, #12
 800d00e:	bd30      	pop	{r4, r5, pc}
 800d010:	20000cfc 	.word	0x20000cfc

0800d014 <rshift>:
 800d014:	6903      	ldr	r3, [r0, #16]
 800d016:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d01a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d01e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d022:	f100 0414 	add.w	r4, r0, #20
 800d026:	dd45      	ble.n	800d0b4 <rshift+0xa0>
 800d028:	f011 011f 	ands.w	r1, r1, #31
 800d02c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d030:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d034:	d10c      	bne.n	800d050 <rshift+0x3c>
 800d036:	f100 0710 	add.w	r7, r0, #16
 800d03a:	4629      	mov	r1, r5
 800d03c:	42b1      	cmp	r1, r6
 800d03e:	d334      	bcc.n	800d0aa <rshift+0x96>
 800d040:	1a9b      	subs	r3, r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	1eea      	subs	r2, r5, #3
 800d046:	4296      	cmp	r6, r2
 800d048:	bf38      	it	cc
 800d04a:	2300      	movcc	r3, #0
 800d04c:	4423      	add	r3, r4
 800d04e:	e015      	b.n	800d07c <rshift+0x68>
 800d050:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d054:	f1c1 0820 	rsb	r8, r1, #32
 800d058:	40cf      	lsrs	r7, r1
 800d05a:	f105 0e04 	add.w	lr, r5, #4
 800d05e:	46a1      	mov	r9, r4
 800d060:	4576      	cmp	r6, lr
 800d062:	46f4      	mov	ip, lr
 800d064:	d815      	bhi.n	800d092 <rshift+0x7e>
 800d066:	1a9a      	subs	r2, r3, r2
 800d068:	0092      	lsls	r2, r2, #2
 800d06a:	3a04      	subs	r2, #4
 800d06c:	3501      	adds	r5, #1
 800d06e:	42ae      	cmp	r6, r5
 800d070:	bf38      	it	cc
 800d072:	2200      	movcc	r2, #0
 800d074:	18a3      	adds	r3, r4, r2
 800d076:	50a7      	str	r7, [r4, r2]
 800d078:	b107      	cbz	r7, 800d07c <rshift+0x68>
 800d07a:	3304      	adds	r3, #4
 800d07c:	1b1a      	subs	r2, r3, r4
 800d07e:	42a3      	cmp	r3, r4
 800d080:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d084:	bf08      	it	eq
 800d086:	2300      	moveq	r3, #0
 800d088:	6102      	str	r2, [r0, #16]
 800d08a:	bf08      	it	eq
 800d08c:	6143      	streq	r3, [r0, #20]
 800d08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d092:	f8dc c000 	ldr.w	ip, [ip]
 800d096:	fa0c fc08 	lsl.w	ip, ip, r8
 800d09a:	ea4c 0707 	orr.w	r7, ip, r7
 800d09e:	f849 7b04 	str.w	r7, [r9], #4
 800d0a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0a6:	40cf      	lsrs	r7, r1
 800d0a8:	e7da      	b.n	800d060 <rshift+0x4c>
 800d0aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0b2:	e7c3      	b.n	800d03c <rshift+0x28>
 800d0b4:	4623      	mov	r3, r4
 800d0b6:	e7e1      	b.n	800d07c <rshift+0x68>

0800d0b8 <__hexdig_fun>:
 800d0b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d0bc:	2b09      	cmp	r3, #9
 800d0be:	d802      	bhi.n	800d0c6 <__hexdig_fun+0xe>
 800d0c0:	3820      	subs	r0, #32
 800d0c2:	b2c0      	uxtb	r0, r0
 800d0c4:	4770      	bx	lr
 800d0c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d0ca:	2b05      	cmp	r3, #5
 800d0cc:	d801      	bhi.n	800d0d2 <__hexdig_fun+0x1a>
 800d0ce:	3847      	subs	r0, #71	; 0x47
 800d0d0:	e7f7      	b.n	800d0c2 <__hexdig_fun+0xa>
 800d0d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d0d6:	2b05      	cmp	r3, #5
 800d0d8:	d801      	bhi.n	800d0de <__hexdig_fun+0x26>
 800d0da:	3827      	subs	r0, #39	; 0x27
 800d0dc:	e7f1      	b.n	800d0c2 <__hexdig_fun+0xa>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	4770      	bx	lr
	...

0800d0e4 <__gethex>:
 800d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e8:	4617      	mov	r7, r2
 800d0ea:	680a      	ldr	r2, [r1, #0]
 800d0ec:	b085      	sub	sp, #20
 800d0ee:	f102 0b02 	add.w	fp, r2, #2
 800d0f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0fa:	4681      	mov	r9, r0
 800d0fc:	468a      	mov	sl, r1
 800d0fe:	9302      	str	r3, [sp, #8]
 800d100:	32fe      	adds	r2, #254	; 0xfe
 800d102:	eb02 030b 	add.w	r3, r2, fp
 800d106:	46d8      	mov	r8, fp
 800d108:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	2830      	cmp	r0, #48	; 0x30
 800d110:	d0f7      	beq.n	800d102 <__gethex+0x1e>
 800d112:	f7ff ffd1 	bl	800d0b8 <__hexdig_fun>
 800d116:	4604      	mov	r4, r0
 800d118:	2800      	cmp	r0, #0
 800d11a:	d138      	bne.n	800d18e <__gethex+0xaa>
 800d11c:	49a7      	ldr	r1, [pc, #668]	; (800d3bc <__gethex+0x2d8>)
 800d11e:	2201      	movs	r2, #1
 800d120:	4640      	mov	r0, r8
 800d122:	f7fe fff6 	bl	800c112 <strncmp>
 800d126:	4606      	mov	r6, r0
 800d128:	2800      	cmp	r0, #0
 800d12a:	d169      	bne.n	800d200 <__gethex+0x11c>
 800d12c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d130:	465d      	mov	r5, fp
 800d132:	f7ff ffc1 	bl	800d0b8 <__hexdig_fun>
 800d136:	2800      	cmp	r0, #0
 800d138:	d064      	beq.n	800d204 <__gethex+0x120>
 800d13a:	465a      	mov	r2, fp
 800d13c:	7810      	ldrb	r0, [r2, #0]
 800d13e:	2830      	cmp	r0, #48	; 0x30
 800d140:	4690      	mov	r8, r2
 800d142:	f102 0201 	add.w	r2, r2, #1
 800d146:	d0f9      	beq.n	800d13c <__gethex+0x58>
 800d148:	f7ff ffb6 	bl	800d0b8 <__hexdig_fun>
 800d14c:	2301      	movs	r3, #1
 800d14e:	fab0 f480 	clz	r4, r0
 800d152:	0964      	lsrs	r4, r4, #5
 800d154:	465e      	mov	r6, fp
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	4642      	mov	r2, r8
 800d15a:	4615      	mov	r5, r2
 800d15c:	3201      	adds	r2, #1
 800d15e:	7828      	ldrb	r0, [r5, #0]
 800d160:	f7ff ffaa 	bl	800d0b8 <__hexdig_fun>
 800d164:	2800      	cmp	r0, #0
 800d166:	d1f8      	bne.n	800d15a <__gethex+0x76>
 800d168:	4994      	ldr	r1, [pc, #592]	; (800d3bc <__gethex+0x2d8>)
 800d16a:	2201      	movs	r2, #1
 800d16c:	4628      	mov	r0, r5
 800d16e:	f7fe ffd0 	bl	800c112 <strncmp>
 800d172:	b978      	cbnz	r0, 800d194 <__gethex+0xb0>
 800d174:	b946      	cbnz	r6, 800d188 <__gethex+0xa4>
 800d176:	1c6e      	adds	r6, r5, #1
 800d178:	4632      	mov	r2, r6
 800d17a:	4615      	mov	r5, r2
 800d17c:	3201      	adds	r2, #1
 800d17e:	7828      	ldrb	r0, [r5, #0]
 800d180:	f7ff ff9a 	bl	800d0b8 <__hexdig_fun>
 800d184:	2800      	cmp	r0, #0
 800d186:	d1f8      	bne.n	800d17a <__gethex+0x96>
 800d188:	1b73      	subs	r3, r6, r5
 800d18a:	009e      	lsls	r6, r3, #2
 800d18c:	e004      	b.n	800d198 <__gethex+0xb4>
 800d18e:	2400      	movs	r4, #0
 800d190:	4626      	mov	r6, r4
 800d192:	e7e1      	b.n	800d158 <__gethex+0x74>
 800d194:	2e00      	cmp	r6, #0
 800d196:	d1f7      	bne.n	800d188 <__gethex+0xa4>
 800d198:	782b      	ldrb	r3, [r5, #0]
 800d19a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d19e:	2b50      	cmp	r3, #80	; 0x50
 800d1a0:	d13d      	bne.n	800d21e <__gethex+0x13a>
 800d1a2:	786b      	ldrb	r3, [r5, #1]
 800d1a4:	2b2b      	cmp	r3, #43	; 0x2b
 800d1a6:	d02f      	beq.n	800d208 <__gethex+0x124>
 800d1a8:	2b2d      	cmp	r3, #45	; 0x2d
 800d1aa:	d031      	beq.n	800d210 <__gethex+0x12c>
 800d1ac:	1c69      	adds	r1, r5, #1
 800d1ae:	f04f 0b00 	mov.w	fp, #0
 800d1b2:	7808      	ldrb	r0, [r1, #0]
 800d1b4:	f7ff ff80 	bl	800d0b8 <__hexdig_fun>
 800d1b8:	1e42      	subs	r2, r0, #1
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	2a18      	cmp	r2, #24
 800d1be:	d82e      	bhi.n	800d21e <__gethex+0x13a>
 800d1c0:	f1a0 0210 	sub.w	r2, r0, #16
 800d1c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1c8:	f7ff ff76 	bl	800d0b8 <__hexdig_fun>
 800d1cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d1d0:	fa5f fc8c 	uxtb.w	ip, ip
 800d1d4:	f1bc 0f18 	cmp.w	ip, #24
 800d1d8:	d91d      	bls.n	800d216 <__gethex+0x132>
 800d1da:	f1bb 0f00 	cmp.w	fp, #0
 800d1de:	d000      	beq.n	800d1e2 <__gethex+0xfe>
 800d1e0:	4252      	negs	r2, r2
 800d1e2:	4416      	add	r6, r2
 800d1e4:	f8ca 1000 	str.w	r1, [sl]
 800d1e8:	b1dc      	cbz	r4, 800d222 <__gethex+0x13e>
 800d1ea:	9b01      	ldr	r3, [sp, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bf14      	ite	ne
 800d1f0:	f04f 0800 	movne.w	r8, #0
 800d1f4:	f04f 0806 	moveq.w	r8, #6
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	b005      	add	sp, #20
 800d1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d200:	4645      	mov	r5, r8
 800d202:	4626      	mov	r6, r4
 800d204:	2401      	movs	r4, #1
 800d206:	e7c7      	b.n	800d198 <__gethex+0xb4>
 800d208:	f04f 0b00 	mov.w	fp, #0
 800d20c:	1ca9      	adds	r1, r5, #2
 800d20e:	e7d0      	b.n	800d1b2 <__gethex+0xce>
 800d210:	f04f 0b01 	mov.w	fp, #1
 800d214:	e7fa      	b.n	800d20c <__gethex+0x128>
 800d216:	230a      	movs	r3, #10
 800d218:	fb03 0002 	mla	r0, r3, r2, r0
 800d21c:	e7d0      	b.n	800d1c0 <__gethex+0xdc>
 800d21e:	4629      	mov	r1, r5
 800d220:	e7e0      	b.n	800d1e4 <__gethex+0x100>
 800d222:	eba5 0308 	sub.w	r3, r5, r8
 800d226:	3b01      	subs	r3, #1
 800d228:	4621      	mov	r1, r4
 800d22a:	2b07      	cmp	r3, #7
 800d22c:	dc0a      	bgt.n	800d244 <__gethex+0x160>
 800d22e:	4648      	mov	r0, r9
 800d230:	f000 fb0e 	bl	800d850 <_Balloc>
 800d234:	4604      	mov	r4, r0
 800d236:	b940      	cbnz	r0, 800d24a <__gethex+0x166>
 800d238:	4b61      	ldr	r3, [pc, #388]	; (800d3c0 <__gethex+0x2dc>)
 800d23a:	4602      	mov	r2, r0
 800d23c:	21e4      	movs	r1, #228	; 0xe4
 800d23e:	4861      	ldr	r0, [pc, #388]	; (800d3c4 <__gethex+0x2e0>)
 800d240:	f001 f9d6 	bl	800e5f0 <__assert_func>
 800d244:	3101      	adds	r1, #1
 800d246:	105b      	asrs	r3, r3, #1
 800d248:	e7ef      	b.n	800d22a <__gethex+0x146>
 800d24a:	f100 0a14 	add.w	sl, r0, #20
 800d24e:	2300      	movs	r3, #0
 800d250:	495a      	ldr	r1, [pc, #360]	; (800d3bc <__gethex+0x2d8>)
 800d252:	f8cd a004 	str.w	sl, [sp, #4]
 800d256:	469b      	mov	fp, r3
 800d258:	45a8      	cmp	r8, r5
 800d25a:	d342      	bcc.n	800d2e2 <__gethex+0x1fe>
 800d25c:	9801      	ldr	r0, [sp, #4]
 800d25e:	f840 bb04 	str.w	fp, [r0], #4
 800d262:	eba0 000a 	sub.w	r0, r0, sl
 800d266:	1080      	asrs	r0, r0, #2
 800d268:	6120      	str	r0, [r4, #16]
 800d26a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d26e:	4658      	mov	r0, fp
 800d270:	f000 fbe0 	bl	800da34 <__hi0bits>
 800d274:	683d      	ldr	r5, [r7, #0]
 800d276:	eba8 0000 	sub.w	r0, r8, r0
 800d27a:	42a8      	cmp	r0, r5
 800d27c:	dd59      	ble.n	800d332 <__gethex+0x24e>
 800d27e:	eba0 0805 	sub.w	r8, r0, r5
 800d282:	4641      	mov	r1, r8
 800d284:	4620      	mov	r0, r4
 800d286:	f000 ff6f 	bl	800e168 <__any_on>
 800d28a:	4683      	mov	fp, r0
 800d28c:	b1b8      	cbz	r0, 800d2be <__gethex+0x1da>
 800d28e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d292:	1159      	asrs	r1, r3, #5
 800d294:	f003 021f 	and.w	r2, r3, #31
 800d298:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d29c:	f04f 0b01 	mov.w	fp, #1
 800d2a0:	fa0b f202 	lsl.w	r2, fp, r2
 800d2a4:	420a      	tst	r2, r1
 800d2a6:	d00a      	beq.n	800d2be <__gethex+0x1da>
 800d2a8:	455b      	cmp	r3, fp
 800d2aa:	dd06      	ble.n	800d2ba <__gethex+0x1d6>
 800d2ac:	f1a8 0102 	sub.w	r1, r8, #2
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f000 ff59 	bl	800e168 <__any_on>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d138      	bne.n	800d32c <__gethex+0x248>
 800d2ba:	f04f 0b02 	mov.w	fp, #2
 800d2be:	4641      	mov	r1, r8
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f7ff fea7 	bl	800d014 <rshift>
 800d2c6:	4446      	add	r6, r8
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	42b3      	cmp	r3, r6
 800d2cc:	da41      	bge.n	800d352 <__gethex+0x26e>
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	4648      	mov	r0, r9
 800d2d2:	f000 fafd 	bl	800d8d0 <_Bfree>
 800d2d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2d8:	2300      	movs	r3, #0
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d2e0:	e78a      	b.n	800d1f8 <__gethex+0x114>
 800d2e2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d2e6:	2a2e      	cmp	r2, #46	; 0x2e
 800d2e8:	d014      	beq.n	800d314 <__gethex+0x230>
 800d2ea:	2b20      	cmp	r3, #32
 800d2ec:	d106      	bne.n	800d2fc <__gethex+0x218>
 800d2ee:	9b01      	ldr	r3, [sp, #4]
 800d2f0:	f843 bb04 	str.w	fp, [r3], #4
 800d2f4:	f04f 0b00 	mov.w	fp, #0
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	465b      	mov	r3, fp
 800d2fc:	7828      	ldrb	r0, [r5, #0]
 800d2fe:	9303      	str	r3, [sp, #12]
 800d300:	f7ff feda 	bl	800d0b8 <__hexdig_fun>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	f000 000f 	and.w	r0, r0, #15
 800d30a:	4098      	lsls	r0, r3
 800d30c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d310:	3304      	adds	r3, #4
 800d312:	e7a1      	b.n	800d258 <__gethex+0x174>
 800d314:	45a8      	cmp	r8, r5
 800d316:	d8e8      	bhi.n	800d2ea <__gethex+0x206>
 800d318:	2201      	movs	r2, #1
 800d31a:	4628      	mov	r0, r5
 800d31c:	9303      	str	r3, [sp, #12]
 800d31e:	f7fe fef8 	bl	800c112 <strncmp>
 800d322:	4926      	ldr	r1, [pc, #152]	; (800d3bc <__gethex+0x2d8>)
 800d324:	9b03      	ldr	r3, [sp, #12]
 800d326:	2800      	cmp	r0, #0
 800d328:	d1df      	bne.n	800d2ea <__gethex+0x206>
 800d32a:	e795      	b.n	800d258 <__gethex+0x174>
 800d32c:	f04f 0b03 	mov.w	fp, #3
 800d330:	e7c5      	b.n	800d2be <__gethex+0x1da>
 800d332:	da0b      	bge.n	800d34c <__gethex+0x268>
 800d334:	eba5 0800 	sub.w	r8, r5, r0
 800d338:	4621      	mov	r1, r4
 800d33a:	4642      	mov	r2, r8
 800d33c:	4648      	mov	r0, r9
 800d33e:	f000 fce1 	bl	800dd04 <__lshift>
 800d342:	eba6 0608 	sub.w	r6, r6, r8
 800d346:	4604      	mov	r4, r0
 800d348:	f100 0a14 	add.w	sl, r0, #20
 800d34c:	f04f 0b00 	mov.w	fp, #0
 800d350:	e7ba      	b.n	800d2c8 <__gethex+0x1e4>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	42b3      	cmp	r3, r6
 800d356:	dd73      	ble.n	800d440 <__gethex+0x35c>
 800d358:	1b9e      	subs	r6, r3, r6
 800d35a:	42b5      	cmp	r5, r6
 800d35c:	dc34      	bgt.n	800d3c8 <__gethex+0x2e4>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b02      	cmp	r3, #2
 800d362:	d023      	beq.n	800d3ac <__gethex+0x2c8>
 800d364:	2b03      	cmp	r3, #3
 800d366:	d025      	beq.n	800d3b4 <__gethex+0x2d0>
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d115      	bne.n	800d398 <__gethex+0x2b4>
 800d36c:	42b5      	cmp	r5, r6
 800d36e:	d113      	bne.n	800d398 <__gethex+0x2b4>
 800d370:	2d01      	cmp	r5, #1
 800d372:	d10b      	bne.n	800d38c <__gethex+0x2a8>
 800d374:	9a02      	ldr	r2, [sp, #8]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	2301      	movs	r3, #1
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	f8ca 3000 	str.w	r3, [sl]
 800d382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d384:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d388:	601c      	str	r4, [r3, #0]
 800d38a:	e735      	b.n	800d1f8 <__gethex+0x114>
 800d38c:	1e69      	subs	r1, r5, #1
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 feea 	bl	800e168 <__any_on>
 800d394:	2800      	cmp	r0, #0
 800d396:	d1ed      	bne.n	800d374 <__gethex+0x290>
 800d398:	4621      	mov	r1, r4
 800d39a:	4648      	mov	r0, r9
 800d39c:	f000 fa98 	bl	800d8d0 <_Bfree>
 800d3a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d3aa:	e725      	b.n	800d1f8 <__gethex+0x114>
 800d3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1f2      	bne.n	800d398 <__gethex+0x2b4>
 800d3b2:	e7df      	b.n	800d374 <__gethex+0x290>
 800d3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1dc      	bne.n	800d374 <__gethex+0x290>
 800d3ba:	e7ed      	b.n	800d398 <__gethex+0x2b4>
 800d3bc:	08010ca0 	.word	0x08010ca0
 800d3c0:	08010eb1 	.word	0x08010eb1
 800d3c4:	08010ec2 	.word	0x08010ec2
 800d3c8:	f106 38ff 	add.w	r8, r6, #4294967295
 800d3cc:	f1bb 0f00 	cmp.w	fp, #0
 800d3d0:	d133      	bne.n	800d43a <__gethex+0x356>
 800d3d2:	f1b8 0f00 	cmp.w	r8, #0
 800d3d6:	d004      	beq.n	800d3e2 <__gethex+0x2fe>
 800d3d8:	4641      	mov	r1, r8
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f000 fec4 	bl	800e168 <__any_on>
 800d3e0:	4683      	mov	fp, r0
 800d3e2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d3ec:	f008 081f 	and.w	r8, r8, #31
 800d3f0:	fa03 f308 	lsl.w	r3, r3, r8
 800d3f4:	4213      	tst	r3, r2
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	bf18      	it	ne
 800d3fc:	f04b 0b02 	orrne.w	fp, fp, #2
 800d400:	1bad      	subs	r5, r5, r6
 800d402:	f7ff fe07 	bl	800d014 <rshift>
 800d406:	687e      	ldr	r6, [r7, #4]
 800d408:	f04f 0802 	mov.w	r8, #2
 800d40c:	f1bb 0f00 	cmp.w	fp, #0
 800d410:	d04a      	beq.n	800d4a8 <__gethex+0x3c4>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2b02      	cmp	r3, #2
 800d416:	d016      	beq.n	800d446 <__gethex+0x362>
 800d418:	2b03      	cmp	r3, #3
 800d41a:	d018      	beq.n	800d44e <__gethex+0x36a>
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d109      	bne.n	800d434 <__gethex+0x350>
 800d420:	f01b 0f02 	tst.w	fp, #2
 800d424:	d006      	beq.n	800d434 <__gethex+0x350>
 800d426:	f8da 3000 	ldr.w	r3, [sl]
 800d42a:	ea4b 0b03 	orr.w	fp, fp, r3
 800d42e:	f01b 0f01 	tst.w	fp, #1
 800d432:	d10f      	bne.n	800d454 <__gethex+0x370>
 800d434:	f048 0810 	orr.w	r8, r8, #16
 800d438:	e036      	b.n	800d4a8 <__gethex+0x3c4>
 800d43a:	f04f 0b01 	mov.w	fp, #1
 800d43e:	e7d0      	b.n	800d3e2 <__gethex+0x2fe>
 800d440:	f04f 0801 	mov.w	r8, #1
 800d444:	e7e2      	b.n	800d40c <__gethex+0x328>
 800d446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d448:	f1c3 0301 	rsb	r3, r3, #1
 800d44c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0ef      	beq.n	800d434 <__gethex+0x350>
 800d454:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d458:	f104 0214 	add.w	r2, r4, #20
 800d45c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d466:	2300      	movs	r3, #0
 800d468:	4694      	mov	ip, r2
 800d46a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d46e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d472:	d01e      	beq.n	800d4b2 <__gethex+0x3ce>
 800d474:	3101      	adds	r1, #1
 800d476:	f8cc 1000 	str.w	r1, [ip]
 800d47a:	f1b8 0f02 	cmp.w	r8, #2
 800d47e:	f104 0214 	add.w	r2, r4, #20
 800d482:	d13d      	bne.n	800d500 <__gethex+0x41c>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	3b01      	subs	r3, #1
 800d488:	42ab      	cmp	r3, r5
 800d48a:	d10b      	bne.n	800d4a4 <__gethex+0x3c0>
 800d48c:	1169      	asrs	r1, r5, #5
 800d48e:	2301      	movs	r3, #1
 800d490:	f005 051f 	and.w	r5, r5, #31
 800d494:	fa03 f505 	lsl.w	r5, r3, r5
 800d498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d49c:	421d      	tst	r5, r3
 800d49e:	bf18      	it	ne
 800d4a0:	f04f 0801 	movne.w	r8, #1
 800d4a4:	f048 0820 	orr.w	r8, r8, #32
 800d4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4aa:	601c      	str	r4, [r3, #0]
 800d4ac:	9b02      	ldr	r3, [sp, #8]
 800d4ae:	601e      	str	r6, [r3, #0]
 800d4b0:	e6a2      	b.n	800d1f8 <__gethex+0x114>
 800d4b2:	4290      	cmp	r0, r2
 800d4b4:	f842 3c04 	str.w	r3, [r2, #-4]
 800d4b8:	d8d6      	bhi.n	800d468 <__gethex+0x384>
 800d4ba:	68a2      	ldr	r2, [r4, #8]
 800d4bc:	4593      	cmp	fp, r2
 800d4be:	db17      	blt.n	800d4f0 <__gethex+0x40c>
 800d4c0:	6861      	ldr	r1, [r4, #4]
 800d4c2:	4648      	mov	r0, r9
 800d4c4:	3101      	adds	r1, #1
 800d4c6:	f000 f9c3 	bl	800d850 <_Balloc>
 800d4ca:	4682      	mov	sl, r0
 800d4cc:	b918      	cbnz	r0, 800d4d6 <__gethex+0x3f2>
 800d4ce:	4b1b      	ldr	r3, [pc, #108]	; (800d53c <__gethex+0x458>)
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	2184      	movs	r1, #132	; 0x84
 800d4d4:	e6b3      	b.n	800d23e <__gethex+0x15a>
 800d4d6:	6922      	ldr	r2, [r4, #16]
 800d4d8:	3202      	adds	r2, #2
 800d4da:	f104 010c 	add.w	r1, r4, #12
 800d4de:	0092      	lsls	r2, r2, #2
 800d4e0:	300c      	adds	r0, #12
 800d4e2:	f7fe feba 	bl	800c25a <memcpy>
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4648      	mov	r0, r9
 800d4ea:	f000 f9f1 	bl	800d8d0 <_Bfree>
 800d4ee:	4654      	mov	r4, sl
 800d4f0:	6922      	ldr	r2, [r4, #16]
 800d4f2:	1c51      	adds	r1, r2, #1
 800d4f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d4f8:	6121      	str	r1, [r4, #16]
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	6151      	str	r1, [r2, #20]
 800d4fe:	e7bc      	b.n	800d47a <__gethex+0x396>
 800d500:	6921      	ldr	r1, [r4, #16]
 800d502:	4559      	cmp	r1, fp
 800d504:	dd0b      	ble.n	800d51e <__gethex+0x43a>
 800d506:	2101      	movs	r1, #1
 800d508:	4620      	mov	r0, r4
 800d50a:	f7ff fd83 	bl	800d014 <rshift>
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	3601      	adds	r6, #1
 800d512:	42b3      	cmp	r3, r6
 800d514:	f6ff aedb 	blt.w	800d2ce <__gethex+0x1ea>
 800d518:	f04f 0801 	mov.w	r8, #1
 800d51c:	e7c2      	b.n	800d4a4 <__gethex+0x3c0>
 800d51e:	f015 051f 	ands.w	r5, r5, #31
 800d522:	d0f9      	beq.n	800d518 <__gethex+0x434>
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	441a      	add	r2, r3
 800d528:	f1c5 0520 	rsb	r5, r5, #32
 800d52c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d530:	f000 fa80 	bl	800da34 <__hi0bits>
 800d534:	42a8      	cmp	r0, r5
 800d536:	dbe6      	blt.n	800d506 <__gethex+0x422>
 800d538:	e7ee      	b.n	800d518 <__gethex+0x434>
 800d53a:	bf00      	nop
 800d53c:	08010eb1 	.word	0x08010eb1

0800d540 <L_shift>:
 800d540:	f1c2 0208 	rsb	r2, r2, #8
 800d544:	0092      	lsls	r2, r2, #2
 800d546:	b570      	push	{r4, r5, r6, lr}
 800d548:	f1c2 0620 	rsb	r6, r2, #32
 800d54c:	6843      	ldr	r3, [r0, #4]
 800d54e:	6804      	ldr	r4, [r0, #0]
 800d550:	fa03 f506 	lsl.w	r5, r3, r6
 800d554:	432c      	orrs	r4, r5
 800d556:	40d3      	lsrs	r3, r2
 800d558:	6004      	str	r4, [r0, #0]
 800d55a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d55e:	4288      	cmp	r0, r1
 800d560:	d3f4      	bcc.n	800d54c <L_shift+0xc>
 800d562:	bd70      	pop	{r4, r5, r6, pc}

0800d564 <__match>:
 800d564:	b530      	push	{r4, r5, lr}
 800d566:	6803      	ldr	r3, [r0, #0]
 800d568:	3301      	adds	r3, #1
 800d56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d56e:	b914      	cbnz	r4, 800d576 <__match+0x12>
 800d570:	6003      	str	r3, [r0, #0]
 800d572:	2001      	movs	r0, #1
 800d574:	bd30      	pop	{r4, r5, pc}
 800d576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d57a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d57e:	2d19      	cmp	r5, #25
 800d580:	bf98      	it	ls
 800d582:	3220      	addls	r2, #32
 800d584:	42a2      	cmp	r2, r4
 800d586:	d0f0      	beq.n	800d56a <__match+0x6>
 800d588:	2000      	movs	r0, #0
 800d58a:	e7f3      	b.n	800d574 <__match+0x10>

0800d58c <__hexnan>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	680b      	ldr	r3, [r1, #0]
 800d592:	6801      	ldr	r1, [r0, #0]
 800d594:	115e      	asrs	r6, r3, #5
 800d596:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d59a:	f013 031f 	ands.w	r3, r3, #31
 800d59e:	b087      	sub	sp, #28
 800d5a0:	bf18      	it	ne
 800d5a2:	3604      	addne	r6, #4
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	1f37      	subs	r7, r6, #4
 800d5a8:	4682      	mov	sl, r0
 800d5aa:	4690      	mov	r8, r2
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5b2:	46b9      	mov	r9, r7
 800d5b4:	463c      	mov	r4, r7
 800d5b6:	9502      	str	r5, [sp, #8]
 800d5b8:	46ab      	mov	fp, r5
 800d5ba:	784a      	ldrb	r2, [r1, #1]
 800d5bc:	1c4b      	adds	r3, r1, #1
 800d5be:	9303      	str	r3, [sp, #12]
 800d5c0:	b342      	cbz	r2, 800d614 <__hexnan+0x88>
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	9105      	str	r1, [sp, #20]
 800d5c6:	9204      	str	r2, [sp, #16]
 800d5c8:	f7ff fd76 	bl	800d0b8 <__hexdig_fun>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d14f      	bne.n	800d670 <__hexnan+0xe4>
 800d5d0:	9a04      	ldr	r2, [sp, #16]
 800d5d2:	9905      	ldr	r1, [sp, #20]
 800d5d4:	2a20      	cmp	r2, #32
 800d5d6:	d818      	bhi.n	800d60a <__hexnan+0x7e>
 800d5d8:	9b02      	ldr	r3, [sp, #8]
 800d5da:	459b      	cmp	fp, r3
 800d5dc:	dd13      	ble.n	800d606 <__hexnan+0x7a>
 800d5de:	454c      	cmp	r4, r9
 800d5e0:	d206      	bcs.n	800d5f0 <__hexnan+0x64>
 800d5e2:	2d07      	cmp	r5, #7
 800d5e4:	dc04      	bgt.n	800d5f0 <__hexnan+0x64>
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f7ff ffa8 	bl	800d540 <L_shift>
 800d5f0:	4544      	cmp	r4, r8
 800d5f2:	d950      	bls.n	800d696 <__hexnan+0x10a>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f1a4 0904 	sub.w	r9, r4, #4
 800d5fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5fe:	f8cd b008 	str.w	fp, [sp, #8]
 800d602:	464c      	mov	r4, r9
 800d604:	461d      	mov	r5, r3
 800d606:	9903      	ldr	r1, [sp, #12]
 800d608:	e7d7      	b.n	800d5ba <__hexnan+0x2e>
 800d60a:	2a29      	cmp	r2, #41	; 0x29
 800d60c:	d155      	bne.n	800d6ba <__hexnan+0x12e>
 800d60e:	3102      	adds	r1, #2
 800d610:	f8ca 1000 	str.w	r1, [sl]
 800d614:	f1bb 0f00 	cmp.w	fp, #0
 800d618:	d04f      	beq.n	800d6ba <__hexnan+0x12e>
 800d61a:	454c      	cmp	r4, r9
 800d61c:	d206      	bcs.n	800d62c <__hexnan+0xa0>
 800d61e:	2d07      	cmp	r5, #7
 800d620:	dc04      	bgt.n	800d62c <__hexnan+0xa0>
 800d622:	462a      	mov	r2, r5
 800d624:	4649      	mov	r1, r9
 800d626:	4620      	mov	r0, r4
 800d628:	f7ff ff8a 	bl	800d540 <L_shift>
 800d62c:	4544      	cmp	r4, r8
 800d62e:	d934      	bls.n	800d69a <__hexnan+0x10e>
 800d630:	f1a8 0204 	sub.w	r2, r8, #4
 800d634:	4623      	mov	r3, r4
 800d636:	f853 1b04 	ldr.w	r1, [r3], #4
 800d63a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d63e:	429f      	cmp	r7, r3
 800d640:	d2f9      	bcs.n	800d636 <__hexnan+0xaa>
 800d642:	1b3b      	subs	r3, r7, r4
 800d644:	f023 0303 	bic.w	r3, r3, #3
 800d648:	3304      	adds	r3, #4
 800d64a:	3e03      	subs	r6, #3
 800d64c:	3401      	adds	r4, #1
 800d64e:	42a6      	cmp	r6, r4
 800d650:	bf38      	it	cc
 800d652:	2304      	movcc	r3, #4
 800d654:	4443      	add	r3, r8
 800d656:	2200      	movs	r2, #0
 800d658:	f843 2b04 	str.w	r2, [r3], #4
 800d65c:	429f      	cmp	r7, r3
 800d65e:	d2fb      	bcs.n	800d658 <__hexnan+0xcc>
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	b91b      	cbnz	r3, 800d66c <__hexnan+0xe0>
 800d664:	4547      	cmp	r7, r8
 800d666:	d126      	bne.n	800d6b6 <__hexnan+0x12a>
 800d668:	2301      	movs	r3, #1
 800d66a:	603b      	str	r3, [r7, #0]
 800d66c:	2005      	movs	r0, #5
 800d66e:	e025      	b.n	800d6bc <__hexnan+0x130>
 800d670:	3501      	adds	r5, #1
 800d672:	2d08      	cmp	r5, #8
 800d674:	f10b 0b01 	add.w	fp, fp, #1
 800d678:	dd06      	ble.n	800d688 <__hexnan+0xfc>
 800d67a:	4544      	cmp	r4, r8
 800d67c:	d9c3      	bls.n	800d606 <__hexnan+0x7a>
 800d67e:	2300      	movs	r3, #0
 800d680:	f844 3c04 	str.w	r3, [r4, #-4]
 800d684:	2501      	movs	r5, #1
 800d686:	3c04      	subs	r4, #4
 800d688:	6822      	ldr	r2, [r4, #0]
 800d68a:	f000 000f 	and.w	r0, r0, #15
 800d68e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d692:	6020      	str	r0, [r4, #0]
 800d694:	e7b7      	b.n	800d606 <__hexnan+0x7a>
 800d696:	2508      	movs	r5, #8
 800d698:	e7b5      	b.n	800d606 <__hexnan+0x7a>
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0df      	beq.n	800d660 <__hexnan+0xd4>
 800d6a0:	f1c3 0320 	rsb	r3, r3, #32
 800d6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a8:	40da      	lsrs	r2, r3
 800d6aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d6b4:	e7d4      	b.n	800d660 <__hexnan+0xd4>
 800d6b6:	3f04      	subs	r7, #4
 800d6b8:	e7d2      	b.n	800d660 <__hexnan+0xd4>
 800d6ba:	2004      	movs	r0, #4
 800d6bc:	b007      	add	sp, #28
 800d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d6c4 <malloc>:
 800d6c4:	4b02      	ldr	r3, [pc, #8]	; (800d6d0 <malloc+0xc>)
 800d6c6:	4601      	mov	r1, r0
 800d6c8:	6818      	ldr	r0, [r3, #0]
 800d6ca:	f000 b823 	b.w	800d714 <_malloc_r>
 800d6ce:	bf00      	nop
 800d6d0:	200001ec 	.word	0x200001ec

0800d6d4 <sbrk_aligned>:
 800d6d4:	b570      	push	{r4, r5, r6, lr}
 800d6d6:	4e0e      	ldr	r6, [pc, #56]	; (800d710 <sbrk_aligned+0x3c>)
 800d6d8:	460c      	mov	r4, r1
 800d6da:	6831      	ldr	r1, [r6, #0]
 800d6dc:	4605      	mov	r5, r0
 800d6de:	b911      	cbnz	r1, 800d6e6 <sbrk_aligned+0x12>
 800d6e0:	f000 ff76 	bl	800e5d0 <_sbrk_r>
 800d6e4:	6030      	str	r0, [r6, #0]
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f000 ff71 	bl	800e5d0 <_sbrk_r>
 800d6ee:	1c43      	adds	r3, r0, #1
 800d6f0:	d00a      	beq.n	800d708 <sbrk_aligned+0x34>
 800d6f2:	1cc4      	adds	r4, r0, #3
 800d6f4:	f024 0403 	bic.w	r4, r4, #3
 800d6f8:	42a0      	cmp	r0, r4
 800d6fa:	d007      	beq.n	800d70c <sbrk_aligned+0x38>
 800d6fc:	1a21      	subs	r1, r4, r0
 800d6fe:	4628      	mov	r0, r5
 800d700:	f000 ff66 	bl	800e5d0 <_sbrk_r>
 800d704:	3001      	adds	r0, #1
 800d706:	d101      	bne.n	800d70c <sbrk_aligned+0x38>
 800d708:	f04f 34ff 	mov.w	r4, #4294967295
 800d70c:	4620      	mov	r0, r4
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	20000d00 	.word	0x20000d00

0800d714 <_malloc_r>:
 800d714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d718:	1ccd      	adds	r5, r1, #3
 800d71a:	f025 0503 	bic.w	r5, r5, #3
 800d71e:	3508      	adds	r5, #8
 800d720:	2d0c      	cmp	r5, #12
 800d722:	bf38      	it	cc
 800d724:	250c      	movcc	r5, #12
 800d726:	2d00      	cmp	r5, #0
 800d728:	4607      	mov	r7, r0
 800d72a:	db01      	blt.n	800d730 <_malloc_r+0x1c>
 800d72c:	42a9      	cmp	r1, r5
 800d72e:	d905      	bls.n	800d73c <_malloc_r+0x28>
 800d730:	230c      	movs	r3, #12
 800d732:	603b      	str	r3, [r7, #0]
 800d734:	2600      	movs	r6, #0
 800d736:	4630      	mov	r0, r6
 800d738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d810 <_malloc_r+0xfc>
 800d740:	f000 f87a 	bl	800d838 <__malloc_lock>
 800d744:	f8d8 3000 	ldr.w	r3, [r8]
 800d748:	461c      	mov	r4, r3
 800d74a:	bb5c      	cbnz	r4, 800d7a4 <_malloc_r+0x90>
 800d74c:	4629      	mov	r1, r5
 800d74e:	4638      	mov	r0, r7
 800d750:	f7ff ffc0 	bl	800d6d4 <sbrk_aligned>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	4604      	mov	r4, r0
 800d758:	d155      	bne.n	800d806 <_malloc_r+0xf2>
 800d75a:	f8d8 4000 	ldr.w	r4, [r8]
 800d75e:	4626      	mov	r6, r4
 800d760:	2e00      	cmp	r6, #0
 800d762:	d145      	bne.n	800d7f0 <_malloc_r+0xdc>
 800d764:	2c00      	cmp	r4, #0
 800d766:	d048      	beq.n	800d7fa <_malloc_r+0xe6>
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	4631      	mov	r1, r6
 800d76c:	4638      	mov	r0, r7
 800d76e:	eb04 0903 	add.w	r9, r4, r3
 800d772:	f000 ff2d 	bl	800e5d0 <_sbrk_r>
 800d776:	4581      	cmp	r9, r0
 800d778:	d13f      	bne.n	800d7fa <_malloc_r+0xe6>
 800d77a:	6821      	ldr	r1, [r4, #0]
 800d77c:	1a6d      	subs	r5, r5, r1
 800d77e:	4629      	mov	r1, r5
 800d780:	4638      	mov	r0, r7
 800d782:	f7ff ffa7 	bl	800d6d4 <sbrk_aligned>
 800d786:	3001      	adds	r0, #1
 800d788:	d037      	beq.n	800d7fa <_malloc_r+0xe6>
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	442b      	add	r3, r5
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	f8d8 3000 	ldr.w	r3, [r8]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d038      	beq.n	800d80a <_malloc_r+0xf6>
 800d798:	685a      	ldr	r2, [r3, #4]
 800d79a:	42a2      	cmp	r2, r4
 800d79c:	d12b      	bne.n	800d7f6 <_malloc_r+0xe2>
 800d79e:	2200      	movs	r2, #0
 800d7a0:	605a      	str	r2, [r3, #4]
 800d7a2:	e00f      	b.n	800d7c4 <_malloc_r+0xb0>
 800d7a4:	6822      	ldr	r2, [r4, #0]
 800d7a6:	1b52      	subs	r2, r2, r5
 800d7a8:	d41f      	bmi.n	800d7ea <_malloc_r+0xd6>
 800d7aa:	2a0b      	cmp	r2, #11
 800d7ac:	d917      	bls.n	800d7de <_malloc_r+0xca>
 800d7ae:	1961      	adds	r1, r4, r5
 800d7b0:	42a3      	cmp	r3, r4
 800d7b2:	6025      	str	r5, [r4, #0]
 800d7b4:	bf18      	it	ne
 800d7b6:	6059      	strne	r1, [r3, #4]
 800d7b8:	6863      	ldr	r3, [r4, #4]
 800d7ba:	bf08      	it	eq
 800d7bc:	f8c8 1000 	streq.w	r1, [r8]
 800d7c0:	5162      	str	r2, [r4, r5]
 800d7c2:	604b      	str	r3, [r1, #4]
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	f104 060b 	add.w	r6, r4, #11
 800d7ca:	f000 f83b 	bl	800d844 <__malloc_unlock>
 800d7ce:	f026 0607 	bic.w	r6, r6, #7
 800d7d2:	1d23      	adds	r3, r4, #4
 800d7d4:	1af2      	subs	r2, r6, r3
 800d7d6:	d0ae      	beq.n	800d736 <_malloc_r+0x22>
 800d7d8:	1b9b      	subs	r3, r3, r6
 800d7da:	50a3      	str	r3, [r4, r2]
 800d7dc:	e7ab      	b.n	800d736 <_malloc_r+0x22>
 800d7de:	42a3      	cmp	r3, r4
 800d7e0:	6862      	ldr	r2, [r4, #4]
 800d7e2:	d1dd      	bne.n	800d7a0 <_malloc_r+0x8c>
 800d7e4:	f8c8 2000 	str.w	r2, [r8]
 800d7e8:	e7ec      	b.n	800d7c4 <_malloc_r+0xb0>
 800d7ea:	4623      	mov	r3, r4
 800d7ec:	6864      	ldr	r4, [r4, #4]
 800d7ee:	e7ac      	b.n	800d74a <_malloc_r+0x36>
 800d7f0:	4634      	mov	r4, r6
 800d7f2:	6876      	ldr	r6, [r6, #4]
 800d7f4:	e7b4      	b.n	800d760 <_malloc_r+0x4c>
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	e7cc      	b.n	800d794 <_malloc_r+0x80>
 800d7fa:	230c      	movs	r3, #12
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	4638      	mov	r0, r7
 800d800:	f000 f820 	bl	800d844 <__malloc_unlock>
 800d804:	e797      	b.n	800d736 <_malloc_r+0x22>
 800d806:	6025      	str	r5, [r4, #0]
 800d808:	e7dc      	b.n	800d7c4 <_malloc_r+0xb0>
 800d80a:	605b      	str	r3, [r3, #4]
 800d80c:	deff      	udf	#255	; 0xff
 800d80e:	bf00      	nop
 800d810:	20000cfc 	.word	0x20000cfc

0800d814 <__ascii_mbtowc>:
 800d814:	b082      	sub	sp, #8
 800d816:	b901      	cbnz	r1, 800d81a <__ascii_mbtowc+0x6>
 800d818:	a901      	add	r1, sp, #4
 800d81a:	b142      	cbz	r2, 800d82e <__ascii_mbtowc+0x1a>
 800d81c:	b14b      	cbz	r3, 800d832 <__ascii_mbtowc+0x1e>
 800d81e:	7813      	ldrb	r3, [r2, #0]
 800d820:	600b      	str	r3, [r1, #0]
 800d822:	7812      	ldrb	r2, [r2, #0]
 800d824:	1e10      	subs	r0, r2, #0
 800d826:	bf18      	it	ne
 800d828:	2001      	movne	r0, #1
 800d82a:	b002      	add	sp, #8
 800d82c:	4770      	bx	lr
 800d82e:	4610      	mov	r0, r2
 800d830:	e7fb      	b.n	800d82a <__ascii_mbtowc+0x16>
 800d832:	f06f 0001 	mvn.w	r0, #1
 800d836:	e7f8      	b.n	800d82a <__ascii_mbtowc+0x16>

0800d838 <__malloc_lock>:
 800d838:	4801      	ldr	r0, [pc, #4]	; (800d840 <__malloc_lock+0x8>)
 800d83a:	f7fe bd0c 	b.w	800c256 <__retarget_lock_acquire_recursive>
 800d83e:	bf00      	nop
 800d840:	20000cf8 	.word	0x20000cf8

0800d844 <__malloc_unlock>:
 800d844:	4801      	ldr	r0, [pc, #4]	; (800d84c <__malloc_unlock+0x8>)
 800d846:	f7fe bd07 	b.w	800c258 <__retarget_lock_release_recursive>
 800d84a:	bf00      	nop
 800d84c:	20000cf8 	.word	0x20000cf8

0800d850 <_Balloc>:
 800d850:	b570      	push	{r4, r5, r6, lr}
 800d852:	69c6      	ldr	r6, [r0, #28]
 800d854:	4604      	mov	r4, r0
 800d856:	460d      	mov	r5, r1
 800d858:	b976      	cbnz	r6, 800d878 <_Balloc+0x28>
 800d85a:	2010      	movs	r0, #16
 800d85c:	f7ff ff32 	bl	800d6c4 <malloc>
 800d860:	4602      	mov	r2, r0
 800d862:	61e0      	str	r0, [r4, #28]
 800d864:	b920      	cbnz	r0, 800d870 <_Balloc+0x20>
 800d866:	4b18      	ldr	r3, [pc, #96]	; (800d8c8 <_Balloc+0x78>)
 800d868:	4818      	ldr	r0, [pc, #96]	; (800d8cc <_Balloc+0x7c>)
 800d86a:	216b      	movs	r1, #107	; 0x6b
 800d86c:	f000 fec0 	bl	800e5f0 <__assert_func>
 800d870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d874:	6006      	str	r6, [r0, #0]
 800d876:	60c6      	str	r6, [r0, #12]
 800d878:	69e6      	ldr	r6, [r4, #28]
 800d87a:	68f3      	ldr	r3, [r6, #12]
 800d87c:	b183      	cbz	r3, 800d8a0 <_Balloc+0x50>
 800d87e:	69e3      	ldr	r3, [r4, #28]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d886:	b9b8      	cbnz	r0, 800d8b8 <_Balloc+0x68>
 800d888:	2101      	movs	r1, #1
 800d88a:	fa01 f605 	lsl.w	r6, r1, r5
 800d88e:	1d72      	adds	r2, r6, #5
 800d890:	0092      	lsls	r2, r2, #2
 800d892:	4620      	mov	r0, r4
 800d894:	f000 feca 	bl	800e62c <_calloc_r>
 800d898:	b160      	cbz	r0, 800d8b4 <_Balloc+0x64>
 800d89a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d89e:	e00e      	b.n	800d8be <_Balloc+0x6e>
 800d8a0:	2221      	movs	r2, #33	; 0x21
 800d8a2:	2104      	movs	r1, #4
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f000 fec1 	bl	800e62c <_calloc_r>
 800d8aa:	69e3      	ldr	r3, [r4, #28]
 800d8ac:	60f0      	str	r0, [r6, #12]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1e4      	bne.n	800d87e <_Balloc+0x2e>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	6802      	ldr	r2, [r0, #0]
 800d8ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8c4:	e7f7      	b.n	800d8b6 <_Balloc+0x66>
 800d8c6:	bf00      	nop
 800d8c8:	08010e42 	.word	0x08010e42
 800d8cc:	08010f22 	.word	0x08010f22

0800d8d0 <_Bfree>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	69c6      	ldr	r6, [r0, #28]
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	b976      	cbnz	r6, 800d8f8 <_Bfree+0x28>
 800d8da:	2010      	movs	r0, #16
 800d8dc:	f7ff fef2 	bl	800d6c4 <malloc>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	61e8      	str	r0, [r5, #28]
 800d8e4:	b920      	cbnz	r0, 800d8f0 <_Bfree+0x20>
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <_Bfree+0x3c>)
 800d8e8:	4809      	ldr	r0, [pc, #36]	; (800d910 <_Bfree+0x40>)
 800d8ea:	218f      	movs	r1, #143	; 0x8f
 800d8ec:	f000 fe80 	bl	800e5f0 <__assert_func>
 800d8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8f4:	6006      	str	r6, [r0, #0]
 800d8f6:	60c6      	str	r6, [r0, #12]
 800d8f8:	b13c      	cbz	r4, 800d90a <_Bfree+0x3a>
 800d8fa:	69eb      	ldr	r3, [r5, #28]
 800d8fc:	6862      	ldr	r2, [r4, #4]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d904:	6021      	str	r1, [r4, #0]
 800d906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	08010e42 	.word	0x08010e42
 800d910:	08010f22 	.word	0x08010f22

0800d914 <__multadd>:
 800d914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d918:	690d      	ldr	r5, [r1, #16]
 800d91a:	4607      	mov	r7, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	461e      	mov	r6, r3
 800d920:	f101 0c14 	add.w	ip, r1, #20
 800d924:	2000      	movs	r0, #0
 800d926:	f8dc 3000 	ldr.w	r3, [ip]
 800d92a:	b299      	uxth	r1, r3
 800d92c:	fb02 6101 	mla	r1, r2, r1, r6
 800d930:	0c1e      	lsrs	r6, r3, #16
 800d932:	0c0b      	lsrs	r3, r1, #16
 800d934:	fb02 3306 	mla	r3, r2, r6, r3
 800d938:	b289      	uxth	r1, r1
 800d93a:	3001      	adds	r0, #1
 800d93c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d940:	4285      	cmp	r5, r0
 800d942:	f84c 1b04 	str.w	r1, [ip], #4
 800d946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d94a:	dcec      	bgt.n	800d926 <__multadd+0x12>
 800d94c:	b30e      	cbz	r6, 800d992 <__multadd+0x7e>
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	42ab      	cmp	r3, r5
 800d952:	dc19      	bgt.n	800d988 <__multadd+0x74>
 800d954:	6861      	ldr	r1, [r4, #4]
 800d956:	4638      	mov	r0, r7
 800d958:	3101      	adds	r1, #1
 800d95a:	f7ff ff79 	bl	800d850 <_Balloc>
 800d95e:	4680      	mov	r8, r0
 800d960:	b928      	cbnz	r0, 800d96e <__multadd+0x5a>
 800d962:	4602      	mov	r2, r0
 800d964:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <__multadd+0x84>)
 800d966:	480d      	ldr	r0, [pc, #52]	; (800d99c <__multadd+0x88>)
 800d968:	21ba      	movs	r1, #186	; 0xba
 800d96a:	f000 fe41 	bl	800e5f0 <__assert_func>
 800d96e:	6922      	ldr	r2, [r4, #16]
 800d970:	3202      	adds	r2, #2
 800d972:	f104 010c 	add.w	r1, r4, #12
 800d976:	0092      	lsls	r2, r2, #2
 800d978:	300c      	adds	r0, #12
 800d97a:	f7fe fc6e 	bl	800c25a <memcpy>
 800d97e:	4621      	mov	r1, r4
 800d980:	4638      	mov	r0, r7
 800d982:	f7ff ffa5 	bl	800d8d0 <_Bfree>
 800d986:	4644      	mov	r4, r8
 800d988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d98c:	3501      	adds	r5, #1
 800d98e:	615e      	str	r6, [r3, #20]
 800d990:	6125      	str	r5, [r4, #16]
 800d992:	4620      	mov	r0, r4
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d998:	08010eb1 	.word	0x08010eb1
 800d99c:	08010f22 	.word	0x08010f22

0800d9a0 <__s2b>:
 800d9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	4615      	mov	r5, r2
 800d9a8:	461f      	mov	r7, r3
 800d9aa:	2209      	movs	r2, #9
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	db09      	blt.n	800d9d0 <__s2b+0x30>
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7ff ff47 	bl	800d850 <_Balloc>
 800d9c2:	b940      	cbnz	r0, 800d9d6 <__s2b+0x36>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	4b19      	ldr	r3, [pc, #100]	; (800da2c <__s2b+0x8c>)
 800d9c8:	4819      	ldr	r0, [pc, #100]	; (800da30 <__s2b+0x90>)
 800d9ca:	21d3      	movs	r1, #211	; 0xd3
 800d9cc:	f000 fe10 	bl	800e5f0 <__assert_func>
 800d9d0:	0052      	lsls	r2, r2, #1
 800d9d2:	3101      	adds	r1, #1
 800d9d4:	e7f0      	b.n	800d9b8 <__s2b+0x18>
 800d9d6:	9b08      	ldr	r3, [sp, #32]
 800d9d8:	6143      	str	r3, [r0, #20]
 800d9da:	2d09      	cmp	r5, #9
 800d9dc:	f04f 0301 	mov.w	r3, #1
 800d9e0:	6103      	str	r3, [r0, #16]
 800d9e2:	dd16      	ble.n	800da12 <__s2b+0x72>
 800d9e4:	f104 0909 	add.w	r9, r4, #9
 800d9e8:	46c8      	mov	r8, r9
 800d9ea:	442c      	add	r4, r5
 800d9ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9f0:	4601      	mov	r1, r0
 800d9f2:	3b30      	subs	r3, #48	; 0x30
 800d9f4:	220a      	movs	r2, #10
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	f7ff ff8c 	bl	800d914 <__multadd>
 800d9fc:	45a0      	cmp	r8, r4
 800d9fe:	d1f5      	bne.n	800d9ec <__s2b+0x4c>
 800da00:	f1a5 0408 	sub.w	r4, r5, #8
 800da04:	444c      	add	r4, r9
 800da06:	1b2d      	subs	r5, r5, r4
 800da08:	1963      	adds	r3, r4, r5
 800da0a:	42bb      	cmp	r3, r7
 800da0c:	db04      	blt.n	800da18 <__s2b+0x78>
 800da0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da12:	340a      	adds	r4, #10
 800da14:	2509      	movs	r5, #9
 800da16:	e7f6      	b.n	800da06 <__s2b+0x66>
 800da18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da1c:	4601      	mov	r1, r0
 800da1e:	3b30      	subs	r3, #48	; 0x30
 800da20:	220a      	movs	r2, #10
 800da22:	4630      	mov	r0, r6
 800da24:	f7ff ff76 	bl	800d914 <__multadd>
 800da28:	e7ee      	b.n	800da08 <__s2b+0x68>
 800da2a:	bf00      	nop
 800da2c:	08010eb1 	.word	0x08010eb1
 800da30:	08010f22 	.word	0x08010f22

0800da34 <__hi0bits>:
 800da34:	0c03      	lsrs	r3, r0, #16
 800da36:	041b      	lsls	r3, r3, #16
 800da38:	b9d3      	cbnz	r3, 800da70 <__hi0bits+0x3c>
 800da3a:	0400      	lsls	r0, r0, #16
 800da3c:	2310      	movs	r3, #16
 800da3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da42:	bf04      	itt	eq
 800da44:	0200      	lsleq	r0, r0, #8
 800da46:	3308      	addeq	r3, #8
 800da48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da4c:	bf04      	itt	eq
 800da4e:	0100      	lsleq	r0, r0, #4
 800da50:	3304      	addeq	r3, #4
 800da52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da56:	bf04      	itt	eq
 800da58:	0080      	lsleq	r0, r0, #2
 800da5a:	3302      	addeq	r3, #2
 800da5c:	2800      	cmp	r0, #0
 800da5e:	db05      	blt.n	800da6c <__hi0bits+0x38>
 800da60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da64:	f103 0301 	add.w	r3, r3, #1
 800da68:	bf08      	it	eq
 800da6a:	2320      	moveq	r3, #32
 800da6c:	4618      	mov	r0, r3
 800da6e:	4770      	bx	lr
 800da70:	2300      	movs	r3, #0
 800da72:	e7e4      	b.n	800da3e <__hi0bits+0xa>

0800da74 <__lo0bits>:
 800da74:	6803      	ldr	r3, [r0, #0]
 800da76:	f013 0207 	ands.w	r2, r3, #7
 800da7a:	d00c      	beq.n	800da96 <__lo0bits+0x22>
 800da7c:	07d9      	lsls	r1, r3, #31
 800da7e:	d422      	bmi.n	800dac6 <__lo0bits+0x52>
 800da80:	079a      	lsls	r2, r3, #30
 800da82:	bf49      	itett	mi
 800da84:	085b      	lsrmi	r3, r3, #1
 800da86:	089b      	lsrpl	r3, r3, #2
 800da88:	6003      	strmi	r3, [r0, #0]
 800da8a:	2201      	movmi	r2, #1
 800da8c:	bf5c      	itt	pl
 800da8e:	6003      	strpl	r3, [r0, #0]
 800da90:	2202      	movpl	r2, #2
 800da92:	4610      	mov	r0, r2
 800da94:	4770      	bx	lr
 800da96:	b299      	uxth	r1, r3
 800da98:	b909      	cbnz	r1, 800da9e <__lo0bits+0x2a>
 800da9a:	0c1b      	lsrs	r3, r3, #16
 800da9c:	2210      	movs	r2, #16
 800da9e:	b2d9      	uxtb	r1, r3
 800daa0:	b909      	cbnz	r1, 800daa6 <__lo0bits+0x32>
 800daa2:	3208      	adds	r2, #8
 800daa4:	0a1b      	lsrs	r3, r3, #8
 800daa6:	0719      	lsls	r1, r3, #28
 800daa8:	bf04      	itt	eq
 800daaa:	091b      	lsreq	r3, r3, #4
 800daac:	3204      	addeq	r2, #4
 800daae:	0799      	lsls	r1, r3, #30
 800dab0:	bf04      	itt	eq
 800dab2:	089b      	lsreq	r3, r3, #2
 800dab4:	3202      	addeq	r2, #2
 800dab6:	07d9      	lsls	r1, r3, #31
 800dab8:	d403      	bmi.n	800dac2 <__lo0bits+0x4e>
 800daba:	085b      	lsrs	r3, r3, #1
 800dabc:	f102 0201 	add.w	r2, r2, #1
 800dac0:	d003      	beq.n	800daca <__lo0bits+0x56>
 800dac2:	6003      	str	r3, [r0, #0]
 800dac4:	e7e5      	b.n	800da92 <__lo0bits+0x1e>
 800dac6:	2200      	movs	r2, #0
 800dac8:	e7e3      	b.n	800da92 <__lo0bits+0x1e>
 800daca:	2220      	movs	r2, #32
 800dacc:	e7e1      	b.n	800da92 <__lo0bits+0x1e>
	...

0800dad0 <__i2b>:
 800dad0:	b510      	push	{r4, lr}
 800dad2:	460c      	mov	r4, r1
 800dad4:	2101      	movs	r1, #1
 800dad6:	f7ff febb 	bl	800d850 <_Balloc>
 800dada:	4602      	mov	r2, r0
 800dadc:	b928      	cbnz	r0, 800daea <__i2b+0x1a>
 800dade:	4b05      	ldr	r3, [pc, #20]	; (800daf4 <__i2b+0x24>)
 800dae0:	4805      	ldr	r0, [pc, #20]	; (800daf8 <__i2b+0x28>)
 800dae2:	f240 1145 	movw	r1, #325	; 0x145
 800dae6:	f000 fd83 	bl	800e5f0 <__assert_func>
 800daea:	2301      	movs	r3, #1
 800daec:	6144      	str	r4, [r0, #20]
 800daee:	6103      	str	r3, [r0, #16]
 800daf0:	bd10      	pop	{r4, pc}
 800daf2:	bf00      	nop
 800daf4:	08010eb1 	.word	0x08010eb1
 800daf8:	08010f22 	.word	0x08010f22

0800dafc <__multiply>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	4691      	mov	r9, r2
 800db02:	690a      	ldr	r2, [r1, #16]
 800db04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db08:	429a      	cmp	r2, r3
 800db0a:	bfb8      	it	lt
 800db0c:	460b      	movlt	r3, r1
 800db0e:	460c      	mov	r4, r1
 800db10:	bfbc      	itt	lt
 800db12:	464c      	movlt	r4, r9
 800db14:	4699      	movlt	r9, r3
 800db16:	6927      	ldr	r7, [r4, #16]
 800db18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db1c:	68a3      	ldr	r3, [r4, #8]
 800db1e:	6861      	ldr	r1, [r4, #4]
 800db20:	eb07 060a 	add.w	r6, r7, sl
 800db24:	42b3      	cmp	r3, r6
 800db26:	b085      	sub	sp, #20
 800db28:	bfb8      	it	lt
 800db2a:	3101      	addlt	r1, #1
 800db2c:	f7ff fe90 	bl	800d850 <_Balloc>
 800db30:	b930      	cbnz	r0, 800db40 <__multiply+0x44>
 800db32:	4602      	mov	r2, r0
 800db34:	4b44      	ldr	r3, [pc, #272]	; (800dc48 <__multiply+0x14c>)
 800db36:	4845      	ldr	r0, [pc, #276]	; (800dc4c <__multiply+0x150>)
 800db38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800db3c:	f000 fd58 	bl	800e5f0 <__assert_func>
 800db40:	f100 0514 	add.w	r5, r0, #20
 800db44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db48:	462b      	mov	r3, r5
 800db4a:	2200      	movs	r2, #0
 800db4c:	4543      	cmp	r3, r8
 800db4e:	d321      	bcc.n	800db94 <__multiply+0x98>
 800db50:	f104 0314 	add.w	r3, r4, #20
 800db54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db58:	f109 0314 	add.w	r3, r9, #20
 800db5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db60:	9202      	str	r2, [sp, #8]
 800db62:	1b3a      	subs	r2, r7, r4
 800db64:	3a15      	subs	r2, #21
 800db66:	f022 0203 	bic.w	r2, r2, #3
 800db6a:	3204      	adds	r2, #4
 800db6c:	f104 0115 	add.w	r1, r4, #21
 800db70:	428f      	cmp	r7, r1
 800db72:	bf38      	it	cc
 800db74:	2204      	movcc	r2, #4
 800db76:	9201      	str	r2, [sp, #4]
 800db78:	9a02      	ldr	r2, [sp, #8]
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d80c      	bhi.n	800db9a <__multiply+0x9e>
 800db80:	2e00      	cmp	r6, #0
 800db82:	dd03      	ble.n	800db8c <__multiply+0x90>
 800db84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d05b      	beq.n	800dc44 <__multiply+0x148>
 800db8c:	6106      	str	r6, [r0, #16]
 800db8e:	b005      	add	sp, #20
 800db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db94:	f843 2b04 	str.w	r2, [r3], #4
 800db98:	e7d8      	b.n	800db4c <__multiply+0x50>
 800db9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800db9e:	f1ba 0f00 	cmp.w	sl, #0
 800dba2:	d024      	beq.n	800dbee <__multiply+0xf2>
 800dba4:	f104 0e14 	add.w	lr, r4, #20
 800dba8:	46a9      	mov	r9, r5
 800dbaa:	f04f 0c00 	mov.w	ip, #0
 800dbae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dbb2:	f8d9 1000 	ldr.w	r1, [r9]
 800dbb6:	fa1f fb82 	uxth.w	fp, r2
 800dbba:	b289      	uxth	r1, r1
 800dbbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800dbc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dbc4:	f8d9 2000 	ldr.w	r2, [r9]
 800dbc8:	4461      	add	r1, ip
 800dbca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbce:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbd6:	b289      	uxth	r1, r1
 800dbd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbdc:	4577      	cmp	r7, lr
 800dbde:	f849 1b04 	str.w	r1, [r9], #4
 800dbe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbe6:	d8e2      	bhi.n	800dbae <__multiply+0xb2>
 800dbe8:	9a01      	ldr	r2, [sp, #4]
 800dbea:	f845 c002 	str.w	ip, [r5, r2]
 800dbee:	9a03      	ldr	r2, [sp, #12]
 800dbf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	f1b9 0f00 	cmp.w	r9, #0
 800dbfa:	d021      	beq.n	800dc40 <__multiply+0x144>
 800dbfc:	6829      	ldr	r1, [r5, #0]
 800dbfe:	f104 0c14 	add.w	ip, r4, #20
 800dc02:	46ae      	mov	lr, r5
 800dc04:	f04f 0a00 	mov.w	sl, #0
 800dc08:	f8bc b000 	ldrh.w	fp, [ip]
 800dc0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc10:	fb09 220b 	mla	r2, r9, fp, r2
 800dc14:	4452      	add	r2, sl
 800dc16:	b289      	uxth	r1, r1
 800dc18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc1c:	f84e 1b04 	str.w	r1, [lr], #4
 800dc20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc28:	f8be 1000 	ldrh.w	r1, [lr]
 800dc2c:	fb09 110a 	mla	r1, r9, sl, r1
 800dc30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dc34:	4567      	cmp	r7, ip
 800dc36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc3a:	d8e5      	bhi.n	800dc08 <__multiply+0x10c>
 800dc3c:	9a01      	ldr	r2, [sp, #4]
 800dc3e:	50a9      	str	r1, [r5, r2]
 800dc40:	3504      	adds	r5, #4
 800dc42:	e799      	b.n	800db78 <__multiply+0x7c>
 800dc44:	3e01      	subs	r6, #1
 800dc46:	e79b      	b.n	800db80 <__multiply+0x84>
 800dc48:	08010eb1 	.word	0x08010eb1
 800dc4c:	08010f22 	.word	0x08010f22

0800dc50 <__pow5mult>:
 800dc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc54:	4615      	mov	r5, r2
 800dc56:	f012 0203 	ands.w	r2, r2, #3
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	d007      	beq.n	800dc70 <__pow5mult+0x20>
 800dc60:	4c25      	ldr	r4, [pc, #148]	; (800dcf8 <__pow5mult+0xa8>)
 800dc62:	3a01      	subs	r2, #1
 800dc64:	2300      	movs	r3, #0
 800dc66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc6a:	f7ff fe53 	bl	800d914 <__multadd>
 800dc6e:	4607      	mov	r7, r0
 800dc70:	10ad      	asrs	r5, r5, #2
 800dc72:	d03d      	beq.n	800dcf0 <__pow5mult+0xa0>
 800dc74:	69f4      	ldr	r4, [r6, #28]
 800dc76:	b97c      	cbnz	r4, 800dc98 <__pow5mult+0x48>
 800dc78:	2010      	movs	r0, #16
 800dc7a:	f7ff fd23 	bl	800d6c4 <malloc>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	61f0      	str	r0, [r6, #28]
 800dc82:	b928      	cbnz	r0, 800dc90 <__pow5mult+0x40>
 800dc84:	4b1d      	ldr	r3, [pc, #116]	; (800dcfc <__pow5mult+0xac>)
 800dc86:	481e      	ldr	r0, [pc, #120]	; (800dd00 <__pow5mult+0xb0>)
 800dc88:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dc8c:	f000 fcb0 	bl	800e5f0 <__assert_func>
 800dc90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc94:	6004      	str	r4, [r0, #0]
 800dc96:	60c4      	str	r4, [r0, #12]
 800dc98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dc9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dca0:	b94c      	cbnz	r4, 800dcb6 <__pow5mult+0x66>
 800dca2:	f240 2171 	movw	r1, #625	; 0x271
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7ff ff12 	bl	800dad0 <__i2b>
 800dcac:	2300      	movs	r3, #0
 800dcae:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	6003      	str	r3, [r0, #0]
 800dcb6:	f04f 0900 	mov.w	r9, #0
 800dcba:	07eb      	lsls	r3, r5, #31
 800dcbc:	d50a      	bpl.n	800dcd4 <__pow5mult+0x84>
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f7ff ff1a 	bl	800dafc <__multiply>
 800dcc8:	4639      	mov	r1, r7
 800dcca:	4680      	mov	r8, r0
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff fdff 	bl	800d8d0 <_Bfree>
 800dcd2:	4647      	mov	r7, r8
 800dcd4:	106d      	asrs	r5, r5, #1
 800dcd6:	d00b      	beq.n	800dcf0 <__pow5mult+0xa0>
 800dcd8:	6820      	ldr	r0, [r4, #0]
 800dcda:	b938      	cbnz	r0, 800dcec <__pow5mult+0x9c>
 800dcdc:	4622      	mov	r2, r4
 800dcde:	4621      	mov	r1, r4
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7ff ff0b 	bl	800dafc <__multiply>
 800dce6:	6020      	str	r0, [r4, #0]
 800dce8:	f8c0 9000 	str.w	r9, [r0]
 800dcec:	4604      	mov	r4, r0
 800dcee:	e7e4      	b.n	800dcba <__pow5mult+0x6a>
 800dcf0:	4638      	mov	r0, r7
 800dcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf6:	bf00      	nop
 800dcf8:	08011070 	.word	0x08011070
 800dcfc:	08010e42 	.word	0x08010e42
 800dd00:	08010f22 	.word	0x08010f22

0800dd04 <__lshift>:
 800dd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd08:	460c      	mov	r4, r1
 800dd0a:	6849      	ldr	r1, [r1, #4]
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd12:	68a3      	ldr	r3, [r4, #8]
 800dd14:	4607      	mov	r7, r0
 800dd16:	4691      	mov	r9, r2
 800dd18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd1c:	f108 0601 	add.w	r6, r8, #1
 800dd20:	42b3      	cmp	r3, r6
 800dd22:	db0b      	blt.n	800dd3c <__lshift+0x38>
 800dd24:	4638      	mov	r0, r7
 800dd26:	f7ff fd93 	bl	800d850 <_Balloc>
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	b948      	cbnz	r0, 800dd42 <__lshift+0x3e>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	4b28      	ldr	r3, [pc, #160]	; (800ddd4 <__lshift+0xd0>)
 800dd32:	4829      	ldr	r0, [pc, #164]	; (800ddd8 <__lshift+0xd4>)
 800dd34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dd38:	f000 fc5a 	bl	800e5f0 <__assert_func>
 800dd3c:	3101      	adds	r1, #1
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	e7ee      	b.n	800dd20 <__lshift+0x1c>
 800dd42:	2300      	movs	r3, #0
 800dd44:	f100 0114 	add.w	r1, r0, #20
 800dd48:	f100 0210 	add.w	r2, r0, #16
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	4553      	cmp	r3, sl
 800dd50:	db33      	blt.n	800ddba <__lshift+0xb6>
 800dd52:	6920      	ldr	r0, [r4, #16]
 800dd54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd58:	f104 0314 	add.w	r3, r4, #20
 800dd5c:	f019 091f 	ands.w	r9, r9, #31
 800dd60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd68:	d02b      	beq.n	800ddc2 <__lshift+0xbe>
 800dd6a:	f1c9 0e20 	rsb	lr, r9, #32
 800dd6e:	468a      	mov	sl, r1
 800dd70:	2200      	movs	r2, #0
 800dd72:	6818      	ldr	r0, [r3, #0]
 800dd74:	fa00 f009 	lsl.w	r0, r0, r9
 800dd78:	4310      	orrs	r0, r2
 800dd7a:	f84a 0b04 	str.w	r0, [sl], #4
 800dd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd82:	459c      	cmp	ip, r3
 800dd84:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd88:	d8f3      	bhi.n	800dd72 <__lshift+0x6e>
 800dd8a:	ebac 0304 	sub.w	r3, ip, r4
 800dd8e:	3b15      	subs	r3, #21
 800dd90:	f023 0303 	bic.w	r3, r3, #3
 800dd94:	3304      	adds	r3, #4
 800dd96:	f104 0015 	add.w	r0, r4, #21
 800dd9a:	4584      	cmp	ip, r0
 800dd9c:	bf38      	it	cc
 800dd9e:	2304      	movcc	r3, #4
 800dda0:	50ca      	str	r2, [r1, r3]
 800dda2:	b10a      	cbz	r2, 800dda8 <__lshift+0xa4>
 800dda4:	f108 0602 	add.w	r6, r8, #2
 800dda8:	3e01      	subs	r6, #1
 800ddaa:	4638      	mov	r0, r7
 800ddac:	612e      	str	r6, [r5, #16]
 800ddae:	4621      	mov	r1, r4
 800ddb0:	f7ff fd8e 	bl	800d8d0 <_Bfree>
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddba:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	e7c5      	b.n	800dd4e <__lshift+0x4a>
 800ddc2:	3904      	subs	r1, #4
 800ddc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddcc:	459c      	cmp	ip, r3
 800ddce:	d8f9      	bhi.n	800ddc4 <__lshift+0xc0>
 800ddd0:	e7ea      	b.n	800dda8 <__lshift+0xa4>
 800ddd2:	bf00      	nop
 800ddd4:	08010eb1 	.word	0x08010eb1
 800ddd8:	08010f22 	.word	0x08010f22

0800dddc <__mcmp>:
 800dddc:	b530      	push	{r4, r5, lr}
 800ddde:	6902      	ldr	r2, [r0, #16]
 800dde0:	690c      	ldr	r4, [r1, #16]
 800dde2:	1b12      	subs	r2, r2, r4
 800dde4:	d10e      	bne.n	800de04 <__mcmp+0x28>
 800dde6:	f100 0314 	add.w	r3, r0, #20
 800ddea:	3114      	adds	r1, #20
 800ddec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ddfc:	42a5      	cmp	r5, r4
 800ddfe:	d003      	beq.n	800de08 <__mcmp+0x2c>
 800de00:	d305      	bcc.n	800de0e <__mcmp+0x32>
 800de02:	2201      	movs	r2, #1
 800de04:	4610      	mov	r0, r2
 800de06:	bd30      	pop	{r4, r5, pc}
 800de08:	4283      	cmp	r3, r0
 800de0a:	d3f3      	bcc.n	800ddf4 <__mcmp+0x18>
 800de0c:	e7fa      	b.n	800de04 <__mcmp+0x28>
 800de0e:	f04f 32ff 	mov.w	r2, #4294967295
 800de12:	e7f7      	b.n	800de04 <__mcmp+0x28>

0800de14 <__mdiff>:
 800de14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	460c      	mov	r4, r1
 800de1a:	4606      	mov	r6, r0
 800de1c:	4611      	mov	r1, r2
 800de1e:	4620      	mov	r0, r4
 800de20:	4690      	mov	r8, r2
 800de22:	f7ff ffdb 	bl	800dddc <__mcmp>
 800de26:	1e05      	subs	r5, r0, #0
 800de28:	d110      	bne.n	800de4c <__mdiff+0x38>
 800de2a:	4629      	mov	r1, r5
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7ff fd0f 	bl	800d850 <_Balloc>
 800de32:	b930      	cbnz	r0, 800de42 <__mdiff+0x2e>
 800de34:	4b3a      	ldr	r3, [pc, #232]	; (800df20 <__mdiff+0x10c>)
 800de36:	4602      	mov	r2, r0
 800de38:	f240 2137 	movw	r1, #567	; 0x237
 800de3c:	4839      	ldr	r0, [pc, #228]	; (800df24 <__mdiff+0x110>)
 800de3e:	f000 fbd7 	bl	800e5f0 <__assert_func>
 800de42:	2301      	movs	r3, #1
 800de44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4c:	bfa4      	itt	ge
 800de4e:	4643      	movge	r3, r8
 800de50:	46a0      	movge	r8, r4
 800de52:	4630      	mov	r0, r6
 800de54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de58:	bfa6      	itte	ge
 800de5a:	461c      	movge	r4, r3
 800de5c:	2500      	movge	r5, #0
 800de5e:	2501      	movlt	r5, #1
 800de60:	f7ff fcf6 	bl	800d850 <_Balloc>
 800de64:	b920      	cbnz	r0, 800de70 <__mdiff+0x5c>
 800de66:	4b2e      	ldr	r3, [pc, #184]	; (800df20 <__mdiff+0x10c>)
 800de68:	4602      	mov	r2, r0
 800de6a:	f240 2145 	movw	r1, #581	; 0x245
 800de6e:	e7e5      	b.n	800de3c <__mdiff+0x28>
 800de70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de74:	6926      	ldr	r6, [r4, #16]
 800de76:	60c5      	str	r5, [r0, #12]
 800de78:	f104 0914 	add.w	r9, r4, #20
 800de7c:	f108 0514 	add.w	r5, r8, #20
 800de80:	f100 0e14 	add.w	lr, r0, #20
 800de84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de8c:	f108 0210 	add.w	r2, r8, #16
 800de90:	46f2      	mov	sl, lr
 800de92:	2100      	movs	r1, #0
 800de94:	f859 3b04 	ldr.w	r3, [r9], #4
 800de98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de9c:	fa11 f88b 	uxtah	r8, r1, fp
 800dea0:	b299      	uxth	r1, r3
 800dea2:	0c1b      	lsrs	r3, r3, #16
 800dea4:	eba8 0801 	sub.w	r8, r8, r1
 800dea8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800deac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800deb0:	fa1f f888 	uxth.w	r8, r8
 800deb4:	1419      	asrs	r1, r3, #16
 800deb6:	454e      	cmp	r6, r9
 800deb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800debc:	f84a 3b04 	str.w	r3, [sl], #4
 800dec0:	d8e8      	bhi.n	800de94 <__mdiff+0x80>
 800dec2:	1b33      	subs	r3, r6, r4
 800dec4:	3b15      	subs	r3, #21
 800dec6:	f023 0303 	bic.w	r3, r3, #3
 800deca:	3304      	adds	r3, #4
 800decc:	3415      	adds	r4, #21
 800dece:	42a6      	cmp	r6, r4
 800ded0:	bf38      	it	cc
 800ded2:	2304      	movcc	r3, #4
 800ded4:	441d      	add	r5, r3
 800ded6:	4473      	add	r3, lr
 800ded8:	469e      	mov	lr, r3
 800deda:	462e      	mov	r6, r5
 800dedc:	4566      	cmp	r6, ip
 800dede:	d30e      	bcc.n	800defe <__mdiff+0xea>
 800dee0:	f10c 0203 	add.w	r2, ip, #3
 800dee4:	1b52      	subs	r2, r2, r5
 800dee6:	f022 0203 	bic.w	r2, r2, #3
 800deea:	3d03      	subs	r5, #3
 800deec:	45ac      	cmp	ip, r5
 800deee:	bf38      	it	cc
 800def0:	2200      	movcc	r2, #0
 800def2:	4413      	add	r3, r2
 800def4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800def8:	b17a      	cbz	r2, 800df1a <__mdiff+0x106>
 800defa:	6107      	str	r7, [r0, #16]
 800defc:	e7a4      	b.n	800de48 <__mdiff+0x34>
 800defe:	f856 8b04 	ldr.w	r8, [r6], #4
 800df02:	fa11 f288 	uxtah	r2, r1, r8
 800df06:	1414      	asrs	r4, r2, #16
 800df08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df0c:	b292      	uxth	r2, r2
 800df0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df12:	f84e 2b04 	str.w	r2, [lr], #4
 800df16:	1421      	asrs	r1, r4, #16
 800df18:	e7e0      	b.n	800dedc <__mdiff+0xc8>
 800df1a:	3f01      	subs	r7, #1
 800df1c:	e7ea      	b.n	800def4 <__mdiff+0xe0>
 800df1e:	bf00      	nop
 800df20:	08010eb1 	.word	0x08010eb1
 800df24:	08010f22 	.word	0x08010f22

0800df28 <__ulp>:
 800df28:	b082      	sub	sp, #8
 800df2a:	ed8d 0b00 	vstr	d0, [sp]
 800df2e:	9a01      	ldr	r2, [sp, #4]
 800df30:	4b0f      	ldr	r3, [pc, #60]	; (800df70 <__ulp+0x48>)
 800df32:	4013      	ands	r3, r2
 800df34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	dc08      	bgt.n	800df4e <__ulp+0x26>
 800df3c:	425b      	negs	r3, r3
 800df3e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800df42:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df46:	da04      	bge.n	800df52 <__ulp+0x2a>
 800df48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df4c:	4113      	asrs	r3, r2
 800df4e:	2200      	movs	r2, #0
 800df50:	e008      	b.n	800df64 <__ulp+0x3c>
 800df52:	f1a2 0314 	sub.w	r3, r2, #20
 800df56:	2b1e      	cmp	r3, #30
 800df58:	bfda      	itte	le
 800df5a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800df5e:	40da      	lsrle	r2, r3
 800df60:	2201      	movgt	r2, #1
 800df62:	2300      	movs	r3, #0
 800df64:	4619      	mov	r1, r3
 800df66:	4610      	mov	r0, r2
 800df68:	ec41 0b10 	vmov	d0, r0, r1
 800df6c:	b002      	add	sp, #8
 800df6e:	4770      	bx	lr
 800df70:	7ff00000 	.word	0x7ff00000

0800df74 <__b2d>:
 800df74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df78:	6906      	ldr	r6, [r0, #16]
 800df7a:	f100 0814 	add.w	r8, r0, #20
 800df7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800df82:	1f37      	subs	r7, r6, #4
 800df84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df88:	4610      	mov	r0, r2
 800df8a:	f7ff fd53 	bl	800da34 <__hi0bits>
 800df8e:	f1c0 0320 	rsb	r3, r0, #32
 800df92:	280a      	cmp	r0, #10
 800df94:	600b      	str	r3, [r1, #0]
 800df96:	491b      	ldr	r1, [pc, #108]	; (800e004 <__b2d+0x90>)
 800df98:	dc15      	bgt.n	800dfc6 <__b2d+0x52>
 800df9a:	f1c0 0c0b 	rsb	ip, r0, #11
 800df9e:	fa22 f30c 	lsr.w	r3, r2, ip
 800dfa2:	45b8      	cmp	r8, r7
 800dfa4:	ea43 0501 	orr.w	r5, r3, r1
 800dfa8:	bf34      	ite	cc
 800dfaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dfae:	2300      	movcs	r3, #0
 800dfb0:	3015      	adds	r0, #21
 800dfb2:	fa02 f000 	lsl.w	r0, r2, r0
 800dfb6:	fa23 f30c 	lsr.w	r3, r3, ip
 800dfba:	4303      	orrs	r3, r0
 800dfbc:	461c      	mov	r4, r3
 800dfbe:	ec45 4b10 	vmov	d0, r4, r5
 800dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc6:	45b8      	cmp	r8, r7
 800dfc8:	bf3a      	itte	cc
 800dfca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dfce:	f1a6 0708 	subcc.w	r7, r6, #8
 800dfd2:	2300      	movcs	r3, #0
 800dfd4:	380b      	subs	r0, #11
 800dfd6:	d012      	beq.n	800dffe <__b2d+0x8a>
 800dfd8:	f1c0 0120 	rsb	r1, r0, #32
 800dfdc:	fa23 f401 	lsr.w	r4, r3, r1
 800dfe0:	4082      	lsls	r2, r0
 800dfe2:	4322      	orrs	r2, r4
 800dfe4:	4547      	cmp	r7, r8
 800dfe6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dfea:	bf8c      	ite	hi
 800dfec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dff0:	2200      	movls	r2, #0
 800dff2:	4083      	lsls	r3, r0
 800dff4:	40ca      	lsrs	r2, r1
 800dff6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dffa:	4313      	orrs	r3, r2
 800dffc:	e7de      	b.n	800dfbc <__b2d+0x48>
 800dffe:	ea42 0501 	orr.w	r5, r2, r1
 800e002:	e7db      	b.n	800dfbc <__b2d+0x48>
 800e004:	3ff00000 	.word	0x3ff00000

0800e008 <__d2b>:
 800e008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e00c:	460f      	mov	r7, r1
 800e00e:	2101      	movs	r1, #1
 800e010:	ec59 8b10 	vmov	r8, r9, d0
 800e014:	4616      	mov	r6, r2
 800e016:	f7ff fc1b 	bl	800d850 <_Balloc>
 800e01a:	4604      	mov	r4, r0
 800e01c:	b930      	cbnz	r0, 800e02c <__d2b+0x24>
 800e01e:	4602      	mov	r2, r0
 800e020:	4b24      	ldr	r3, [pc, #144]	; (800e0b4 <__d2b+0xac>)
 800e022:	4825      	ldr	r0, [pc, #148]	; (800e0b8 <__d2b+0xb0>)
 800e024:	f240 310f 	movw	r1, #783	; 0x30f
 800e028:	f000 fae2 	bl	800e5f0 <__assert_func>
 800e02c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e034:	bb2d      	cbnz	r5, 800e082 <__d2b+0x7a>
 800e036:	9301      	str	r3, [sp, #4]
 800e038:	f1b8 0300 	subs.w	r3, r8, #0
 800e03c:	d026      	beq.n	800e08c <__d2b+0x84>
 800e03e:	4668      	mov	r0, sp
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	f7ff fd17 	bl	800da74 <__lo0bits>
 800e046:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e04a:	b1e8      	cbz	r0, 800e088 <__d2b+0x80>
 800e04c:	f1c0 0320 	rsb	r3, r0, #32
 800e050:	fa02 f303 	lsl.w	r3, r2, r3
 800e054:	430b      	orrs	r3, r1
 800e056:	40c2      	lsrs	r2, r0
 800e058:	6163      	str	r3, [r4, #20]
 800e05a:	9201      	str	r2, [sp, #4]
 800e05c:	9b01      	ldr	r3, [sp, #4]
 800e05e:	61a3      	str	r3, [r4, #24]
 800e060:	2b00      	cmp	r3, #0
 800e062:	bf14      	ite	ne
 800e064:	2202      	movne	r2, #2
 800e066:	2201      	moveq	r2, #1
 800e068:	6122      	str	r2, [r4, #16]
 800e06a:	b1bd      	cbz	r5, 800e09c <__d2b+0x94>
 800e06c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e070:	4405      	add	r5, r0
 800e072:	603d      	str	r5, [r7, #0]
 800e074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e078:	6030      	str	r0, [r6, #0]
 800e07a:	4620      	mov	r0, r4
 800e07c:	b003      	add	sp, #12
 800e07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e086:	e7d6      	b.n	800e036 <__d2b+0x2e>
 800e088:	6161      	str	r1, [r4, #20]
 800e08a:	e7e7      	b.n	800e05c <__d2b+0x54>
 800e08c:	a801      	add	r0, sp, #4
 800e08e:	f7ff fcf1 	bl	800da74 <__lo0bits>
 800e092:	9b01      	ldr	r3, [sp, #4]
 800e094:	6163      	str	r3, [r4, #20]
 800e096:	3020      	adds	r0, #32
 800e098:	2201      	movs	r2, #1
 800e09a:	e7e5      	b.n	800e068 <__d2b+0x60>
 800e09c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0a4:	6038      	str	r0, [r7, #0]
 800e0a6:	6918      	ldr	r0, [r3, #16]
 800e0a8:	f7ff fcc4 	bl	800da34 <__hi0bits>
 800e0ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0b0:	e7e2      	b.n	800e078 <__d2b+0x70>
 800e0b2:	bf00      	nop
 800e0b4:	08010eb1 	.word	0x08010eb1
 800e0b8:	08010f22 	.word	0x08010f22

0800e0bc <__ratio>:
 800e0bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c0:	4688      	mov	r8, r1
 800e0c2:	4669      	mov	r1, sp
 800e0c4:	4681      	mov	r9, r0
 800e0c6:	f7ff ff55 	bl	800df74 <__b2d>
 800e0ca:	a901      	add	r1, sp, #4
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	ec55 4b10 	vmov	r4, r5, d0
 800e0d2:	f7ff ff4f 	bl	800df74 <__b2d>
 800e0d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e0de:	eba3 0c02 	sub.w	ip, r3, r2
 800e0e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e0e6:	1a9b      	subs	r3, r3, r2
 800e0e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e0ec:	ec51 0b10 	vmov	r0, r1, d0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bfd6      	itet	le
 800e0f4:	460a      	movle	r2, r1
 800e0f6:	462a      	movgt	r2, r5
 800e0f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0fc:	468b      	mov	fp, r1
 800e0fe:	462f      	mov	r7, r5
 800e100:	bfd4      	ite	le
 800e102:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e106:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e10a:	4620      	mov	r0, r4
 800e10c:	ee10 2a10 	vmov	r2, s0
 800e110:	465b      	mov	r3, fp
 800e112:	4639      	mov	r1, r7
 800e114:	f7f2 fbb2 	bl	800087c <__aeabi_ddiv>
 800e118:	ec41 0b10 	vmov	d0, r0, r1
 800e11c:	b003      	add	sp, #12
 800e11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e122 <__copybits>:
 800e122:	3901      	subs	r1, #1
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	1149      	asrs	r1, r1, #5
 800e128:	6914      	ldr	r4, [r2, #16]
 800e12a:	3101      	adds	r1, #1
 800e12c:	f102 0314 	add.w	r3, r2, #20
 800e130:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e134:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e138:	1f05      	subs	r5, r0, #4
 800e13a:	42a3      	cmp	r3, r4
 800e13c:	d30c      	bcc.n	800e158 <__copybits+0x36>
 800e13e:	1aa3      	subs	r3, r4, r2
 800e140:	3b11      	subs	r3, #17
 800e142:	f023 0303 	bic.w	r3, r3, #3
 800e146:	3211      	adds	r2, #17
 800e148:	42a2      	cmp	r2, r4
 800e14a:	bf88      	it	hi
 800e14c:	2300      	movhi	r3, #0
 800e14e:	4418      	add	r0, r3
 800e150:	2300      	movs	r3, #0
 800e152:	4288      	cmp	r0, r1
 800e154:	d305      	bcc.n	800e162 <__copybits+0x40>
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	f853 6b04 	ldr.w	r6, [r3], #4
 800e15c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e160:	e7eb      	b.n	800e13a <__copybits+0x18>
 800e162:	f840 3b04 	str.w	r3, [r0], #4
 800e166:	e7f4      	b.n	800e152 <__copybits+0x30>

0800e168 <__any_on>:
 800e168:	f100 0214 	add.w	r2, r0, #20
 800e16c:	6900      	ldr	r0, [r0, #16]
 800e16e:	114b      	asrs	r3, r1, #5
 800e170:	4298      	cmp	r0, r3
 800e172:	b510      	push	{r4, lr}
 800e174:	db11      	blt.n	800e19a <__any_on+0x32>
 800e176:	dd0a      	ble.n	800e18e <__any_on+0x26>
 800e178:	f011 011f 	ands.w	r1, r1, #31
 800e17c:	d007      	beq.n	800e18e <__any_on+0x26>
 800e17e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e182:	fa24 f001 	lsr.w	r0, r4, r1
 800e186:	fa00 f101 	lsl.w	r1, r0, r1
 800e18a:	428c      	cmp	r4, r1
 800e18c:	d10b      	bne.n	800e1a6 <__any_on+0x3e>
 800e18e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e192:	4293      	cmp	r3, r2
 800e194:	d803      	bhi.n	800e19e <__any_on+0x36>
 800e196:	2000      	movs	r0, #0
 800e198:	bd10      	pop	{r4, pc}
 800e19a:	4603      	mov	r3, r0
 800e19c:	e7f7      	b.n	800e18e <__any_on+0x26>
 800e19e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1a2:	2900      	cmp	r1, #0
 800e1a4:	d0f5      	beq.n	800e192 <__any_on+0x2a>
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	e7f6      	b.n	800e198 <__any_on+0x30>

0800e1aa <__ascii_wctomb>:
 800e1aa:	b149      	cbz	r1, 800e1c0 <__ascii_wctomb+0x16>
 800e1ac:	2aff      	cmp	r2, #255	; 0xff
 800e1ae:	bf85      	ittet	hi
 800e1b0:	238a      	movhi	r3, #138	; 0x8a
 800e1b2:	6003      	strhi	r3, [r0, #0]
 800e1b4:	700a      	strbls	r2, [r1, #0]
 800e1b6:	f04f 30ff 	movhi.w	r0, #4294967295
 800e1ba:	bf98      	it	ls
 800e1bc:	2001      	movls	r0, #1
 800e1be:	4770      	bx	lr
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	4770      	bx	lr

0800e1c4 <__ssputs_r>:
 800e1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c8:	688e      	ldr	r6, [r1, #8]
 800e1ca:	461f      	mov	r7, r3
 800e1cc:	42be      	cmp	r6, r7
 800e1ce:	680b      	ldr	r3, [r1, #0]
 800e1d0:	4682      	mov	sl, r0
 800e1d2:	460c      	mov	r4, r1
 800e1d4:	4690      	mov	r8, r2
 800e1d6:	d82c      	bhi.n	800e232 <__ssputs_r+0x6e>
 800e1d8:	898a      	ldrh	r2, [r1, #12]
 800e1da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1de:	d026      	beq.n	800e22e <__ssputs_r+0x6a>
 800e1e0:	6965      	ldr	r5, [r4, #20]
 800e1e2:	6909      	ldr	r1, [r1, #16]
 800e1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1e8:	eba3 0901 	sub.w	r9, r3, r1
 800e1ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1f0:	1c7b      	adds	r3, r7, #1
 800e1f2:	444b      	add	r3, r9
 800e1f4:	106d      	asrs	r5, r5, #1
 800e1f6:	429d      	cmp	r5, r3
 800e1f8:	bf38      	it	cc
 800e1fa:	461d      	movcc	r5, r3
 800e1fc:	0553      	lsls	r3, r2, #21
 800e1fe:	d527      	bpl.n	800e250 <__ssputs_r+0x8c>
 800e200:	4629      	mov	r1, r5
 800e202:	f7ff fa87 	bl	800d714 <_malloc_r>
 800e206:	4606      	mov	r6, r0
 800e208:	b360      	cbz	r0, 800e264 <__ssputs_r+0xa0>
 800e20a:	6921      	ldr	r1, [r4, #16]
 800e20c:	464a      	mov	r2, r9
 800e20e:	f7fe f824 	bl	800c25a <memcpy>
 800e212:	89a3      	ldrh	r3, [r4, #12]
 800e214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e21c:	81a3      	strh	r3, [r4, #12]
 800e21e:	6126      	str	r6, [r4, #16]
 800e220:	6165      	str	r5, [r4, #20]
 800e222:	444e      	add	r6, r9
 800e224:	eba5 0509 	sub.w	r5, r5, r9
 800e228:	6026      	str	r6, [r4, #0]
 800e22a:	60a5      	str	r5, [r4, #8]
 800e22c:	463e      	mov	r6, r7
 800e22e:	42be      	cmp	r6, r7
 800e230:	d900      	bls.n	800e234 <__ssputs_r+0x70>
 800e232:	463e      	mov	r6, r7
 800e234:	6820      	ldr	r0, [r4, #0]
 800e236:	4632      	mov	r2, r6
 800e238:	4641      	mov	r1, r8
 800e23a:	f7fd ff48 	bl	800c0ce <memmove>
 800e23e:	68a3      	ldr	r3, [r4, #8]
 800e240:	1b9b      	subs	r3, r3, r6
 800e242:	60a3      	str	r3, [r4, #8]
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	4433      	add	r3, r6
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	2000      	movs	r0, #0
 800e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e250:	462a      	mov	r2, r5
 800e252:	f000 fa01 	bl	800e658 <_realloc_r>
 800e256:	4606      	mov	r6, r0
 800e258:	2800      	cmp	r0, #0
 800e25a:	d1e0      	bne.n	800e21e <__ssputs_r+0x5a>
 800e25c:	6921      	ldr	r1, [r4, #16]
 800e25e:	4650      	mov	r0, sl
 800e260:	f7fe fe8c 	bl	800cf7c <_free_r>
 800e264:	230c      	movs	r3, #12
 800e266:	f8ca 3000 	str.w	r3, [sl]
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	e7e9      	b.n	800e24c <__ssputs_r+0x88>

0800e278 <_svfiprintf_r>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	4698      	mov	r8, r3
 800e27e:	898b      	ldrh	r3, [r1, #12]
 800e280:	061b      	lsls	r3, r3, #24
 800e282:	b09d      	sub	sp, #116	; 0x74
 800e284:	4607      	mov	r7, r0
 800e286:	460d      	mov	r5, r1
 800e288:	4614      	mov	r4, r2
 800e28a:	d50e      	bpl.n	800e2aa <_svfiprintf_r+0x32>
 800e28c:	690b      	ldr	r3, [r1, #16]
 800e28e:	b963      	cbnz	r3, 800e2aa <_svfiprintf_r+0x32>
 800e290:	2140      	movs	r1, #64	; 0x40
 800e292:	f7ff fa3f 	bl	800d714 <_malloc_r>
 800e296:	6028      	str	r0, [r5, #0]
 800e298:	6128      	str	r0, [r5, #16]
 800e29a:	b920      	cbnz	r0, 800e2a6 <_svfiprintf_r+0x2e>
 800e29c:	230c      	movs	r3, #12
 800e29e:	603b      	str	r3, [r7, #0]
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	e0d0      	b.n	800e448 <_svfiprintf_r+0x1d0>
 800e2a6:	2340      	movs	r3, #64	; 0x40
 800e2a8:	616b      	str	r3, [r5, #20]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ae:	2320      	movs	r3, #32
 800e2b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2b8:	2330      	movs	r3, #48	; 0x30
 800e2ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e460 <_svfiprintf_r+0x1e8>
 800e2be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2c2:	f04f 0901 	mov.w	r9, #1
 800e2c6:	4623      	mov	r3, r4
 800e2c8:	469a      	mov	sl, r3
 800e2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ce:	b10a      	cbz	r2, 800e2d4 <_svfiprintf_r+0x5c>
 800e2d0:	2a25      	cmp	r2, #37	; 0x25
 800e2d2:	d1f9      	bne.n	800e2c8 <_svfiprintf_r+0x50>
 800e2d4:	ebba 0b04 	subs.w	fp, sl, r4
 800e2d8:	d00b      	beq.n	800e2f2 <_svfiprintf_r+0x7a>
 800e2da:	465b      	mov	r3, fp
 800e2dc:	4622      	mov	r2, r4
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	f7ff ff6f 	bl	800e1c4 <__ssputs_r>
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	f000 80a9 	beq.w	800e43e <_svfiprintf_r+0x1c6>
 800e2ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ee:	445a      	add	r2, fp
 800e2f0:	9209      	str	r2, [sp, #36]	; 0x24
 800e2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f000 80a1 	beq.w	800e43e <_svfiprintf_r+0x1c6>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e306:	f10a 0a01 	add.w	sl, sl, #1
 800e30a:	9304      	str	r3, [sp, #16]
 800e30c:	9307      	str	r3, [sp, #28]
 800e30e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e312:	931a      	str	r3, [sp, #104]	; 0x68
 800e314:	4654      	mov	r4, sl
 800e316:	2205      	movs	r2, #5
 800e318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e31c:	4850      	ldr	r0, [pc, #320]	; (800e460 <_svfiprintf_r+0x1e8>)
 800e31e:	f7f1 ff6f 	bl	8000200 <memchr>
 800e322:	9a04      	ldr	r2, [sp, #16]
 800e324:	b9d8      	cbnz	r0, 800e35e <_svfiprintf_r+0xe6>
 800e326:	06d0      	lsls	r0, r2, #27
 800e328:	bf44      	itt	mi
 800e32a:	2320      	movmi	r3, #32
 800e32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e330:	0711      	lsls	r1, r2, #28
 800e332:	bf44      	itt	mi
 800e334:	232b      	movmi	r3, #43	; 0x2b
 800e336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e33a:	f89a 3000 	ldrb.w	r3, [sl]
 800e33e:	2b2a      	cmp	r3, #42	; 0x2a
 800e340:	d015      	beq.n	800e36e <_svfiprintf_r+0xf6>
 800e342:	9a07      	ldr	r2, [sp, #28]
 800e344:	4654      	mov	r4, sl
 800e346:	2000      	movs	r0, #0
 800e348:	f04f 0c0a 	mov.w	ip, #10
 800e34c:	4621      	mov	r1, r4
 800e34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e352:	3b30      	subs	r3, #48	; 0x30
 800e354:	2b09      	cmp	r3, #9
 800e356:	d94d      	bls.n	800e3f4 <_svfiprintf_r+0x17c>
 800e358:	b1b0      	cbz	r0, 800e388 <_svfiprintf_r+0x110>
 800e35a:	9207      	str	r2, [sp, #28]
 800e35c:	e014      	b.n	800e388 <_svfiprintf_r+0x110>
 800e35e:	eba0 0308 	sub.w	r3, r0, r8
 800e362:	fa09 f303 	lsl.w	r3, r9, r3
 800e366:	4313      	orrs	r3, r2
 800e368:	9304      	str	r3, [sp, #16]
 800e36a:	46a2      	mov	sl, r4
 800e36c:	e7d2      	b.n	800e314 <_svfiprintf_r+0x9c>
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	1d19      	adds	r1, r3, #4
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	9103      	str	r1, [sp, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	bfbb      	ittet	lt
 800e37a:	425b      	neglt	r3, r3
 800e37c:	f042 0202 	orrlt.w	r2, r2, #2
 800e380:	9307      	strge	r3, [sp, #28]
 800e382:	9307      	strlt	r3, [sp, #28]
 800e384:	bfb8      	it	lt
 800e386:	9204      	strlt	r2, [sp, #16]
 800e388:	7823      	ldrb	r3, [r4, #0]
 800e38a:	2b2e      	cmp	r3, #46	; 0x2e
 800e38c:	d10c      	bne.n	800e3a8 <_svfiprintf_r+0x130>
 800e38e:	7863      	ldrb	r3, [r4, #1]
 800e390:	2b2a      	cmp	r3, #42	; 0x2a
 800e392:	d134      	bne.n	800e3fe <_svfiprintf_r+0x186>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	1d1a      	adds	r2, r3, #4
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	9203      	str	r2, [sp, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bfb8      	it	lt
 800e3a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3a4:	3402      	adds	r4, #2
 800e3a6:	9305      	str	r3, [sp, #20]
 800e3a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e470 <_svfiprintf_r+0x1f8>
 800e3ac:	7821      	ldrb	r1, [r4, #0]
 800e3ae:	2203      	movs	r2, #3
 800e3b0:	4650      	mov	r0, sl
 800e3b2:	f7f1 ff25 	bl	8000200 <memchr>
 800e3b6:	b138      	cbz	r0, 800e3c8 <_svfiprintf_r+0x150>
 800e3b8:	9b04      	ldr	r3, [sp, #16]
 800e3ba:	eba0 000a 	sub.w	r0, r0, sl
 800e3be:	2240      	movs	r2, #64	; 0x40
 800e3c0:	4082      	lsls	r2, r0
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	3401      	adds	r4, #1
 800e3c6:	9304      	str	r3, [sp, #16]
 800e3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3cc:	4825      	ldr	r0, [pc, #148]	; (800e464 <_svfiprintf_r+0x1ec>)
 800e3ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3d2:	2206      	movs	r2, #6
 800e3d4:	f7f1 ff14 	bl	8000200 <memchr>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d038      	beq.n	800e44e <_svfiprintf_r+0x1d6>
 800e3dc:	4b22      	ldr	r3, [pc, #136]	; (800e468 <_svfiprintf_r+0x1f0>)
 800e3de:	bb1b      	cbnz	r3, 800e428 <_svfiprintf_r+0x1b0>
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	3307      	adds	r3, #7
 800e3e4:	f023 0307 	bic.w	r3, r3, #7
 800e3e8:	3308      	adds	r3, #8
 800e3ea:	9303      	str	r3, [sp, #12]
 800e3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ee:	4433      	add	r3, r6
 800e3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f2:	e768      	b.n	800e2c6 <_svfiprintf_r+0x4e>
 800e3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	2001      	movs	r0, #1
 800e3fc:	e7a6      	b.n	800e34c <_svfiprintf_r+0xd4>
 800e3fe:	2300      	movs	r3, #0
 800e400:	3401      	adds	r4, #1
 800e402:	9305      	str	r3, [sp, #20]
 800e404:	4619      	mov	r1, r3
 800e406:	f04f 0c0a 	mov.w	ip, #10
 800e40a:	4620      	mov	r0, r4
 800e40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e410:	3a30      	subs	r2, #48	; 0x30
 800e412:	2a09      	cmp	r2, #9
 800e414:	d903      	bls.n	800e41e <_svfiprintf_r+0x1a6>
 800e416:	2b00      	cmp	r3, #0
 800e418:	d0c6      	beq.n	800e3a8 <_svfiprintf_r+0x130>
 800e41a:	9105      	str	r1, [sp, #20]
 800e41c:	e7c4      	b.n	800e3a8 <_svfiprintf_r+0x130>
 800e41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e422:	4604      	mov	r4, r0
 800e424:	2301      	movs	r3, #1
 800e426:	e7f0      	b.n	800e40a <_svfiprintf_r+0x192>
 800e428:	ab03      	add	r3, sp, #12
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	462a      	mov	r2, r5
 800e42e:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <_svfiprintf_r+0x1f4>)
 800e430:	a904      	add	r1, sp, #16
 800e432:	4638      	mov	r0, r7
 800e434:	f7fd f92c 	bl	800b690 <_printf_float>
 800e438:	1c42      	adds	r2, r0, #1
 800e43a:	4606      	mov	r6, r0
 800e43c:	d1d6      	bne.n	800e3ec <_svfiprintf_r+0x174>
 800e43e:	89ab      	ldrh	r3, [r5, #12]
 800e440:	065b      	lsls	r3, r3, #25
 800e442:	f53f af2d 	bmi.w	800e2a0 <_svfiprintf_r+0x28>
 800e446:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e448:	b01d      	add	sp, #116	; 0x74
 800e44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44e:	ab03      	add	r3, sp, #12
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	462a      	mov	r2, r5
 800e454:	4b05      	ldr	r3, [pc, #20]	; (800e46c <_svfiprintf_r+0x1f4>)
 800e456:	a904      	add	r1, sp, #16
 800e458:	4638      	mov	r0, r7
 800e45a:	f7fd fbbd 	bl	800bbd8 <_printf_i>
 800e45e:	e7eb      	b.n	800e438 <_svfiprintf_r+0x1c0>
 800e460:	0801107c 	.word	0x0801107c
 800e464:	08011086 	.word	0x08011086
 800e468:	0800b691 	.word	0x0800b691
 800e46c:	0800e1c5 	.word	0x0800e1c5
 800e470:	08011082 	.word	0x08011082

0800e474 <__sflush_r>:
 800e474:	898a      	ldrh	r2, [r1, #12]
 800e476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47a:	4605      	mov	r5, r0
 800e47c:	0710      	lsls	r0, r2, #28
 800e47e:	460c      	mov	r4, r1
 800e480:	d458      	bmi.n	800e534 <__sflush_r+0xc0>
 800e482:	684b      	ldr	r3, [r1, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	dc05      	bgt.n	800e494 <__sflush_r+0x20>
 800e488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	dc02      	bgt.n	800e494 <__sflush_r+0x20>
 800e48e:	2000      	movs	r0, #0
 800e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e496:	2e00      	cmp	r6, #0
 800e498:	d0f9      	beq.n	800e48e <__sflush_r+0x1a>
 800e49a:	2300      	movs	r3, #0
 800e49c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4a0:	682f      	ldr	r7, [r5, #0]
 800e4a2:	6a21      	ldr	r1, [r4, #32]
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	d032      	beq.n	800e50e <__sflush_r+0x9a>
 800e4a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	075a      	lsls	r2, r3, #29
 800e4ae:	d505      	bpl.n	800e4bc <__sflush_r+0x48>
 800e4b0:	6863      	ldr	r3, [r4, #4]
 800e4b2:	1ac0      	subs	r0, r0, r3
 800e4b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4b6:	b10b      	cbz	r3, 800e4bc <__sflush_r+0x48>
 800e4b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4ba:	1ac0      	subs	r0, r0, r3
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4602      	mov	r2, r0
 800e4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4c2:	6a21      	ldr	r1, [r4, #32]
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	47b0      	blx	r6
 800e4c8:	1c43      	adds	r3, r0, #1
 800e4ca:	89a3      	ldrh	r3, [r4, #12]
 800e4cc:	d106      	bne.n	800e4dc <__sflush_r+0x68>
 800e4ce:	6829      	ldr	r1, [r5, #0]
 800e4d0:	291d      	cmp	r1, #29
 800e4d2:	d82b      	bhi.n	800e52c <__sflush_r+0xb8>
 800e4d4:	4a29      	ldr	r2, [pc, #164]	; (800e57c <__sflush_r+0x108>)
 800e4d6:	410a      	asrs	r2, r1
 800e4d8:	07d6      	lsls	r6, r2, #31
 800e4da:	d427      	bmi.n	800e52c <__sflush_r+0xb8>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	6062      	str	r2, [r4, #4]
 800e4e0:	04d9      	lsls	r1, r3, #19
 800e4e2:	6922      	ldr	r2, [r4, #16]
 800e4e4:	6022      	str	r2, [r4, #0]
 800e4e6:	d504      	bpl.n	800e4f2 <__sflush_r+0x7e>
 800e4e8:	1c42      	adds	r2, r0, #1
 800e4ea:	d101      	bne.n	800e4f0 <__sflush_r+0x7c>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	b903      	cbnz	r3, 800e4f2 <__sflush_r+0x7e>
 800e4f0:	6560      	str	r0, [r4, #84]	; 0x54
 800e4f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4f4:	602f      	str	r7, [r5, #0]
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	d0c9      	beq.n	800e48e <__sflush_r+0x1a>
 800e4fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4fe:	4299      	cmp	r1, r3
 800e500:	d002      	beq.n	800e508 <__sflush_r+0x94>
 800e502:	4628      	mov	r0, r5
 800e504:	f7fe fd3a 	bl	800cf7c <_free_r>
 800e508:	2000      	movs	r0, #0
 800e50a:	6360      	str	r0, [r4, #52]	; 0x34
 800e50c:	e7c0      	b.n	800e490 <__sflush_r+0x1c>
 800e50e:	2301      	movs	r3, #1
 800e510:	4628      	mov	r0, r5
 800e512:	47b0      	blx	r6
 800e514:	1c41      	adds	r1, r0, #1
 800e516:	d1c8      	bne.n	800e4aa <__sflush_r+0x36>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0c5      	beq.n	800e4aa <__sflush_r+0x36>
 800e51e:	2b1d      	cmp	r3, #29
 800e520:	d001      	beq.n	800e526 <__sflush_r+0xb2>
 800e522:	2b16      	cmp	r3, #22
 800e524:	d101      	bne.n	800e52a <__sflush_r+0xb6>
 800e526:	602f      	str	r7, [r5, #0]
 800e528:	e7b1      	b.n	800e48e <__sflush_r+0x1a>
 800e52a:	89a3      	ldrh	r3, [r4, #12]
 800e52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e530:	81a3      	strh	r3, [r4, #12]
 800e532:	e7ad      	b.n	800e490 <__sflush_r+0x1c>
 800e534:	690f      	ldr	r7, [r1, #16]
 800e536:	2f00      	cmp	r7, #0
 800e538:	d0a9      	beq.n	800e48e <__sflush_r+0x1a>
 800e53a:	0793      	lsls	r3, r2, #30
 800e53c:	680e      	ldr	r6, [r1, #0]
 800e53e:	bf08      	it	eq
 800e540:	694b      	ldreq	r3, [r1, #20]
 800e542:	600f      	str	r7, [r1, #0]
 800e544:	bf18      	it	ne
 800e546:	2300      	movne	r3, #0
 800e548:	eba6 0807 	sub.w	r8, r6, r7
 800e54c:	608b      	str	r3, [r1, #8]
 800e54e:	f1b8 0f00 	cmp.w	r8, #0
 800e552:	dd9c      	ble.n	800e48e <__sflush_r+0x1a>
 800e554:	6a21      	ldr	r1, [r4, #32]
 800e556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e558:	4643      	mov	r3, r8
 800e55a:	463a      	mov	r2, r7
 800e55c:	4628      	mov	r0, r5
 800e55e:	47b0      	blx	r6
 800e560:	2800      	cmp	r0, #0
 800e562:	dc06      	bgt.n	800e572 <__sflush_r+0xfe>
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e56a:	81a3      	strh	r3, [r4, #12]
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	e78e      	b.n	800e490 <__sflush_r+0x1c>
 800e572:	4407      	add	r7, r0
 800e574:	eba8 0800 	sub.w	r8, r8, r0
 800e578:	e7e9      	b.n	800e54e <__sflush_r+0xda>
 800e57a:	bf00      	nop
 800e57c:	dfbffffe 	.word	0xdfbffffe

0800e580 <_fflush_r>:
 800e580:	b538      	push	{r3, r4, r5, lr}
 800e582:	690b      	ldr	r3, [r1, #16]
 800e584:	4605      	mov	r5, r0
 800e586:	460c      	mov	r4, r1
 800e588:	b913      	cbnz	r3, 800e590 <_fflush_r+0x10>
 800e58a:	2500      	movs	r5, #0
 800e58c:	4628      	mov	r0, r5
 800e58e:	bd38      	pop	{r3, r4, r5, pc}
 800e590:	b118      	cbz	r0, 800e59a <_fflush_r+0x1a>
 800e592:	6a03      	ldr	r3, [r0, #32]
 800e594:	b90b      	cbnz	r3, 800e59a <_fflush_r+0x1a>
 800e596:	f7fd fccd 	bl	800bf34 <__sinit>
 800e59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0f3      	beq.n	800e58a <_fflush_r+0xa>
 800e5a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5a4:	07d0      	lsls	r0, r2, #31
 800e5a6:	d404      	bmi.n	800e5b2 <_fflush_r+0x32>
 800e5a8:	0599      	lsls	r1, r3, #22
 800e5aa:	d402      	bmi.n	800e5b2 <_fflush_r+0x32>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ae:	f7fd fe52 	bl	800c256 <__retarget_lock_acquire_recursive>
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	f7ff ff5d 	bl	800e474 <__sflush_r>
 800e5ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5bc:	07da      	lsls	r2, r3, #31
 800e5be:	4605      	mov	r5, r0
 800e5c0:	d4e4      	bmi.n	800e58c <_fflush_r+0xc>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	059b      	lsls	r3, r3, #22
 800e5c6:	d4e1      	bmi.n	800e58c <_fflush_r+0xc>
 800e5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ca:	f7fd fe45 	bl	800c258 <__retarget_lock_release_recursive>
 800e5ce:	e7dd      	b.n	800e58c <_fflush_r+0xc>

0800e5d0 <_sbrk_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4d06      	ldr	r5, [pc, #24]	; (800e5ec <_sbrk_r+0x1c>)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	602b      	str	r3, [r5, #0]
 800e5dc:	f7f6 fc62 	bl	8004ea4 <_sbrk>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_sbrk_r+0x1a>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_sbrk_r+0x1a>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	20000cf4 	.word	0x20000cf4

0800e5f0 <__assert_func>:
 800e5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5f2:	4614      	mov	r4, r2
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	4b09      	ldr	r3, [pc, #36]	; (800e61c <__assert_func+0x2c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	68d8      	ldr	r0, [r3, #12]
 800e5fe:	b14c      	cbz	r4, 800e614 <__assert_func+0x24>
 800e600:	4b07      	ldr	r3, [pc, #28]	; (800e620 <__assert_func+0x30>)
 800e602:	9100      	str	r1, [sp, #0]
 800e604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e608:	4906      	ldr	r1, [pc, #24]	; (800e624 <__assert_func+0x34>)
 800e60a:	462b      	mov	r3, r5
 800e60c:	f000 f854 	bl	800e6b8 <fiprintf>
 800e610:	f000 f864 	bl	800e6dc <abort>
 800e614:	4b04      	ldr	r3, [pc, #16]	; (800e628 <__assert_func+0x38>)
 800e616:	461c      	mov	r4, r3
 800e618:	e7f3      	b.n	800e602 <__assert_func+0x12>
 800e61a:	bf00      	nop
 800e61c:	200001ec 	.word	0x200001ec
 800e620:	0801108d 	.word	0x0801108d
 800e624:	0801109a 	.word	0x0801109a
 800e628:	080110c8 	.word	0x080110c8

0800e62c <_calloc_r>:
 800e62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e62e:	fba1 2402 	umull	r2, r4, r1, r2
 800e632:	b94c      	cbnz	r4, 800e648 <_calloc_r+0x1c>
 800e634:	4611      	mov	r1, r2
 800e636:	9201      	str	r2, [sp, #4]
 800e638:	f7ff f86c 	bl	800d714 <_malloc_r>
 800e63c:	9a01      	ldr	r2, [sp, #4]
 800e63e:	4605      	mov	r5, r0
 800e640:	b930      	cbnz	r0, 800e650 <_calloc_r+0x24>
 800e642:	4628      	mov	r0, r5
 800e644:	b003      	add	sp, #12
 800e646:	bd30      	pop	{r4, r5, pc}
 800e648:	220c      	movs	r2, #12
 800e64a:	6002      	str	r2, [r0, #0]
 800e64c:	2500      	movs	r5, #0
 800e64e:	e7f8      	b.n	800e642 <_calloc_r+0x16>
 800e650:	4621      	mov	r1, r4
 800e652:	f7fd fd56 	bl	800c102 <memset>
 800e656:	e7f4      	b.n	800e642 <_calloc_r+0x16>

0800e658 <_realloc_r>:
 800e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e65c:	4680      	mov	r8, r0
 800e65e:	4614      	mov	r4, r2
 800e660:	460e      	mov	r6, r1
 800e662:	b921      	cbnz	r1, 800e66e <_realloc_r+0x16>
 800e664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	4611      	mov	r1, r2
 800e66a:	f7ff b853 	b.w	800d714 <_malloc_r>
 800e66e:	b92a      	cbnz	r2, 800e67c <_realloc_r+0x24>
 800e670:	f7fe fc84 	bl	800cf7c <_free_r>
 800e674:	4625      	mov	r5, r4
 800e676:	4628      	mov	r0, r5
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	f000 f835 	bl	800e6ea <_malloc_usable_size_r>
 800e680:	4284      	cmp	r4, r0
 800e682:	4607      	mov	r7, r0
 800e684:	d802      	bhi.n	800e68c <_realloc_r+0x34>
 800e686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e68a:	d812      	bhi.n	800e6b2 <_realloc_r+0x5a>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4640      	mov	r0, r8
 800e690:	f7ff f840 	bl	800d714 <_malloc_r>
 800e694:	4605      	mov	r5, r0
 800e696:	2800      	cmp	r0, #0
 800e698:	d0ed      	beq.n	800e676 <_realloc_r+0x1e>
 800e69a:	42bc      	cmp	r4, r7
 800e69c:	4622      	mov	r2, r4
 800e69e:	4631      	mov	r1, r6
 800e6a0:	bf28      	it	cs
 800e6a2:	463a      	movcs	r2, r7
 800e6a4:	f7fd fdd9 	bl	800c25a <memcpy>
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	f7fe fc66 	bl	800cf7c <_free_r>
 800e6b0:	e7e1      	b.n	800e676 <_realloc_r+0x1e>
 800e6b2:	4635      	mov	r5, r6
 800e6b4:	e7df      	b.n	800e676 <_realloc_r+0x1e>
	...

0800e6b8 <fiprintf>:
 800e6b8:	b40e      	push	{r1, r2, r3}
 800e6ba:	b503      	push	{r0, r1, lr}
 800e6bc:	4601      	mov	r1, r0
 800e6be:	ab03      	add	r3, sp, #12
 800e6c0:	4805      	ldr	r0, [pc, #20]	; (800e6d8 <fiprintf+0x20>)
 800e6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c6:	6800      	ldr	r0, [r0, #0]
 800e6c8:	9301      	str	r3, [sp, #4]
 800e6ca:	f000 f83f 	bl	800e74c <_vfiprintf_r>
 800e6ce:	b002      	add	sp, #8
 800e6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6d4:	b003      	add	sp, #12
 800e6d6:	4770      	bx	lr
 800e6d8:	200001ec 	.word	0x200001ec

0800e6dc <abort>:
 800e6dc:	b508      	push	{r3, lr}
 800e6de:	2006      	movs	r0, #6
 800e6e0:	f000 fa0c 	bl	800eafc <raise>
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	f7f6 fb65 	bl	8004db4 <_exit>

0800e6ea <_malloc_usable_size_r>:
 800e6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ee:	1f18      	subs	r0, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	bfbc      	itt	lt
 800e6f4:	580b      	ldrlt	r3, [r1, r0]
 800e6f6:	18c0      	addlt	r0, r0, r3
 800e6f8:	4770      	bx	lr

0800e6fa <__sfputc_r>:
 800e6fa:	6893      	ldr	r3, [r2, #8]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	b410      	push	{r4}
 800e702:	6093      	str	r3, [r2, #8]
 800e704:	da08      	bge.n	800e718 <__sfputc_r+0x1e>
 800e706:	6994      	ldr	r4, [r2, #24]
 800e708:	42a3      	cmp	r3, r4
 800e70a:	db01      	blt.n	800e710 <__sfputc_r+0x16>
 800e70c:	290a      	cmp	r1, #10
 800e70e:	d103      	bne.n	800e718 <__sfputc_r+0x1e>
 800e710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e714:	f000 b934 	b.w	800e980 <__swbuf_r>
 800e718:	6813      	ldr	r3, [r2, #0]
 800e71a:	1c58      	adds	r0, r3, #1
 800e71c:	6010      	str	r0, [r2, #0]
 800e71e:	7019      	strb	r1, [r3, #0]
 800e720:	4608      	mov	r0, r1
 800e722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <__sfputs_r>:
 800e728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72a:	4606      	mov	r6, r0
 800e72c:	460f      	mov	r7, r1
 800e72e:	4614      	mov	r4, r2
 800e730:	18d5      	adds	r5, r2, r3
 800e732:	42ac      	cmp	r4, r5
 800e734:	d101      	bne.n	800e73a <__sfputs_r+0x12>
 800e736:	2000      	movs	r0, #0
 800e738:	e007      	b.n	800e74a <__sfputs_r+0x22>
 800e73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e73e:	463a      	mov	r2, r7
 800e740:	4630      	mov	r0, r6
 800e742:	f7ff ffda 	bl	800e6fa <__sfputc_r>
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	d1f3      	bne.n	800e732 <__sfputs_r+0xa>
 800e74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e74c <_vfiprintf_r>:
 800e74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e750:	460d      	mov	r5, r1
 800e752:	b09d      	sub	sp, #116	; 0x74
 800e754:	4614      	mov	r4, r2
 800e756:	4698      	mov	r8, r3
 800e758:	4606      	mov	r6, r0
 800e75a:	b118      	cbz	r0, 800e764 <_vfiprintf_r+0x18>
 800e75c:	6a03      	ldr	r3, [r0, #32]
 800e75e:	b90b      	cbnz	r3, 800e764 <_vfiprintf_r+0x18>
 800e760:	f7fd fbe8 	bl	800bf34 <__sinit>
 800e764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e766:	07d9      	lsls	r1, r3, #31
 800e768:	d405      	bmi.n	800e776 <_vfiprintf_r+0x2a>
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	059a      	lsls	r2, r3, #22
 800e76e:	d402      	bmi.n	800e776 <_vfiprintf_r+0x2a>
 800e770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e772:	f7fd fd70 	bl	800c256 <__retarget_lock_acquire_recursive>
 800e776:	89ab      	ldrh	r3, [r5, #12]
 800e778:	071b      	lsls	r3, r3, #28
 800e77a:	d501      	bpl.n	800e780 <_vfiprintf_r+0x34>
 800e77c:	692b      	ldr	r3, [r5, #16]
 800e77e:	b99b      	cbnz	r3, 800e7a8 <_vfiprintf_r+0x5c>
 800e780:	4629      	mov	r1, r5
 800e782:	4630      	mov	r0, r6
 800e784:	f000 f93a 	bl	800e9fc <__swsetup_r>
 800e788:	b170      	cbz	r0, 800e7a8 <_vfiprintf_r+0x5c>
 800e78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e78c:	07dc      	lsls	r4, r3, #31
 800e78e:	d504      	bpl.n	800e79a <_vfiprintf_r+0x4e>
 800e790:	f04f 30ff 	mov.w	r0, #4294967295
 800e794:	b01d      	add	sp, #116	; 0x74
 800e796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	0598      	lsls	r0, r3, #22
 800e79e:	d4f7      	bmi.n	800e790 <_vfiprintf_r+0x44>
 800e7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7a2:	f7fd fd59 	bl	800c258 <__retarget_lock_release_recursive>
 800e7a6:	e7f3      	b.n	800e790 <_vfiprintf_r+0x44>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ac:	2320      	movs	r3, #32
 800e7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b6:	2330      	movs	r3, #48	; 0x30
 800e7b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e96c <_vfiprintf_r+0x220>
 800e7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7c0:	f04f 0901 	mov.w	r9, #1
 800e7c4:	4623      	mov	r3, r4
 800e7c6:	469a      	mov	sl, r3
 800e7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7cc:	b10a      	cbz	r2, 800e7d2 <_vfiprintf_r+0x86>
 800e7ce:	2a25      	cmp	r2, #37	; 0x25
 800e7d0:	d1f9      	bne.n	800e7c6 <_vfiprintf_r+0x7a>
 800e7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d6:	d00b      	beq.n	800e7f0 <_vfiprintf_r+0xa4>
 800e7d8:	465b      	mov	r3, fp
 800e7da:	4622      	mov	r2, r4
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f7ff ffa2 	bl	800e728 <__sfputs_r>
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	f000 80a9 	beq.w	800e93c <_vfiprintf_r+0x1f0>
 800e7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7ec:	445a      	add	r2, fp
 800e7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800e7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 80a1 	beq.w	800e93c <_vfiprintf_r+0x1f0>
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e804:	f10a 0a01 	add.w	sl, sl, #1
 800e808:	9304      	str	r3, [sp, #16]
 800e80a:	9307      	str	r3, [sp, #28]
 800e80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e810:	931a      	str	r3, [sp, #104]	; 0x68
 800e812:	4654      	mov	r4, sl
 800e814:	2205      	movs	r2, #5
 800e816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e81a:	4854      	ldr	r0, [pc, #336]	; (800e96c <_vfiprintf_r+0x220>)
 800e81c:	f7f1 fcf0 	bl	8000200 <memchr>
 800e820:	9a04      	ldr	r2, [sp, #16]
 800e822:	b9d8      	cbnz	r0, 800e85c <_vfiprintf_r+0x110>
 800e824:	06d1      	lsls	r1, r2, #27
 800e826:	bf44      	itt	mi
 800e828:	2320      	movmi	r3, #32
 800e82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e82e:	0713      	lsls	r3, r2, #28
 800e830:	bf44      	itt	mi
 800e832:	232b      	movmi	r3, #43	; 0x2b
 800e834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e838:	f89a 3000 	ldrb.w	r3, [sl]
 800e83c:	2b2a      	cmp	r3, #42	; 0x2a
 800e83e:	d015      	beq.n	800e86c <_vfiprintf_r+0x120>
 800e840:	9a07      	ldr	r2, [sp, #28]
 800e842:	4654      	mov	r4, sl
 800e844:	2000      	movs	r0, #0
 800e846:	f04f 0c0a 	mov.w	ip, #10
 800e84a:	4621      	mov	r1, r4
 800e84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e850:	3b30      	subs	r3, #48	; 0x30
 800e852:	2b09      	cmp	r3, #9
 800e854:	d94d      	bls.n	800e8f2 <_vfiprintf_r+0x1a6>
 800e856:	b1b0      	cbz	r0, 800e886 <_vfiprintf_r+0x13a>
 800e858:	9207      	str	r2, [sp, #28]
 800e85a:	e014      	b.n	800e886 <_vfiprintf_r+0x13a>
 800e85c:	eba0 0308 	sub.w	r3, r0, r8
 800e860:	fa09 f303 	lsl.w	r3, r9, r3
 800e864:	4313      	orrs	r3, r2
 800e866:	9304      	str	r3, [sp, #16]
 800e868:	46a2      	mov	sl, r4
 800e86a:	e7d2      	b.n	800e812 <_vfiprintf_r+0xc6>
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	1d19      	adds	r1, r3, #4
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	9103      	str	r1, [sp, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	bfbb      	ittet	lt
 800e878:	425b      	neglt	r3, r3
 800e87a:	f042 0202 	orrlt.w	r2, r2, #2
 800e87e:	9307      	strge	r3, [sp, #28]
 800e880:	9307      	strlt	r3, [sp, #28]
 800e882:	bfb8      	it	lt
 800e884:	9204      	strlt	r2, [sp, #16]
 800e886:	7823      	ldrb	r3, [r4, #0]
 800e888:	2b2e      	cmp	r3, #46	; 0x2e
 800e88a:	d10c      	bne.n	800e8a6 <_vfiprintf_r+0x15a>
 800e88c:	7863      	ldrb	r3, [r4, #1]
 800e88e:	2b2a      	cmp	r3, #42	; 0x2a
 800e890:	d134      	bne.n	800e8fc <_vfiprintf_r+0x1b0>
 800e892:	9b03      	ldr	r3, [sp, #12]
 800e894:	1d1a      	adds	r2, r3, #4
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	9203      	str	r2, [sp, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	bfb8      	it	lt
 800e89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8a2:	3402      	adds	r4, #2
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e97c <_vfiprintf_r+0x230>
 800e8aa:	7821      	ldrb	r1, [r4, #0]
 800e8ac:	2203      	movs	r2, #3
 800e8ae:	4650      	mov	r0, sl
 800e8b0:	f7f1 fca6 	bl	8000200 <memchr>
 800e8b4:	b138      	cbz	r0, 800e8c6 <_vfiprintf_r+0x17a>
 800e8b6:	9b04      	ldr	r3, [sp, #16]
 800e8b8:	eba0 000a 	sub.w	r0, r0, sl
 800e8bc:	2240      	movs	r2, #64	; 0x40
 800e8be:	4082      	lsls	r2, r0
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	3401      	adds	r4, #1
 800e8c4:	9304      	str	r3, [sp, #16]
 800e8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ca:	4829      	ldr	r0, [pc, #164]	; (800e970 <_vfiprintf_r+0x224>)
 800e8cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8d0:	2206      	movs	r2, #6
 800e8d2:	f7f1 fc95 	bl	8000200 <memchr>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d03f      	beq.n	800e95a <_vfiprintf_r+0x20e>
 800e8da:	4b26      	ldr	r3, [pc, #152]	; (800e974 <_vfiprintf_r+0x228>)
 800e8dc:	bb1b      	cbnz	r3, 800e926 <_vfiprintf_r+0x1da>
 800e8de:	9b03      	ldr	r3, [sp, #12]
 800e8e0:	3307      	adds	r3, #7
 800e8e2:	f023 0307 	bic.w	r3, r3, #7
 800e8e6:	3308      	adds	r3, #8
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ec:	443b      	add	r3, r7
 800e8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f0:	e768      	b.n	800e7c4 <_vfiprintf_r+0x78>
 800e8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	e7a6      	b.n	800e84a <_vfiprintf_r+0xfe>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	3401      	adds	r4, #1
 800e900:	9305      	str	r3, [sp, #20]
 800e902:	4619      	mov	r1, r3
 800e904:	f04f 0c0a 	mov.w	ip, #10
 800e908:	4620      	mov	r0, r4
 800e90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e90e:	3a30      	subs	r2, #48	; 0x30
 800e910:	2a09      	cmp	r2, #9
 800e912:	d903      	bls.n	800e91c <_vfiprintf_r+0x1d0>
 800e914:	2b00      	cmp	r3, #0
 800e916:	d0c6      	beq.n	800e8a6 <_vfiprintf_r+0x15a>
 800e918:	9105      	str	r1, [sp, #20]
 800e91a:	e7c4      	b.n	800e8a6 <_vfiprintf_r+0x15a>
 800e91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e920:	4604      	mov	r4, r0
 800e922:	2301      	movs	r3, #1
 800e924:	e7f0      	b.n	800e908 <_vfiprintf_r+0x1bc>
 800e926:	ab03      	add	r3, sp, #12
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	462a      	mov	r2, r5
 800e92c:	4b12      	ldr	r3, [pc, #72]	; (800e978 <_vfiprintf_r+0x22c>)
 800e92e:	a904      	add	r1, sp, #16
 800e930:	4630      	mov	r0, r6
 800e932:	f7fc fead 	bl	800b690 <_printf_float>
 800e936:	4607      	mov	r7, r0
 800e938:	1c78      	adds	r0, r7, #1
 800e93a:	d1d6      	bne.n	800e8ea <_vfiprintf_r+0x19e>
 800e93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93e:	07d9      	lsls	r1, r3, #31
 800e940:	d405      	bmi.n	800e94e <_vfiprintf_r+0x202>
 800e942:	89ab      	ldrh	r3, [r5, #12]
 800e944:	059a      	lsls	r2, r3, #22
 800e946:	d402      	bmi.n	800e94e <_vfiprintf_r+0x202>
 800e948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e94a:	f7fd fc85 	bl	800c258 <__retarget_lock_release_recursive>
 800e94e:	89ab      	ldrh	r3, [r5, #12]
 800e950:	065b      	lsls	r3, r3, #25
 800e952:	f53f af1d 	bmi.w	800e790 <_vfiprintf_r+0x44>
 800e956:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e958:	e71c      	b.n	800e794 <_vfiprintf_r+0x48>
 800e95a:	ab03      	add	r3, sp, #12
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	462a      	mov	r2, r5
 800e960:	4b05      	ldr	r3, [pc, #20]	; (800e978 <_vfiprintf_r+0x22c>)
 800e962:	a904      	add	r1, sp, #16
 800e964:	4630      	mov	r0, r6
 800e966:	f7fd f937 	bl	800bbd8 <_printf_i>
 800e96a:	e7e4      	b.n	800e936 <_vfiprintf_r+0x1ea>
 800e96c:	0801107c 	.word	0x0801107c
 800e970:	08011086 	.word	0x08011086
 800e974:	0800b691 	.word	0x0800b691
 800e978:	0800e729 	.word	0x0800e729
 800e97c:	08011082 	.word	0x08011082

0800e980 <__swbuf_r>:
 800e980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e982:	460e      	mov	r6, r1
 800e984:	4614      	mov	r4, r2
 800e986:	4605      	mov	r5, r0
 800e988:	b118      	cbz	r0, 800e992 <__swbuf_r+0x12>
 800e98a:	6a03      	ldr	r3, [r0, #32]
 800e98c:	b90b      	cbnz	r3, 800e992 <__swbuf_r+0x12>
 800e98e:	f7fd fad1 	bl	800bf34 <__sinit>
 800e992:	69a3      	ldr	r3, [r4, #24]
 800e994:	60a3      	str	r3, [r4, #8]
 800e996:	89a3      	ldrh	r3, [r4, #12]
 800e998:	071a      	lsls	r2, r3, #28
 800e99a:	d525      	bpl.n	800e9e8 <__swbuf_r+0x68>
 800e99c:	6923      	ldr	r3, [r4, #16]
 800e99e:	b31b      	cbz	r3, 800e9e8 <__swbuf_r+0x68>
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	6922      	ldr	r2, [r4, #16]
 800e9a4:	1a98      	subs	r0, r3, r2
 800e9a6:	6963      	ldr	r3, [r4, #20]
 800e9a8:	b2f6      	uxtb	r6, r6
 800e9aa:	4283      	cmp	r3, r0
 800e9ac:	4637      	mov	r7, r6
 800e9ae:	dc04      	bgt.n	800e9ba <__swbuf_r+0x3a>
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f7ff fde4 	bl	800e580 <_fflush_r>
 800e9b8:	b9e0      	cbnz	r0, 800e9f4 <__swbuf_r+0x74>
 800e9ba:	68a3      	ldr	r3, [r4, #8]
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	60a3      	str	r3, [r4, #8]
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	1c5a      	adds	r2, r3, #1
 800e9c4:	6022      	str	r2, [r4, #0]
 800e9c6:	701e      	strb	r6, [r3, #0]
 800e9c8:	6962      	ldr	r2, [r4, #20]
 800e9ca:	1c43      	adds	r3, r0, #1
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d004      	beq.n	800e9da <__swbuf_r+0x5a>
 800e9d0:	89a3      	ldrh	r3, [r4, #12]
 800e9d2:	07db      	lsls	r3, r3, #31
 800e9d4:	d506      	bpl.n	800e9e4 <__swbuf_r+0x64>
 800e9d6:	2e0a      	cmp	r6, #10
 800e9d8:	d104      	bne.n	800e9e4 <__swbuf_r+0x64>
 800e9da:	4621      	mov	r1, r4
 800e9dc:	4628      	mov	r0, r5
 800e9de:	f7ff fdcf 	bl	800e580 <_fflush_r>
 800e9e2:	b938      	cbnz	r0, 800e9f4 <__swbuf_r+0x74>
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	f000 f806 	bl	800e9fc <__swsetup_r>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d0d5      	beq.n	800e9a0 <__swbuf_r+0x20>
 800e9f4:	f04f 37ff 	mov.w	r7, #4294967295
 800e9f8:	e7f4      	b.n	800e9e4 <__swbuf_r+0x64>
	...

0800e9fc <__swsetup_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	4b2a      	ldr	r3, [pc, #168]	; (800eaa8 <__swsetup_r+0xac>)
 800ea00:	4605      	mov	r5, r0
 800ea02:	6818      	ldr	r0, [r3, #0]
 800ea04:	460c      	mov	r4, r1
 800ea06:	b118      	cbz	r0, 800ea10 <__swsetup_r+0x14>
 800ea08:	6a03      	ldr	r3, [r0, #32]
 800ea0a:	b90b      	cbnz	r3, 800ea10 <__swsetup_r+0x14>
 800ea0c:	f7fd fa92 	bl	800bf34 <__sinit>
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea16:	0718      	lsls	r0, r3, #28
 800ea18:	d422      	bmi.n	800ea60 <__swsetup_r+0x64>
 800ea1a:	06d9      	lsls	r1, r3, #27
 800ea1c:	d407      	bmi.n	800ea2e <__swsetup_r+0x32>
 800ea1e:	2309      	movs	r3, #9
 800ea20:	602b      	str	r3, [r5, #0]
 800ea22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea26:	81a3      	strh	r3, [r4, #12]
 800ea28:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2c:	e034      	b.n	800ea98 <__swsetup_r+0x9c>
 800ea2e:	0758      	lsls	r0, r3, #29
 800ea30:	d512      	bpl.n	800ea58 <__swsetup_r+0x5c>
 800ea32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea34:	b141      	cbz	r1, 800ea48 <__swsetup_r+0x4c>
 800ea36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea3a:	4299      	cmp	r1, r3
 800ea3c:	d002      	beq.n	800ea44 <__swsetup_r+0x48>
 800ea3e:	4628      	mov	r0, r5
 800ea40:	f7fe fa9c 	bl	800cf7c <_free_r>
 800ea44:	2300      	movs	r3, #0
 800ea46:	6363      	str	r3, [r4, #52]	; 0x34
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea4e:	81a3      	strh	r3, [r4, #12]
 800ea50:	2300      	movs	r3, #0
 800ea52:	6063      	str	r3, [r4, #4]
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	89a3      	ldrh	r3, [r4, #12]
 800ea5a:	f043 0308 	orr.w	r3, r3, #8
 800ea5e:	81a3      	strh	r3, [r4, #12]
 800ea60:	6923      	ldr	r3, [r4, #16]
 800ea62:	b94b      	cbnz	r3, 800ea78 <__swsetup_r+0x7c>
 800ea64:	89a3      	ldrh	r3, [r4, #12]
 800ea66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea6e:	d003      	beq.n	800ea78 <__swsetup_r+0x7c>
 800ea70:	4621      	mov	r1, r4
 800ea72:	4628      	mov	r0, r5
 800ea74:	f000 f884 	bl	800eb80 <__smakebuf_r>
 800ea78:	89a0      	ldrh	r0, [r4, #12]
 800ea7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea7e:	f010 0301 	ands.w	r3, r0, #1
 800ea82:	d00a      	beq.n	800ea9a <__swsetup_r+0x9e>
 800ea84:	2300      	movs	r3, #0
 800ea86:	60a3      	str	r3, [r4, #8]
 800ea88:	6963      	ldr	r3, [r4, #20]
 800ea8a:	425b      	negs	r3, r3
 800ea8c:	61a3      	str	r3, [r4, #24]
 800ea8e:	6923      	ldr	r3, [r4, #16]
 800ea90:	b943      	cbnz	r3, 800eaa4 <__swsetup_r+0xa8>
 800ea92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea96:	d1c4      	bne.n	800ea22 <__swsetup_r+0x26>
 800ea98:	bd38      	pop	{r3, r4, r5, pc}
 800ea9a:	0781      	lsls	r1, r0, #30
 800ea9c:	bf58      	it	pl
 800ea9e:	6963      	ldrpl	r3, [r4, #20]
 800eaa0:	60a3      	str	r3, [r4, #8]
 800eaa2:	e7f4      	b.n	800ea8e <__swsetup_r+0x92>
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	e7f7      	b.n	800ea98 <__swsetup_r+0x9c>
 800eaa8:	200001ec 	.word	0x200001ec

0800eaac <_raise_r>:
 800eaac:	291f      	cmp	r1, #31
 800eaae:	b538      	push	{r3, r4, r5, lr}
 800eab0:	4604      	mov	r4, r0
 800eab2:	460d      	mov	r5, r1
 800eab4:	d904      	bls.n	800eac0 <_raise_r+0x14>
 800eab6:	2316      	movs	r3, #22
 800eab8:	6003      	str	r3, [r0, #0]
 800eaba:	f04f 30ff 	mov.w	r0, #4294967295
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eac2:	b112      	cbz	r2, 800eaca <_raise_r+0x1e>
 800eac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eac8:	b94b      	cbnz	r3, 800eade <_raise_r+0x32>
 800eaca:	4620      	mov	r0, r4
 800eacc:	f000 f830 	bl	800eb30 <_getpid_r>
 800ead0:	462a      	mov	r2, r5
 800ead2:	4601      	mov	r1, r0
 800ead4:	4620      	mov	r0, r4
 800ead6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eada:	f000 b817 	b.w	800eb0c <_kill_r>
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d00a      	beq.n	800eaf8 <_raise_r+0x4c>
 800eae2:	1c59      	adds	r1, r3, #1
 800eae4:	d103      	bne.n	800eaee <_raise_r+0x42>
 800eae6:	2316      	movs	r3, #22
 800eae8:	6003      	str	r3, [r0, #0]
 800eaea:	2001      	movs	r0, #1
 800eaec:	e7e7      	b.n	800eabe <_raise_r+0x12>
 800eaee:	2400      	movs	r4, #0
 800eaf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	4798      	blx	r3
 800eaf8:	2000      	movs	r0, #0
 800eafa:	e7e0      	b.n	800eabe <_raise_r+0x12>

0800eafc <raise>:
 800eafc:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <raise+0xc>)
 800eafe:	4601      	mov	r1, r0
 800eb00:	6818      	ldr	r0, [r3, #0]
 800eb02:	f7ff bfd3 	b.w	800eaac <_raise_r>
 800eb06:	bf00      	nop
 800eb08:	200001ec 	.word	0x200001ec

0800eb0c <_kill_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4d07      	ldr	r5, [pc, #28]	; (800eb2c <_kill_r+0x20>)
 800eb10:	2300      	movs	r3, #0
 800eb12:	4604      	mov	r4, r0
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	602b      	str	r3, [r5, #0]
 800eb1a:	f7f6 f93b 	bl	8004d94 <_kill>
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	d102      	bne.n	800eb28 <_kill_r+0x1c>
 800eb22:	682b      	ldr	r3, [r5, #0]
 800eb24:	b103      	cbz	r3, 800eb28 <_kill_r+0x1c>
 800eb26:	6023      	str	r3, [r4, #0]
 800eb28:	bd38      	pop	{r3, r4, r5, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20000cf4 	.word	0x20000cf4

0800eb30 <_getpid_r>:
 800eb30:	f7f6 b928 	b.w	8004d84 <_getpid>

0800eb34 <__swhatbuf_r>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	460c      	mov	r4, r1
 800eb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3c:	2900      	cmp	r1, #0
 800eb3e:	b096      	sub	sp, #88	; 0x58
 800eb40:	4615      	mov	r5, r2
 800eb42:	461e      	mov	r6, r3
 800eb44:	da0d      	bge.n	800eb62 <__swhatbuf_r+0x2e>
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eb4c:	f04f 0100 	mov.w	r1, #0
 800eb50:	bf0c      	ite	eq
 800eb52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eb56:	2340      	movne	r3, #64	; 0x40
 800eb58:	2000      	movs	r0, #0
 800eb5a:	6031      	str	r1, [r6, #0]
 800eb5c:	602b      	str	r3, [r5, #0]
 800eb5e:	b016      	add	sp, #88	; 0x58
 800eb60:	bd70      	pop	{r4, r5, r6, pc}
 800eb62:	466a      	mov	r2, sp
 800eb64:	f000 f848 	bl	800ebf8 <_fstat_r>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	dbec      	blt.n	800eb46 <__swhatbuf_r+0x12>
 800eb6c:	9901      	ldr	r1, [sp, #4]
 800eb6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eb72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eb76:	4259      	negs	r1, r3
 800eb78:	4159      	adcs	r1, r3
 800eb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb7e:	e7eb      	b.n	800eb58 <__swhatbuf_r+0x24>

0800eb80 <__smakebuf_r>:
 800eb80:	898b      	ldrh	r3, [r1, #12]
 800eb82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb84:	079d      	lsls	r5, r3, #30
 800eb86:	4606      	mov	r6, r0
 800eb88:	460c      	mov	r4, r1
 800eb8a:	d507      	bpl.n	800eb9c <__smakebuf_r+0x1c>
 800eb8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	6123      	str	r3, [r4, #16]
 800eb94:	2301      	movs	r3, #1
 800eb96:	6163      	str	r3, [r4, #20]
 800eb98:	b002      	add	sp, #8
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
 800eb9c:	ab01      	add	r3, sp, #4
 800eb9e:	466a      	mov	r2, sp
 800eba0:	f7ff ffc8 	bl	800eb34 <__swhatbuf_r>
 800eba4:	9900      	ldr	r1, [sp, #0]
 800eba6:	4605      	mov	r5, r0
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f7fe fdb3 	bl	800d714 <_malloc_r>
 800ebae:	b948      	cbnz	r0, 800ebc4 <__smakebuf_r+0x44>
 800ebb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebb4:	059a      	lsls	r2, r3, #22
 800ebb6:	d4ef      	bmi.n	800eb98 <__smakebuf_r+0x18>
 800ebb8:	f023 0303 	bic.w	r3, r3, #3
 800ebbc:	f043 0302 	orr.w	r3, r3, #2
 800ebc0:	81a3      	strh	r3, [r4, #12]
 800ebc2:	e7e3      	b.n	800eb8c <__smakebuf_r+0xc>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	6020      	str	r0, [r4, #0]
 800ebc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebcc:	81a3      	strh	r3, [r4, #12]
 800ebce:	9b00      	ldr	r3, [sp, #0]
 800ebd0:	6163      	str	r3, [r4, #20]
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	6120      	str	r0, [r4, #16]
 800ebd6:	b15b      	cbz	r3, 800ebf0 <__smakebuf_r+0x70>
 800ebd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f000 f81d 	bl	800ec1c <_isatty_r>
 800ebe2:	b128      	cbz	r0, 800ebf0 <__smakebuf_r+0x70>
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	f023 0303 	bic.w	r3, r3, #3
 800ebea:	f043 0301 	orr.w	r3, r3, #1
 800ebee:	81a3      	strh	r3, [r4, #12]
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	431d      	orrs	r5, r3
 800ebf4:	81a5      	strh	r5, [r4, #12]
 800ebf6:	e7cf      	b.n	800eb98 <__smakebuf_r+0x18>

0800ebf8 <_fstat_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4d07      	ldr	r5, [pc, #28]	; (800ec18 <_fstat_r+0x20>)
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4604      	mov	r4, r0
 800ec00:	4608      	mov	r0, r1
 800ec02:	4611      	mov	r1, r2
 800ec04:	602b      	str	r3, [r5, #0]
 800ec06:	f7f6 f924 	bl	8004e52 <_fstat>
 800ec0a:	1c43      	adds	r3, r0, #1
 800ec0c:	d102      	bne.n	800ec14 <_fstat_r+0x1c>
 800ec0e:	682b      	ldr	r3, [r5, #0]
 800ec10:	b103      	cbz	r3, 800ec14 <_fstat_r+0x1c>
 800ec12:	6023      	str	r3, [r4, #0]
 800ec14:	bd38      	pop	{r3, r4, r5, pc}
 800ec16:	bf00      	nop
 800ec18:	20000cf4 	.word	0x20000cf4

0800ec1c <_isatty_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d06      	ldr	r5, [pc, #24]	; (800ec38 <_isatty_r+0x1c>)
 800ec20:	2300      	movs	r3, #0
 800ec22:	4604      	mov	r4, r0
 800ec24:	4608      	mov	r0, r1
 800ec26:	602b      	str	r3, [r5, #0]
 800ec28:	f7f6 f923 	bl	8004e72 <_isatty>
 800ec2c:	1c43      	adds	r3, r0, #1
 800ec2e:	d102      	bne.n	800ec36 <_isatty_r+0x1a>
 800ec30:	682b      	ldr	r3, [r5, #0]
 800ec32:	b103      	cbz	r3, 800ec36 <_isatty_r+0x1a>
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	bd38      	pop	{r3, r4, r5, pc}
 800ec38:	20000cf4 	.word	0x20000cf4
 800ec3c:	00000000 	.word	0x00000000

0800ec40 <log>:
 800ec40:	b538      	push	{r3, r4, r5, lr}
 800ec42:	ed2d 8b02 	vpush	{d8}
 800ec46:	ec55 4b10 	vmov	r4, r5, d0
 800ec4a:	f000 f839 	bl	800ecc0 <__ieee754_log>
 800ec4e:	4622      	mov	r2, r4
 800ec50:	462b      	mov	r3, r5
 800ec52:	4620      	mov	r0, r4
 800ec54:	4629      	mov	r1, r5
 800ec56:	eeb0 8a40 	vmov.f32	s16, s0
 800ec5a:	eef0 8a60 	vmov.f32	s17, s1
 800ec5e:	f7f1 ff7d 	bl	8000b5c <__aeabi_dcmpun>
 800ec62:	b998      	cbnz	r0, 800ec8c <log+0x4c>
 800ec64:	2200      	movs	r2, #0
 800ec66:	2300      	movs	r3, #0
 800ec68:	4620      	mov	r0, r4
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	f7f1 ff6c 	bl	8000b48 <__aeabi_dcmpgt>
 800ec70:	b960      	cbnz	r0, 800ec8c <log+0x4c>
 800ec72:	2200      	movs	r2, #0
 800ec74:	2300      	movs	r3, #0
 800ec76:	4620      	mov	r0, r4
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7f1 ff3d 	bl	8000af8 <__aeabi_dcmpeq>
 800ec7e:	b160      	cbz	r0, 800ec9a <log+0x5a>
 800ec80:	f7fd fabe 	bl	800c200 <__errno>
 800ec84:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ecb0 <log+0x70>
 800ec88:	2322      	movs	r3, #34	; 0x22
 800ec8a:	6003      	str	r3, [r0, #0]
 800ec8c:	eeb0 0a48 	vmov.f32	s0, s16
 800ec90:	eef0 0a68 	vmov.f32	s1, s17
 800ec94:	ecbd 8b02 	vpop	{d8}
 800ec98:	bd38      	pop	{r3, r4, r5, pc}
 800ec9a:	f7fd fab1 	bl	800c200 <__errno>
 800ec9e:	ecbd 8b02 	vpop	{d8}
 800eca2:	2321      	movs	r3, #33	; 0x21
 800eca4:	6003      	str	r3, [r0, #0]
 800eca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecaa:	4803      	ldr	r0, [pc, #12]	; (800ecb8 <log+0x78>)
 800ecac:	f7fd bae4 	b.w	800c278 <nan>
 800ecb0:	00000000 	.word	0x00000000
 800ecb4:	fff00000 	.word	0xfff00000
 800ecb8:	080110c8 	.word	0x080110c8
 800ecbc:	00000000 	.word	0x00000000

0800ecc0 <__ieee754_log>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	ec51 0b10 	vmov	r0, r1, d0
 800ecc8:	ed2d 8b04 	vpush	{d8-d9}
 800eccc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ecd0:	b083      	sub	sp, #12
 800ecd2:	460d      	mov	r5, r1
 800ecd4:	da29      	bge.n	800ed2a <__ieee754_log+0x6a>
 800ecd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ecda:	4303      	orrs	r3, r0
 800ecdc:	ee10 2a10 	vmov	r2, s0
 800ece0:	d10c      	bne.n	800ecfc <__ieee754_log+0x3c>
 800ece2:	49cf      	ldr	r1, [pc, #828]	; (800f020 <__ieee754_log+0x360>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	2300      	movs	r3, #0
 800ece8:	2000      	movs	r0, #0
 800ecea:	f7f1 fdc7 	bl	800087c <__aeabi_ddiv>
 800ecee:	ec41 0b10 	vmov	d0, r0, r1
 800ecf2:	b003      	add	sp, #12
 800ecf4:	ecbd 8b04 	vpop	{d8-d9}
 800ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	da05      	bge.n	800ed0c <__ieee754_log+0x4c>
 800ed00:	460b      	mov	r3, r1
 800ed02:	f7f1 fad9 	bl	80002b8 <__aeabi_dsub>
 800ed06:	2200      	movs	r2, #0
 800ed08:	2300      	movs	r3, #0
 800ed0a:	e7ee      	b.n	800ecea <__ieee754_log+0x2a>
 800ed0c:	4bc5      	ldr	r3, [pc, #788]	; (800f024 <__ieee754_log+0x364>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f7f1 fc8a 	bl	8000628 <__aeabi_dmul>
 800ed14:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ed18:	460d      	mov	r5, r1
 800ed1a:	4ac3      	ldr	r2, [pc, #780]	; (800f028 <__ieee754_log+0x368>)
 800ed1c:	4295      	cmp	r5, r2
 800ed1e:	dd06      	ble.n	800ed2e <__ieee754_log+0x6e>
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	f7f1 faca 	bl	80002bc <__adddf3>
 800ed28:	e7e1      	b.n	800ecee <__ieee754_log+0x2e>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	e7f5      	b.n	800ed1a <__ieee754_log+0x5a>
 800ed2e:	152c      	asrs	r4, r5, #20
 800ed30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ed34:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ed38:	441c      	add	r4, r3
 800ed3a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ed3e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ed42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed46:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ed4a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ed4e:	ea42 0105 	orr.w	r1, r2, r5
 800ed52:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ed56:	2200      	movs	r2, #0
 800ed58:	4bb4      	ldr	r3, [pc, #720]	; (800f02c <__ieee754_log+0x36c>)
 800ed5a:	f7f1 faad 	bl	80002b8 <__aeabi_dsub>
 800ed5e:	1cab      	adds	r3, r5, #2
 800ed60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	4682      	mov	sl, r0
 800ed68:	468b      	mov	fp, r1
 800ed6a:	f04f 0200 	mov.w	r2, #0
 800ed6e:	dc53      	bgt.n	800ee18 <__ieee754_log+0x158>
 800ed70:	2300      	movs	r3, #0
 800ed72:	f7f1 fec1 	bl	8000af8 <__aeabi_dcmpeq>
 800ed76:	b1d0      	cbz	r0, 800edae <__ieee754_log+0xee>
 800ed78:	2c00      	cmp	r4, #0
 800ed7a:	f000 8122 	beq.w	800efc2 <__ieee754_log+0x302>
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f7f1 fbe8 	bl	8000554 <__aeabi_i2d>
 800ed84:	a390      	add	r3, pc, #576	; (adr r3, 800efc8 <__ieee754_log+0x308>)
 800ed86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8a:	4606      	mov	r6, r0
 800ed8c:	460f      	mov	r7, r1
 800ed8e:	f7f1 fc4b 	bl	8000628 <__aeabi_dmul>
 800ed92:	a38f      	add	r3, pc, #572	; (adr r3, 800efd0 <__ieee754_log+0x310>)
 800ed94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed98:	4604      	mov	r4, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	4639      	mov	r1, r7
 800eda0:	f7f1 fc42 	bl	8000628 <__aeabi_dmul>
 800eda4:	4602      	mov	r2, r0
 800eda6:	460b      	mov	r3, r1
 800eda8:	4620      	mov	r0, r4
 800edaa:	4629      	mov	r1, r5
 800edac:	e7ba      	b.n	800ed24 <__ieee754_log+0x64>
 800edae:	a38a      	add	r3, pc, #552	; (adr r3, 800efd8 <__ieee754_log+0x318>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	4650      	mov	r0, sl
 800edb6:	4659      	mov	r1, fp
 800edb8:	f7f1 fc36 	bl	8000628 <__aeabi_dmul>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	2000      	movs	r0, #0
 800edc2:	499b      	ldr	r1, [pc, #620]	; (800f030 <__ieee754_log+0x370>)
 800edc4:	f7f1 fa78 	bl	80002b8 <__aeabi_dsub>
 800edc8:	4652      	mov	r2, sl
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	465b      	mov	r3, fp
 800edd0:	4650      	mov	r0, sl
 800edd2:	4659      	mov	r1, fp
 800edd4:	f7f1 fc28 	bl	8000628 <__aeabi_dmul>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4630      	mov	r0, r6
 800edde:	4639      	mov	r1, r7
 800ede0:	f7f1 fc22 	bl	8000628 <__aeabi_dmul>
 800ede4:	4606      	mov	r6, r0
 800ede6:	460f      	mov	r7, r1
 800ede8:	b914      	cbnz	r4, 800edf0 <__ieee754_log+0x130>
 800edea:	4632      	mov	r2, r6
 800edec:	463b      	mov	r3, r7
 800edee:	e0a2      	b.n	800ef36 <__ieee754_log+0x276>
 800edf0:	4620      	mov	r0, r4
 800edf2:	f7f1 fbaf 	bl	8000554 <__aeabi_i2d>
 800edf6:	a374      	add	r3, pc, #464	; (adr r3, 800efc8 <__ieee754_log+0x308>)
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	4680      	mov	r8, r0
 800edfe:	4689      	mov	r9, r1
 800ee00:	f7f1 fc12 	bl	8000628 <__aeabi_dmul>
 800ee04:	a372      	add	r3, pc, #456	; (adr r3, 800efd0 <__ieee754_log+0x310>)
 800ee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	460d      	mov	r5, r1
 800ee0e:	4640      	mov	r0, r8
 800ee10:	4649      	mov	r1, r9
 800ee12:	f7f1 fc09 	bl	8000628 <__aeabi_dmul>
 800ee16:	e0a7      	b.n	800ef68 <__ieee754_log+0x2a8>
 800ee18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee1c:	f7f1 fa4e 	bl	80002bc <__adddf3>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4650      	mov	r0, sl
 800ee26:	4659      	mov	r1, fp
 800ee28:	f7f1 fd28 	bl	800087c <__aeabi_ddiv>
 800ee2c:	ec41 0b18 	vmov	d8, r0, r1
 800ee30:	4620      	mov	r0, r4
 800ee32:	f7f1 fb8f 	bl	8000554 <__aeabi_i2d>
 800ee36:	ec53 2b18 	vmov	r2, r3, d8
 800ee3a:	ec41 0b19 	vmov	d9, r0, r1
 800ee3e:	ec51 0b18 	vmov	r0, r1, d8
 800ee42:	f7f1 fbf1 	bl	8000628 <__aeabi_dmul>
 800ee46:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ee4a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	4602      	mov	r2, r0
 800ee52:	460b      	mov	r3, r1
 800ee54:	4680      	mov	r8, r0
 800ee56:	4689      	mov	r9, r1
 800ee58:	f7f1 fbe6 	bl	8000628 <__aeabi_dmul>
 800ee5c:	a360      	add	r3, pc, #384	; (adr r3, 800efe0 <__ieee754_log+0x320>)
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	4606      	mov	r6, r0
 800ee64:	460f      	mov	r7, r1
 800ee66:	f7f1 fbdf 	bl	8000628 <__aeabi_dmul>
 800ee6a:	a35f      	add	r3, pc, #380	; (adr r3, 800efe8 <__ieee754_log+0x328>)
 800ee6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee70:	f7f1 fa24 	bl	80002bc <__adddf3>
 800ee74:	4632      	mov	r2, r6
 800ee76:	463b      	mov	r3, r7
 800ee78:	f7f1 fbd6 	bl	8000628 <__aeabi_dmul>
 800ee7c:	a35c      	add	r3, pc, #368	; (adr r3, 800eff0 <__ieee754_log+0x330>)
 800ee7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee82:	f7f1 fa1b 	bl	80002bc <__adddf3>
 800ee86:	4632      	mov	r2, r6
 800ee88:	463b      	mov	r3, r7
 800ee8a:	f7f1 fbcd 	bl	8000628 <__aeabi_dmul>
 800ee8e:	a35a      	add	r3, pc, #360	; (adr r3, 800eff8 <__ieee754_log+0x338>)
 800ee90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee94:	f7f1 fa12 	bl	80002bc <__adddf3>
 800ee98:	4642      	mov	r2, r8
 800ee9a:	464b      	mov	r3, r9
 800ee9c:	f7f1 fbc4 	bl	8000628 <__aeabi_dmul>
 800eea0:	a357      	add	r3, pc, #348	; (adr r3, 800f000 <__ieee754_log+0x340>)
 800eea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea6:	4680      	mov	r8, r0
 800eea8:	4689      	mov	r9, r1
 800eeaa:	4630      	mov	r0, r6
 800eeac:	4639      	mov	r1, r7
 800eeae:	f7f1 fbbb 	bl	8000628 <__aeabi_dmul>
 800eeb2:	a355      	add	r3, pc, #340	; (adr r3, 800f008 <__ieee754_log+0x348>)
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	f7f1 fa00 	bl	80002bc <__adddf3>
 800eebc:	4632      	mov	r2, r6
 800eebe:	463b      	mov	r3, r7
 800eec0:	f7f1 fbb2 	bl	8000628 <__aeabi_dmul>
 800eec4:	a352      	add	r3, pc, #328	; (adr r3, 800f010 <__ieee754_log+0x350>)
 800eec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeca:	f7f1 f9f7 	bl	80002bc <__adddf3>
 800eece:	4632      	mov	r2, r6
 800eed0:	463b      	mov	r3, r7
 800eed2:	f7f1 fba9 	bl	8000628 <__aeabi_dmul>
 800eed6:	460b      	mov	r3, r1
 800eed8:	4602      	mov	r2, r0
 800eeda:	4649      	mov	r1, r9
 800eedc:	4640      	mov	r0, r8
 800eede:	f7f1 f9ed 	bl	80002bc <__adddf3>
 800eee2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800eee6:	9b01      	ldr	r3, [sp, #4]
 800eee8:	3551      	adds	r5, #81	; 0x51
 800eeea:	431d      	orrs	r5, r3
 800eeec:	2d00      	cmp	r5, #0
 800eeee:	4680      	mov	r8, r0
 800eef0:	4689      	mov	r9, r1
 800eef2:	dd48      	ble.n	800ef86 <__ieee754_log+0x2c6>
 800eef4:	4b4e      	ldr	r3, [pc, #312]	; (800f030 <__ieee754_log+0x370>)
 800eef6:	2200      	movs	r2, #0
 800eef8:	4650      	mov	r0, sl
 800eefa:	4659      	mov	r1, fp
 800eefc:	f7f1 fb94 	bl	8000628 <__aeabi_dmul>
 800ef00:	4652      	mov	r2, sl
 800ef02:	465b      	mov	r3, fp
 800ef04:	f7f1 fb90 	bl	8000628 <__aeabi_dmul>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4606      	mov	r6, r0
 800ef0e:	460f      	mov	r7, r1
 800ef10:	4640      	mov	r0, r8
 800ef12:	4649      	mov	r1, r9
 800ef14:	f7f1 f9d2 	bl	80002bc <__adddf3>
 800ef18:	ec53 2b18 	vmov	r2, r3, d8
 800ef1c:	f7f1 fb84 	bl	8000628 <__aeabi_dmul>
 800ef20:	4680      	mov	r8, r0
 800ef22:	4689      	mov	r9, r1
 800ef24:	b964      	cbnz	r4, 800ef40 <__ieee754_log+0x280>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	4639      	mov	r1, r7
 800ef2e:	f7f1 f9c3 	bl	80002b8 <__aeabi_dsub>
 800ef32:	4602      	mov	r2, r0
 800ef34:	460b      	mov	r3, r1
 800ef36:	4650      	mov	r0, sl
 800ef38:	4659      	mov	r1, fp
 800ef3a:	f7f1 f9bd 	bl	80002b8 <__aeabi_dsub>
 800ef3e:	e6d6      	b.n	800ecee <__ieee754_log+0x2e>
 800ef40:	a321      	add	r3, pc, #132	; (adr r3, 800efc8 <__ieee754_log+0x308>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	ec51 0b19 	vmov	r0, r1, d9
 800ef4a:	f7f1 fb6d 	bl	8000628 <__aeabi_dmul>
 800ef4e:	a320      	add	r3, pc, #128	; (adr r3, 800efd0 <__ieee754_log+0x310>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	4604      	mov	r4, r0
 800ef56:	460d      	mov	r5, r1
 800ef58:	ec51 0b19 	vmov	r0, r1, d9
 800ef5c:	f7f1 fb64 	bl	8000628 <__aeabi_dmul>
 800ef60:	4642      	mov	r2, r8
 800ef62:	464b      	mov	r3, r9
 800ef64:	f7f1 f9aa 	bl	80002bc <__adddf3>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	4639      	mov	r1, r7
 800ef70:	f7f1 f9a2 	bl	80002b8 <__aeabi_dsub>
 800ef74:	4652      	mov	r2, sl
 800ef76:	465b      	mov	r3, fp
 800ef78:	f7f1 f99e 	bl	80002b8 <__aeabi_dsub>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	460b      	mov	r3, r1
 800ef80:	4620      	mov	r0, r4
 800ef82:	4629      	mov	r1, r5
 800ef84:	e7d9      	b.n	800ef3a <__ieee754_log+0x27a>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	4650      	mov	r0, sl
 800ef8c:	4659      	mov	r1, fp
 800ef8e:	f7f1 f993 	bl	80002b8 <__aeabi_dsub>
 800ef92:	ec53 2b18 	vmov	r2, r3, d8
 800ef96:	f7f1 fb47 	bl	8000628 <__aeabi_dmul>
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	460f      	mov	r7, r1
 800ef9e:	2c00      	cmp	r4, #0
 800efa0:	f43f af23 	beq.w	800edea <__ieee754_log+0x12a>
 800efa4:	a308      	add	r3, pc, #32	; (adr r3, 800efc8 <__ieee754_log+0x308>)
 800efa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efaa:	ec51 0b19 	vmov	r0, r1, d9
 800efae:	f7f1 fb3b 	bl	8000628 <__aeabi_dmul>
 800efb2:	a307      	add	r3, pc, #28	; (adr r3, 800efd0 <__ieee754_log+0x310>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	4604      	mov	r4, r0
 800efba:	460d      	mov	r5, r1
 800efbc:	ec51 0b19 	vmov	r0, r1, d9
 800efc0:	e727      	b.n	800ee12 <__ieee754_log+0x152>
 800efc2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800f018 <__ieee754_log+0x358>
 800efc6:	e694      	b.n	800ecf2 <__ieee754_log+0x32>
 800efc8:	fee00000 	.word	0xfee00000
 800efcc:	3fe62e42 	.word	0x3fe62e42
 800efd0:	35793c76 	.word	0x35793c76
 800efd4:	3dea39ef 	.word	0x3dea39ef
 800efd8:	55555555 	.word	0x55555555
 800efdc:	3fd55555 	.word	0x3fd55555
 800efe0:	df3e5244 	.word	0xdf3e5244
 800efe4:	3fc2f112 	.word	0x3fc2f112
 800efe8:	96cb03de 	.word	0x96cb03de
 800efec:	3fc74664 	.word	0x3fc74664
 800eff0:	94229359 	.word	0x94229359
 800eff4:	3fd24924 	.word	0x3fd24924
 800eff8:	55555593 	.word	0x55555593
 800effc:	3fe55555 	.word	0x3fe55555
 800f000:	d078c69f 	.word	0xd078c69f
 800f004:	3fc39a09 	.word	0x3fc39a09
 800f008:	1d8e78af 	.word	0x1d8e78af
 800f00c:	3fcc71c5 	.word	0x3fcc71c5
 800f010:	9997fa04 	.word	0x9997fa04
 800f014:	3fd99999 	.word	0x3fd99999
	...
 800f020:	c3500000 	.word	0xc3500000
 800f024:	43500000 	.word	0x43500000
 800f028:	7fefffff 	.word	0x7fefffff
 800f02c:	3ff00000 	.word	0x3ff00000
 800f030:	3fe00000 	.word	0x3fe00000

0800f034 <_init>:
 800f034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f036:	bf00      	nop
 800f038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f03a:	bc08      	pop	{r3}
 800f03c:	469e      	mov	lr, r3
 800f03e:	4770      	bx	lr

0800f040 <_fini>:
 800f040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f042:	bf00      	nop
 800f044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f046:	bc08      	pop	{r3}
 800f048:	469e      	mov	lr, r3
 800f04a:	4770      	bx	lr
